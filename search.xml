<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用码云提交作业5</title>
      <link href="/2020/03/09/gitee/%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/03/09/gitee/%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="码云帮助文档"><a href="#码云帮助文档" class="headerlink" title="码云帮助文档"></a>码云帮助文档</h1><p><a href="https://gitee.com/help/articles/4122" target="_blank" rel="noopener">https://gitee.com/help/articles/4122</a></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="注册码云"><a href="#注册码云" class="headerlink" title="注册码云"></a>注册码云</h2><p>这个不介绍了</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="/" alt="1" class="lazyload" data-src="/1.jpg"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><img src="/" alt="2" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/2.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>创建完毕后会跳转到一个页面（<strong>这个页面接下来会用到，别关</strong>），如下</p><p><img src="/" alt="3" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/3.jpg"></p><h1 id="安装git客户端"><a href="#安装git客户端" class="headerlink" title="安装git客户端"></a>安装git客户端</h1><p>下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><p>傻瓜式下一步下一步安装</p><h1 id="配置git环境"><a href="#配置git环境" class="headerlink" title="配置git环境"></a>配置git环境</h1><h2 id="新建文件夹并打开DOS窗口"><a href="#新建文件夹并打开DOS窗口" class="headerlink" title="新建文件夹并打开DOS窗口"></a>新建文件夹并打开DOS窗口</h2><p>在D盘新建”黑马作业”文件夹，进入该文件夹，并右键选择Git Bash Here ，打开命令行窗口。如下图所示</p><p><img src="/" alt="4" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/4.png"></p><p>点击后弹出如下对话框</p><p><img src="/" alt="5" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/5.png"></p><h2 id="执行初始化命令"><a href="#执行初始化命令" class="headerlink" title="执行初始化命令"></a>执行初始化命令</h2><p>新建完git仓库后，跳转到的页面有如下信息</p><p><img src="/" alt="4" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/6.png"></p><p>在刚才打开的黑窗口中依次执行以上命令</p><p>提示：最下面两行的origin是仓库的别名，可以不使用默认别名，自己重新起一个</p><h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><h2 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h2><blockquote><p>将每天的代码放入黑马作业文件夹（目录结构如下）</p></blockquote><p><img src="/" alt="7" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/7.png"></p><h2 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h2><blockquote><p>在黑马作业文件夹右键选择git gui here,如下图所示</p></blockquote><p><img src="/" alt="8" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/8.png"></p><h2 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h2><blockquote><p>在弹出的对话框依次点击以下四个按钮</p></blockquote><p><img src="/" alt="9" class="lazyload" data-src="./%E4%BD%BF%E7%94%A8git%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/9.png"></p>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS</title>
      <link href="/2020/03/01/%E5%B7%A5%E5%85%B7/FastDFS/"/>
      <url>/2020/03/01/%E5%B7%A5%E5%85%B7/FastDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a>FastDFS简介</h1><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存 储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的 问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重 高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件 上传、下载等服务。</p><h1 id="FastDFS体系结构"><a href="#FastDFS体系结构" class="headerlink" title="FastDFS体系结构"></a>FastDFS体系结构</h1><p>FastDFS 架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行 文件上传、下载，通过Tracker server 调度终由 Storage server 完成文件上传和下 载。</p><p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一 些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服 务器。Storage server 作用是文件存储，客户端上传的文件终存储在 Storage 服务器 上，Storageserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。 可以将storage称为存储服务器。设计架构见下图[2],用户上传流程见下图[1]</p><p><img src="/" alt="2" class="lazyload" data-src="./FastDFS/2.jpg"></p><p><img src="/" alt="1" class="lazyload" data-src="./FastDFS/1.jpg"></p><h1 id="FastDFS上传流程"><a href="#FastDFS上传流程" class="headerlink" title="FastDFS上传流程"></a>FastDFS上传流程</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/" alt="3" class="lazyload" data-src="./FastDFS/3.jpg"></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件 的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p><p><strong>组名</strong>：文件上传后所在的 storage 组名称，在文件上传成功后有storage 服务器返回，需 要客户端自行保存。</p><p><strong>虚拟磁盘路径</strong>：storage 配置的虚拟路径，与磁盘选项store_path*对应。如果配置了</p><p>store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p><p><strong>数据两级目录</strong>：storage 服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据<br>文件。</p><p><strong>文件名</strong>：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储</p><p>服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。 </p><h2 id="访问地址说明"><a href="#访问地址说明" class="headerlink" title="访问地址说明"></a>访问地址说明</h2><p>文件上传完毕后，会返回一个地址，如下</p><p><img src="/" alt="1" class="lazyload" data-src="./FastDFS/4.jpg"></p><p>group1是组名</p><p>M是只ian过了Storage组中某个节点的主文件夹地址，比如/etc/fdfs/data</p><p>02/44是通过算法算出来的2个子目录</p><p>wKg…sh是文件的名字</p><p>最后通过 http://地址:端口/group1/M00/02/44/xxxxx.jpg就可以访问上传完毕的资源</p><h1 id="FastDFS在Docker中的安装"><a href="#FastDFS在Docker中的安装" class="headerlink" title="FastDFS在Docker中的安装"></a>FastDFS在Docker中的安装</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull morunchang/fastdfs</span></span><br></pre></td></tr></table></figure><h2 id="运行Tracker"><a href="#运行Tracker" class="headerlink" title="运行Tracker"></a>运行Tracker</h2><blockquote><p>复制以下代码直接运行即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name tracker --net=host morunchang/fastdfs sh tracker.sh</span></span><br></pre></td></tr></table></figure><p>–net=host 是网络模式</p><h2 id="运行Storage"><a href="#运行Storage" class="headerlink" title="运行Storage"></a>运行Storage</h2><blockquote><p>复制一下代码,修改IP和组名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name storage --net=host -e TRACKER_IP=192.168.162.130:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh</span></span><br></pre></td></tr></table></figure><p>–net=host 是网络模式</p><p>192.168.162.130 : 是虚拟机的IP</p><p>group1是当前组的名字，如果想新增storage服务器，再次运行该命令，注意更换组名</p><h2 id="修改容器随docker启动而启动"><a href="#修改容器随docker启动而启动" class="headerlink" title="修改容器随docker启动而启动"></a>修改容器随docker启动而启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker update --restart=always tracker</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker update --restart=always storage</span></span><br></pre></td></tr></table></figure><h2 id="查看或修改nginx配置-非必须步骤"><a href="#查看或修改nginx配置-非必须步骤" class="headerlink" title="查看或修改nginx配置(非必须步骤)"></a>查看或修改nginx配置(非必须步骤)</h2><blockquote><p>storage和tracker安装完毕后都nginx服务器，访问地址http://虚拟机IP:8080,配置文件所在目录为 /etc/nginx。默认配置可以改，也可以不改</p></blockquote><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it storage  /bin/bash</span></span><br></pre></td></tr></table></figure><h3 id="打开nginx配置文件"><a href="#打开nginx配置文件" class="headerlink" title="打开nginx配置文件"></a>打开nginx配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot项目构建文件存储服务"><a href="#SpringBoot项目构建文件存储服务" class="headerlink" title="SpringBoot项目构建文件存储服务"></a>SpringBoot项目构建文件存储服务</h1><h2 id="引入FastDFS的依赖"><a href="#引入FastDFS的依赖" class="headerlink" title="引入FastDFS的依赖"></a>引入FastDFS的依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在resources目录里引入配置文件"><a href="#在resources目录里引入配置文件" class="headerlink" title="在resources目录里引入配置文件"></a>在resources目录里引入配置文件</h2><blockquote><p>fdfs_client.conf</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接超时时间，单位为秒</span></span><br><span class="line"><span class="attr">connect_timeout</span> = <span class="string">60</span></span><br><span class="line"><span class="comment"># 通信超时时间，单位为秒。发送或接收数据时。假设在超时时间后</span></span><br><span class="line"><span class="attr">还不能发送或接收数据，则本次网络通信失败</span></span><br><span class="line"><span class="attr">network_timeout</span> = <span class="string">60</span></span><br><span class="line"><span class="attr">charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="comment"># tracker服务的nginx端口，默认8080</span></span><br><span class="line"><span class="meta">http.tracker_http_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="comment"># tracker服务器地址 虚拟机地址:22122  22122是默认端口</span></span><br><span class="line"><span class="attr">tracker_server</span> = <span class="string">192.168.162.130:22122</span></span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10MB</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18082</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>max-file-size是单个文件大小，max-request-size是设置总上传的数据大小</p><p>如果不是微服务项目eureka和feign配置可以省略</p><h2 id="创建springboot启动程序"><a href="#创建springboot启动程序" class="headerlink" title="创建springboot启动程序"></a>创建springboot启动程序</h2><blockquote><p>因为当前项目不需要并且如果没有引入数据库，所以要配置exclude = {DataSourceAutoConfiguration.class}，否则无法启动</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableEurekaClient</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FileApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FileApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件信息封装"><a href="#文件信息封装" class="headerlink" title="文件信息封装"></a>文件信息封装</h2><p>文件上传一般都有文件的名字、文件的内容、文件的扩展名、文件的md5值、文件的作者等相关属性，我们可以创建一个对象封装这些属性，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//文件名字</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//文件内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line">    <span class="comment">//文件扩展名</span></span><br><span class="line">    <span class="keyword">private</span> String ext;</span><br><span class="line">    <span class="comment">//文件MD5摘要值</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line">    <span class="comment">//文件创建作者</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">(String name, <span class="keyword">byte</span>[] content, String ext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.ext = ext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FastDFS工具类封装"><a href="#FastDFS工具类封装" class="headerlink" title="FastDFS工具类封装"></a>FastDFS工具类封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.changgou.file.utils;</span><br><span class="line"><span class="keyword">import</span> com.changgou.file.FastDFSFile;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> org.slf4j.Logger logger = LoggerFactory.getLogger(FastDFSClient<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 初始化加载FastDFS的TrackerServer配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String filePath = <span class="keyword">new</span> ClassPathResource(<span class="string">"fdfs_client.conf"</span>).getFile().getAbsolutePath();</span><br><span class="line">            ClientGlobal.init(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"FastDFS Client Init Fail!"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1.文件的组名  2.文件的路径信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] upload(FastDFSFile file) &#123;</span><br><span class="line">        <span class="comment">//获取文件的作者</span></span><br><span class="line">        NameValuePair[] meta_list = <span class="keyword">new</span> NameValuePair[<span class="number">1</span>];</span><br><span class="line">        meta_list[<span class="number">0</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"author"</span>, file.getAuthor());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收返回数据</span></span><br><span class="line">        String[] uploadResults = <span class="keyword">null</span>;</span><br><span class="line">        StorageClient storageClient=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建StorageClient客户端对象</span></span><br><span class="line">            storageClient = getTrackerClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/***</span></span><br><span class="line"><span class="comment">             * 文件上传</span></span><br><span class="line"><span class="comment">             * 1)文件字节数组</span></span><br><span class="line"><span class="comment">             * 2)文件扩展名</span></span><br><span class="line"><span class="comment">             * 3)文件作者</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            uploadResults = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Exception when uploadind the file:"</span> + file.getName(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uploadResults == <span class="keyword">null</span> &amp;&amp; storageClient!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"upload file fail, error code:"</span> + storageClient.getErrorCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取组名</span></span><br><span class="line">        String groupName = uploadResults[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//获取文件存储路径</span></span><br><span class="line">        String remoteFileName = uploadResults[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> uploadResults;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取文件信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName:组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName：文件存储完整名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileInfo <span class="title">getFile</span><span class="params">(String groupName, String remoteFileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StorageClient storageClient = getTrackerClient();</span><br><span class="line">            <span class="keyword">return</span> storageClient.get_file_info(groupName, remoteFileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">downFile</span><span class="params">(String groupName, String remoteFileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建StorageClient</span></span><br><span class="line">            StorageClient storageClient = getTrackerClient();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//下载文件</span></span><br><span class="line">            <span class="keyword">byte</span>[] fileByte = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">            InputStream ins = <span class="keyword">new</span> ByteArrayInputStream(fileByte);</span><br><span class="line">            <span class="keyword">return</span> ins;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 文件删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String groupName, String remoteFileName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建StorageClient</span></span><br><span class="line">        StorageClient storageClient = getTrackerClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        <span class="keyword">int</span> i = storageClient.delete_file(groupName, remoteFileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取Storage组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StorageServer[] getStoreStorages(String groupName)</span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//获取TrackerServer</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取Storage组</span></span><br><span class="line">        <span class="keyword">return</span> trackerClient.getStoreStorages(trackerServer, groupName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取Storage信息,IP和端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServerInfo[] getFetchStorages(String groupName,</span><br><span class="line">                                                String remoteFileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="keyword">return</span> trackerClient.getFetchStorages(trackerServer, groupName, remoteFileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取Tracker服务地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTrackerUrl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"http://"</span>+getTrackerServer().getInetSocketAddress().getHostString()+<span class="string">":"</span>+ClientGlobal.getG_tracker_http_port()+<span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取Storage客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StorageClient <span class="title">getTrackerClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TrackerServer trackerServer = getTrackerServer();</span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span>  storageClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 获取Tracker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TrackerServer <span class="title">getTrackerServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="keyword">return</span>  trackerServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在控制器中编写上传的功能"><a href="#在控制器中编写上传的功能" class="headerlink" title="在控制器中编写上传的功能"></a>在控制器中编写上传的功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">upload</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>)</span> MultipartFile file)<span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FastDFSFile fastDFSFile = <span class="keyword">new</span> FastDFSFile(file.getName(),file.getBytes(), StringUtils.getFilenameExtension(file.getOriginalFilename()));</span><br><span class="line">        String[] groupAndPath = FastDFSClient.upload(fastDFSFile);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">"文件上传成功"</span>,FastDFSUtils.getTrackerUrl()+groupAndPath[<span class="number">0</span>]+<span class="string">"/"</span>+groupAndPath[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试文件上传"><a href="#测试文件上传" class="headerlink" title="测试文件上传"></a>测试文件上传</h2><p><img src="/" alt="5" class="lazyload" data-src="./FastDFS/5.jpg"></p><p>data中的地址值就是上传后文件的访问地址，直接访问即可</p><h2 id="思考-文件上传到哪了"><a href="#思考-文件上传到哪了" class="headerlink" title="思考:文件上传到哪了?"></a>思考:文件上传到哪了?</h2><p> 分析地址信息：<a href="http://192.168.162.130:8080/group1/M00/00/00/wKiigl5g4RmAQQBnAAAq8ZibPHI365.jpg" target="_blank" rel="noopener">http://192.168.162.130:8080/group1/M00/00/00/wKiigl5g4RmAQQBnAAAq8ZibPHI365.jpg</a> </p><p>文件在group1服务器</p><p>登录对应的storage服务器，执行以下命令查看storage的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/fdfs/storage.conf</span></span><br></pre></td></tr></table></figure><p>根据以下步骤定位文件路径</p><p>一个group服务器上可以有多个路径，可以写多个store_path_数字，这里store_path_0对应的就是M00,依次类推M11对应的就是store_path_11</p><p><img src="/" alt="6" class="lazyload" data-src="./FastDFS/6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA破解</title>
      <link href="/2020/02/13/IDEA/IDEA%E7%A0%B4%E8%A7%A3/"/>
      <url>/2020/02/13/IDEA/IDEA%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎来到我的博客，点击此处输入密码后访问" />    <label for="pass">欢迎来到我的博客，点击此处输入密码后访问</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18vPi1Nwcnb0lyJAMkV8vhwdDQW/sOfxwUUXxb+WaXToH89RhYSIITiR9CJ+4j1bY2DEeZO7jwWKcfGoXJKHV866vQtdkASAyiynQVBHMBfmzGfHPyalRVs8he7vx8hTzIejl4/BNLbvLy4SVB34zFcMqqMvIscZcoq86SLM43Kbz+YdZEYZll6Xib7+YEo0tSgx2qfPkTNRGMI/iq+l19TNVa1NWKJaNOK2aoiWhFkSghNExlx8pemf1OUQ2yzjzZ5rxJkiFF86LZX0/a2cqXdf58bLVBbLGtGyallnc0vUpum+RBTeSFJHixgR0dDZGRou62RQLW5VnbFLbapsXwQF6/ZtWiRBN9886kIblHXy450YziYFgIp1ofcXOc50d/BDO40HFFidCMora9GR8v/TT9w0Do7f3JlwuZHtCQFVAaE4yMVx9StNxAoBgqQCmMdpZohUQni7qRYl9ysw0kZXQ3GG6JORmiUz5Jm3LA+pAJvdGSuvwrcs1HfA5p2Y0sWCU0AlzLHqv2FPRjcwGaOj546IDHFingXkgCPcs4Ti+SrPDw9Xeca6TFUFxbzgMk83ZEkXkn7eoGcSkgDK/WeS4Y0o06qRd0Ndo8Oy7as2rY15Sx0t1kcLt+lZVInYK1jP07IPe0h2VYzLFw2+I5LMRVbNnKL5V6+1n/RxeB18f3tpoME6khT8r4KxDrHmexoF8gtUtX7fAgYhqGadukE6bHrC2iOgQMcLC2NdFULJ1ukCvG+Iw7pdXl4jb3kvc7NcHqyH8CsnoPI1sQ4/yWD1VXoi+NnY+2iO2pPjUBalzGUt7qzpGzw+KyPOLjZtWeMnoHVHUAFg+KVzlEeAJV5aoKKEpejDKsDS2XJ5foRh2DQsIKSZLiwMgH/3Le6wnOVW2WXRhn8LOomQWS2dn8db/rCldJ5XePyDh9JE2gjab8vFLOzONTmrCoHM278xrcUWsw/GiiOMGBF9yl+cZNpJRNdf/wL/2utDXTq9Q3aT+inaKfeoa8g82oqUdtnZqlaeVA7QdCv7fABrnt4mI5d5W41YrIEeHj7Bq2QfG8VDhQWlYSMyk4hDMljhOMuEYDkAC+t0JkQnnVoJ72GS2tH40eM0wzkZSHagZ1+tqXhkvI9Oy/V3r3P6EJSFGH70IRaoH1oF+Hh976XbCJTGU+MpA4I/pr+cu3r8jEwtzn6JFdeny0D0F8mJ3+9hqtsjBmD26G+5INO+eB3eRaG+OVpp9Sziaxke3zm6AJE9NzbJnnFWmOEE+ec29ZiU6c/BLIMWSmox4tPhJYuNWHvj//hGcp4ZjpYsuYw0zBW3f69pIWx5IgD/oALFo6s2qq0TU+tLazUZwIOrgD0tnYHkpqSiD1GG1c9L9nvIC5WJHnpLsMLWAh1iHQ0sH44Dftkq3LVjFn6hZr0dWPLLDoQQKcRlqxrcCOiQW73CD1susFjYuwP2+B3Bf7R3dYe7jrJNjT5CDnRveCZH2546Zmc0XTrF1rCO9XVStoSM04qIFNPMb4GHpa+MISoLJbT8HcQAe6CipU6D5E1tUga5bGdcnooJ28LEhdohG9zMiLm26ymMf6F+i1c3PpoFlb1idM5YdraJNDSw5ReHUxS8/kCJV31rxKNRf3ad8OwSgBEr34YOmayQk940cQ0tfQM4xT3OJoVDCpwhJiob2sCh5xi1GHsq1PqEzGuV2cSH8Zz1tEY9m0WKiQAA49xbCyzLpQeF/UKf0DQo0YlZ75qVE68R5yw91mDtQMX9DoxHBhkvdtmxLqnO7AKijkmhqqJU4znTn/o+gYHOk4xDUHt/ANksTPGVwqUXDWqddiBegvYIS0d0rqtSl55Xxqv30FmE09f+SNMjdcjoOIdU1MQc2ZQ2xDaLoei7OFj73HnHS3zd56JuB3pEChWfxQamIkbqXMgiJs/lmQvE5mV2YG437itlCQ2QPOIJZkk56CaqrsQx9OrFtBcS/QHvK6H9oAa79J919RYZ3n+zaWpgZq+kCXxxDJXf5UbfDOC7ahb7XkZCVUIwoD8Ui4ZFr2bc5cXRUNwEdlA8bcrERpgn8cl4uqCHHfodOEgnBhOnJenvjF24xR5xPkxjfMZghKJZPHrS1SE2pLzdNqOdcXDpTgYjY4ORzQjgkhbx/GMyBKxpLxujhdakUIMMEmzpBbmTuB5zddOQizY3QaqYUa7OKDelUK0/5IQbN6pOMzqGze3iB/yiNnTHosimiiV8q90TfvbLaHxKyEQ+ck13unfWbuQmZ4n0QthpOv1PuS0l5PxtCCGFoI+hoR51muYBOgOZBSVPpsfsVtdxygQnhSJiFlkIpPgEoC15MXkEDaKy+8U/KdLdqxha+5pXpwAwtbxz+0vQwZVskPX+sd2cHUY2Z+StfvEy3qXOIIFKSupFa4ByABU1HNv9nNsULnloSsSq8S86e6eD3UAOIaYTXTM0dDksMfbi/6YqF4gB6a7GQTKNNzH5F9HIAqKKF7vh/mNUJjHAFshosU13afMsDwjioyXCNM9VqOxIvxo9QxR95ehyX6ckE+avMzPzWLV4j7gN9A3ziFBw2C3ASs9rQSA8EUdhMpM94QKCkGyNTVN7Mhxwr5h7w3vBz+3A9WLiUIoCm1KvkSYs7+dICxhXX8lfVMNuWEGyxg/XoGFbvOa77PppPxDtweDWXnyxBIUv54Y0HNigEfVuCIng+/Yzz4hoSBs9xwMa6bF1ZtUblgQDJPFgFf478buaoEDEsB3rua34xAG9lsEYh4rd4p7MZMaKiaAKMuU/v+Emi1XZmI/7BQoEfZfDR9+nY74/txb4QFuRVpod0LnBrDII/nbXmX4LgEFE8XHus3p9Sm4BsGloTdcL1768fM6sZFKhLaI7ZewS9xkw4rkRyuDCO3bVMLrxz/IWfnHVHiZM/ivpXqu99jxJTtNeWTeqNq/rEBwiJdhHvpKQGnAQlJ5INcqSyXvh/YLOZCX1+fZe40QcEhPRc/xh7dGrsk41N1fcfRN2tpEXBuwtEtFUPWk2LyU7UOUlsVNt1NhfxlYPpaGM+PfEai80pa2X6L8amnM2cfnkxvX12D1lEF+4k5l9qCnf5+ibnhYY3qrn56aIxCMrt/hgzwSRDdkImIAHbTdo7QLXhSIRAjEjPZnnOqFS7qg3sIPh+6v9r4BENJu1H6BQP1P9nDQm83PnmX2Isx5pa327+0vsFAGwHaazildVEI3xGoFNig6y9q1EOxEkTmZRt5dgeDv8Ze6jW/3WUSHESB9PLXLMEuqmLMV358ikA5OqjAAbitOFAL/1HioIgUSIFb6B7vvvAW52sB4QI9wa+Ng4tB/0sdUgfrnmGys6oT19cFz83J2m3Q34xvmmJyRLCh+QmDOLd3pCNIuze5ytt4poMfph4SlvXLfoZOw4eWadxl6K6l22OZlBDacFB+53I30APx7fW8wQBbc1uMwmPY0EXh+QcHtCrE1NKry4Vgz0ADNw1Ets/Q7XrDA5yVgGAsE//+UT7wk2/cS4DsxfsK7feSgbIc8/qBgvhFPQPnylQ9gA+zc7WuEKU8v+vE0Cz9SVABH/CZ+Zip7Yq8160m85YHItUFf8VCfWNcbEAuBxA4Kb3koyiomyiGA9vob29qNIfM9UTTQ50CW+foF2yTb+3qxQTY+5QtYIgexu1POFcQ0Oo3n8+CBFT7SG4VFeg0snPYpAW7fbt9DgPxOorsGHvAXVsjRfBBNJphveqfAABG0mnYt5T6vfxpzStH1yyb5KjeFoS/H7I68ikfhA0aP498E+05DbNGe6bZoPbQuU7h2QJQsJ7mJCeaP13N20J7JZzslsZGi54l3NctHMlWdF79XNojZ5lqL3klR5htaNBDI9/EhuTkq56pcv6xmA+dGQxUMxbiPdKW75gO59V6pXSRAKt7IVOGHFVIu2lxizQ78tlz1iMN0rnff288Z2sYVHadEQ9w4FYBPnZPhfuXgsROA8zcP01k0G45PQGSsFPRbkSYHDlzUUCjNZSWNyPJHFyT8Hu1J0pl9S9fc1rTyKjiepTTIsFx65h+B7x67mSKYMHY/mnlgzaIPxsY0hCDH8DSKo/fCeqH+RQ4nW+bcnE47IpnRbeySVTnFJICpCS+v/C0hSQGYftBL9ZdSjbgTeAOCBmjg5LEAucFy9dVD22IkT5NLbH7ty27eQ/umBa4pVLC3uP4UT5pyTYRul+1TAvoPOEufHIOsR+19wgxBf2AyZncUsAMM5Dy0iOg3dX8ZX/hx9TBo6JbbNnP64eWKfFpHyxyLJ5gTD6FNUQbWlfIHmEmv2Ymo5TEn5X8vBzmiUYGUMwFQsKfi2ZEBBJG1MHe3T6PFuD/dvntJAqO++jSLPPiQthD3QZu0Zp89D6YN13WPsnz72UxMDrwPCdqicwu4vCVEKbkZh8z4YquGwGCNI8TEKD4wyJwAVVQWP+5vilyKDV+jNogQdm+VcdXQf5QFi/uJloQnUWVWgK+7+nFK4sv+4gOaFcXLX3UwL9EMQC77PDk/PrCYgPtejI/k4tEL6x7pAjNYMO/EKhNrQpIkMn1t0I8C+YqgvltlzjgqDQkZxNDMWf2qvhTc5ItZ43y3m7vqx73RGIphLQd79LkSTfID7BVQy11AuAFVZBTMqMkvnW/BwwkZCWVRnOF0y1gnMw25iuxbxFQ7vY3k1nS6SyPJ95pTI6s8ZfmVxKaxFgt1+r/ODY5ZaVwiEu3heXTMHMkLG9PjUMwhCkiJS4LtKraRKeVyIG8IBpXxLWHtFElzPFRXPPOX1QMO1mIY2KreKKQBbUWyW0XNV4A0VqQ+5KU4UfV/BQhY3ncHKq3X2X8w6nRZuJr9/teR1jQ1G+ENzvXT2PLzba1J4xmryiv2UcdYsot8RlvOj+zuSjkbszerBcq0vHZvXQQH+wIdI2fjgFemPl5CPzxMktiDMwuBFqLWG4+A+8sr61J3ezgLSgwA+cUwZ8TUo77z7QIHY+kV35LleOTgttdMOWl5u9qERz5nVTru0AoMhj7Q+xTK9jfgfQpVnAmKQ1eoYu1SR89WMssdyeH+0dsljlIxfdIYKVyxrVMO6ixLwUnhayhXFh4QwZzkWTyd0aWCrWl5O0inR3rkeacopzCIiKCLFNt0tv1bTWxWWHKvV5q94CXFw76VxevTMxDf4WqU7tG3plkiDBh/J6JffaoW7mC0HXeRKdiKwA50/fIB/yfh0YuWQw8HZ+fAIt5bN3Lp5MeWqk842dey7A4FyCVWBv/hsUK6HCvRctp4inugSCewTgq0rKKr3f9N1vKhK3DeAyxqB5TkFt+pdtrmYtaQnZPyfHDr+xnOxFttqElW5ZQgpLJX3ESF40NB+kAdtSKcM7VRbd584kZORDfRa5a1ODOfNQTP8rOuRn3j/O6nHmoZS+Zy/A2bhCReb5CqrmWRUEWDXeIY828kc59GcTSS7K1cE7AZ9lrgNeBVtlBrAyZxWvz4ilsXNQ6M+Oq4bkhj8GTnmLWY09nt2Tm8XixPItC1gd1SmPd6Opt5LJ0XnXOrg5SAs68+s681YKAwLArk2gi3RNO5mBnWZh8R3KI5xpGEYOgIZ1vaJ+sDWRljYXYZ77b0e/e3ghUl+e32xLyoNS/XiEqtMOkWdE1hs2bpy69S5tlLfmiYz3MpVCK0CqRCGyxuJpBGkPbfwlHOLMOhNkvsGtsfz81LmmI5EJ8PB/BEpmHGK4B2NE1JP0fEMqeg7nI4cP91UO/7yc4CvZaAMnvtWiRvbShRQeu86CLLq1U3tX6ZjmUW8EH4bQOYEdBe+pqm2ToK2q9j7P00xJJLED3cRGxuB14gKfSsv6Z+7CTP3sgUBHsB8QDPeh4BH+rUAaNq1+sIHAlXY03KdDjqjhgZ8pqwMb5W2gqvB2R1K+SlpLGHiN6e5/0ngGkaDL9sqGqKOcn3tRw6hVcLoNeD1Zkjmj8BtYuQnoM3Mr3Zi9epN5ABuGtoYN+odJI+tVN9gsxDXRGfnVZWdt9Y3bp/QNuxtPPmj/ZyA80MkDH2Gc8Ueg00xdsVLDI9xJJkEBjm7zh9rFLe2HPOy3xY0BpNltU2M72vnxyD5dqDFat0UMaLURSiH+KjUCF/DdBLR+pV+6Q6tV/VQ+5tcVwO8ZV1xMWnMhBm6qbJqQIIXJWDCTwaJYlH0ZSiNjno9QU5CzAtidANN51HsaATLKkS8+3FRtMe4whEHBw/YJPSrQ5sHBo+am9TGZdTO5HLkOr6nblBxpa5V7HKPJSe2IewSbawTfeuVVMDXxFjl2K38G2UHVVAPwyq+aTkA+cvAD2g3j/I/uDz8ch+WpONZAHS1SNPuEc4XasEvXndkskcWaXtnjMpAWgR8TGX1bpUCEAxBq1QmTIT7lzlHBUCYCMmSQTUlGLOmf0C+jO3BB6SLKmrc0aZIW0WoNTAIl3HpBwnOL7jj7medTXK1pGnRWn86gakxRxcz0Kjr6dr4y+WLllpeX+N1v8gFAgITtzA+qvWzZytkpbaNuQrRBqX4Pzx4WyPq0PATTAsPuepoqJASBkEKiQxA1/eot6HoHEMcj8wl9OG/CjhKgAPZ++9Vxv/D3KVA+q/xHJS+172xAfTFSnFHjTH5J7xaR1qI0XPBCfHSBW6Ne/ffgFixs8IYwyGPDCewqrQiJMAmBSosRftukkBHACs+9s9cX3LD8MPfHwDwN/dpL5f38A/OMA0nf4UqBgQ2wcwBbIjnh91NBhFopNbRllNwoVYvJU6SwKD4atggArsK+W8AbnMN1mJv9BQo/7MsYYoznaXWcRK0N9QwPUG/U3e6Sk+c+8VCaS57ek/EVSNfRQEka5DvUCFTTr5AXBaw3yWt3SECR9DEOECs7O+5Nnw/CPHLzkOaa+lahIutzj1fUi9G19HIAeGerBfgyT0T7vG26bBXAVs8dRhFvSGKNI6Fr/Q6bToFIhprqnPZ4UuZCBDndlNUBqW/QsTKRp+k1PYnTU4Rr6WAA0qVWyLVPXt/C37QZocP2v++17C0blU4+y78TvAKWmirDRO7AcDjoc4M6sgLXM4096AITqb375mwt2jJD93dHempLO6lm2U8KizDXsHs4IK4p5nD3sieqqWjJMFxbGdxckOjapYcKxDhHGU9XF3gS/prV5XVj9LYbIqeajhJSlwuxk1dUh9bO/vf/dzjEiQQl8DeEA8SpSLcOR8gBx++oI/x42kM1kUZ8o2yryeqe4OpXR1+DQfbSesytgQax/bpFy8dUTQ+yiBVQrHcV85WtTWx3dZJmmYNpFqeXikYPjRBdBspKWPAoqBJ9e26dicMBuByWEQPr5qCaHNRIYS9rngaZ/pQU+yQg99zz7/6Qy+Fz2oPcSjRBUFSLwruHzrKsLaSfvGg6s3kr3LGJNU+gTz5Q9hZVmjkzgO6dhcJWPlANYhMm+xzyXvXoo=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring02连接池&amp;注解开发&amp;集成Junit</title>
      <link href="/2020/01/16/spring/Spring02%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91&amp;%E9%9B%86%E6%88%90Junit/"/>
      <url>/2020/01/16/spring/Spring02%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91&amp;%E9%9B%86%E6%88%90Junit/</url>
      
        <content type="html"><![CDATA[<h1 id="配置数据库连接池"><a href="#配置数据库连接池" class="headerlink" title="配置数据库连接池"></a>配置数据库连接池</h1><h2 id="连接池相关知识点"><a href="#连接池相关知识点" class="headerlink" title="连接池相关知识点"></a>连接池相关知识点</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>减少频繁创建、频繁释放链接、提高效率</p><h3 id="常见的连接池"><a href="#常见的连接池" class="headerlink" title="常见的连接池"></a>常见的连接池</h3><p>DBCP，C3P0，Druid</p><h3 id="创建连接池"><a href="#创建连接池" class="headerlink" title="创建连接池"></a>创建连接池</h3><h4 id="导入spring、数据库和连接池依赖"><a href="#导入spring、数据库和连接池依赖" class="headerlink" title="导入spring、数据库和连接池依赖"></a>导入spring、数据库和连接池依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建C3p0连接池"><a href="#创建C3p0连接池" class="headerlink" title="创建C3p0连接池"></a>创建C3p0连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试手动创建 c3p0 数据源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考</p></blockquote><p>如何把ComboPooledDataSource对象的创建交给Spring</p><h4 id="创建Druid连接池"><a href="#创建Druid连接池" class="headerlink" title="创建Druid连接池"></a>创建Druid连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试手动创建 druid 数据源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    DruidPooledConnection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考</p></blockquote><p>如何把DruidDataSource对象的创建交给Spring</p><h2 id="Spring管理连接池步骤"><a href="#Spring管理连接池步骤" class="headerlink" title="Spring管理连接池步骤"></a>Spring管理连接池步骤</h2><h3 id="添加spring、数据库和连接池依赖"><a href="#添加spring、数据库和连接池依赖" class="headerlink" title="添加spring、数据库和连接池依赖"></a>添加spring、数据库和连接池依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加jdbc-properties"><a href="#添加jdbc-properties" class="headerlink" title="添加jdbc.properties"></a>添加jdbc.properties</h3><blockquote><p>注意：<strong>key的值必须要写前缀</strong>,不然可能解析不了</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="在spring配置中引入jdbc-properties"><a href="#在spring配置中引入jdbc-properties" class="headerlink" title="在spring配置中引入jdbc.properties"></a>在spring配置中引入jdbc.properties</h3><blockquote><p>注意：必须先引入context命名空间</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在spring的配置文件中引入jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在spring配置中添加连接池配置信息"><a href="#在spring配置中添加连接池配置信息" class="headerlink" title="在spring配置中添加连接池配置信息"></a>在spring配置中添加连接池配置信息</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在spring的配置文件中引入jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在spring的配置文件中添加连接池配置信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3p0Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        DataSource dataSource = (DataSource)context.getBean(<span class="string">"dataSource"</span>);</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="开启注解扫描"><a href="#开启注解扫描" class="headerlink" title="开启注解扫描"></a>开启注解扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h2><h3 id="bean相关注解"><a href="#bean相关注解" class="headerlink" title="bean相关注解"></a>bean相关注解</h3><blockquote><p>以下注解的功能用于标记指定的类的对象交给spring管理</p></blockquote><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao类上用于实例化Bean</td></tr></tbody></table><blockquote><p>使用方式1：bean的名字显示指定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDaoImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式2：bean的名字由框架默认设置,省略bean的名字，bean的名字默认是当前类的名字首字母小写，代码中这个bean的名字其实就是userDaoImpl</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入相关注解"><a href="#依赖注入相关注解" class="headerlink" title="依赖注入相关注解"></a>依赖注入相关注解</h3><blockquote><p>以下注解作用在属性上，完成对属性值的注入</p></blockquote><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Autowired</td><td>使用在成员变量上,会根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用，根据名称依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier,按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr></tbody></table><blockquote><p>注意1</p></blockquote><p>@Resource(name=”bean名”)在JDK1.9中使用后无法注入，不建议使用</p><blockquote><p>注意2</p></blockquote><p>Autowired根据类型匹配，换句话说就是一个接口如果有多个实现类就必须配合Qualifier一起使用了</p><img src="/" style="zoom:80%;" / class="lazyload" data-src="./Spring02连接池&注解开发&集成Junit/1.jpg"><blockquote><p>注意3</p></blockquote><p>Qualifier必须配合@Autowired一起使用，当某个接口的实现类有多个的时候配合该注解使用</p><h3 id="配置单例和多例注解"><a href="#配置单例和多例注解" class="headerlink" title="配置单例和多例注解"></a>配置单例和多例注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Scope</td><td>标注Bean的作用范围,该注解配合@Component,@Controller,@Service,@Repository使用</td></tr></tbody></table><h3 id="生命周期相关注解"><a href="#生命周期相关注解" class="headerlink" title="生命周期相关注解"></a>生命周期相关注解</h3><blockquote><p>注意：以下注解JDK1.9不能用</p></blockquote><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@PostConstruct</td><td>该注解标注在方法上，该方法会在Bean创建的时候执行</td></tr><tr><td>@PreDestroy</td><td>该注解标注在方法上，该方法会在Bean销毁的时候执行</td></tr></tbody></table><h3 id="替换applicationContext相关注解"><a href="#替换applicationContext相关注解" class="headerlink" title="替换applicationContext相关注解"></a>替换applicationContext相关注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Configuration</td><td>替换applicationContext.xml文件</td></tr><tr><td>@ComponentScan</td><td>替换包扫描<a href="context:component-scan">context:component-scan</a></td></tr><tr><td>@Bean</td><td>替换bean标签</td></tr><tr><td>@PropertySource</td><td>替换&lt;context:property-placeholder location=”classpath:jdbc.properties”&gt;</td></tr><tr><td>@Import</td><td>替换<import resource="xxx.xml"></import>标签</td></tr></tbody></table><h3 id="全注解开发步骤"><a href="#全注解开发步骤" class="headerlink" title="全注解开发步骤"></a>全注解开发步骤</h3><blockquote><p>1.编写专门操作数据库的相关配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)  <span class="comment">//替代&lt;bean name="dataSource"&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.编写替换applicationContext.xml的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package="com.itheima"/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.itheima"</span>)</span><br><span class="line"><span class="comment">//&lt;import resource=""/&gt;</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DataSourceConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringCofiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.编写测试方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");</span></span><br><span class="line">    ApplicationContext app = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringCofiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserService userService = app.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><p>1.@Bean注解必须给一个bean的名字</p><p>2.SpringCofiguration是主配置文件，引入了DataSourceConfiguration配置，所以在DataSourceConfiguration类上可以省略@Configuration注解，该注解在主配置文件配置一次就够了，当然每个配置文件都配置也没有任何问题</p><h3 id="注解方式和XML方式配置对比"><a href="#注解方式和XML方式配置对比" class="headerlink" title="注解方式和XML方式配置对比"></a>注解方式和XML方式配置对比</h3><p><img src="/" alt="" class="lazyload" data-src="./Spring02%E8%BF%9E%E6%8E%A5%E6%B1%A0&%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91&%E9%9B%86%E6%88%90Junit/1.png"></p><h1 id="集成junit"><a href="#集成junit" class="headerlink" title="集成junit"></a>集成junit</h1><h2 id="为什么要集成junit"><a href="#为什么要集成junit" class="headerlink" title="为什么要集成junit"></a>为什么要集成junit</h2><p>1.每次需要手动加载配置文件创建ApplicationContext对象</p><p>2.调用getBean方法获取bean</p><p>3.getBean方法返回的是Object对象，需要强转</p><h2 id="集成junit的好处"><a href="#集成junit的好处" class="headerlink" title="集成junit的好处"></a>集成junit的好处</h2><p>可以直接将我们要使用的bean注入到当前测试类</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><blockquote><p><strong>注意junit版本要大于等于4.12</strong>,否则会报如下错误</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="./Spring02%E8%BF%9E%E6%8E%A5%E6%B1%A0&%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91&%E9%9B%86%E6%88%90Junit/2.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="junit测试类上加注解"><a href="#junit测试类上加注解" class="headerlink" title="junit测试类上加注解"></a>junit测试类上加注解</h3><blockquote><p>注解功能</p><p>@RunWith是个运行器，SpringJUnit4ClassRunner表示运行在Spring的开发环境中，里面自带applicationContext,所以加上该注解后不需要手动创建applicationContext对象</p><p>@ContextConfiguration指定要读取的配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.cofig.SpringCofiguration;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在测试类中注入要使用的bean"><a href="#在测试类中注入要使用的bean" class="headerlink" title="在测试类中注入要使用的bean"></a>在测试类中注入要使用的bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.cofig.SpringCofiguration;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring01入门和配置信息</title>
      <link href="/2020/01/14/spring/Spring01%E5%85%A5%E9%97%A8%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/01/14/spring/Spring01%E5%85%A5%E9%97%A8%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring01入门"><a href="#Spring01入门" class="headerlink" title="Spring01入门"></a>Spring01入门</h1><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring是一个轻量级的全栈式框架</p><p>轻量级指的是配置方便、占用资源小</p><p>全栈式指的是针对controller(springmvc),service(spring),dao(jdbctemplate)有不同的解决方案</p><h2 id="Spring发展史"><a href="#Spring发展史" class="headerlink" title="Spring发展史"></a>Spring发展史</h2><p>作者：Rod Johnson(Spring之父)</p><p>当前最新版：2017年9月发布了Spring 5.0最新通用版。</p><h2 id="Spring的两大核心"><a href="#Spring的两大核心" class="headerlink" title="Spring的两大核心"></a>Spring的两大核心</h2><p>IOC：全称Inverse of Control,控制反转的意思，表示把对象的创建交给框架</p><p>AOP：全称Aspect Oriented Programming,面向切面编程的意思，是对动态代理的再次封装</p><h2 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h2><p>1.可以借助IOC降低程序之间的耦合</p><p>2.可以借助AOP来实现方法的动态增强</p><p>3.支持声明式事物</p><p>4.方便集成其他框架,比如struts,hibernate,mybatis等</p><h1 id="Spring开发简单原理"><a href="#Spring开发简单原理" class="headerlink" title="Spring开发简单原理"></a>Spring开发简单原理</h1><p><img src="/" alt="1" class="lazyload" data-src="./Spring01%E5%85%A5%E9%97%A8%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/1.png"></p><h1 id="Spring-开发步骤"><a href="#Spring-开发步骤" class="headerlink" title="Spring 开发步骤"></a>Spring 开发步骤</h1><h2 id="导入maven坐标"><a href="#导入maven坐标" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写UserDao接口和实现类"><a href="#编写UserDao接口和实现类" class="headerlink" title="编写UserDao接口和实现类"></a>编写UserDao接口和实现类</h2><p>编写UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写UserDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Spring配置文件"><a href="#创建Spring配置文件" class="headerlink" title="创建Spring配置文件"></a>创建Spring配置文件</h2><p>根据下图步骤创建配置文件，<strong>配置文件名字最好叫applicationContext.xml</strong></p><img src="/" alt="2" style="zoom:50%;" / class="lazyload" data-src="./Spring01入门和配置信息/2.png"><blockquote><p>配置文件内容</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在配置文件中配置bean标签-将对象的创建交给Spring容器"><a href="#在配置文件中配置bean标签-将对象的创建交给Spring容器" class="headerlink" title="在配置文件中配置bean标签,将对象的创建交给Spring容器"></a>在配置文件中配置bean标签,将对象的创建交给Spring容器</h2><p>在applicationContext.xml中添加</p><p><bean id="userDao" class="cn.itcast.dao.impl.UserDaoImpl"></bean></p><p>该标签的作用表示创建一个UserDaoImpl对象，对象名叫userDao</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用Spring的API从容器中获取Bean实例"><a href="#使用Spring的API从容器中获取Bean实例" class="headerlink" title="使用Spring的API从容器中获取Bean实例"></a>使用Spring的API从容器中获取Bean实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserDao userDao = (UserDao)context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring配置文件详解"><a href="#Spring配置文件详解" class="headerlink" title="Spring配置文件详解"></a>Spring配置文件详解</h1><h2 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用于配置对象交由Spring 来创建。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。所以建议所有类提供无参构造<br>2.id值不能重复</p><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>Bean实例在Spring容器中的唯一标识</td></tr><tr><td>class</td><td>Bean的全类名</td></tr><tr><td>scope</td><td>singleton: 单例。表示每次调用getBean(“”)方法获取到的都是同一个对象。<br />prototype:多例。表示每次调用getBean(“”)方法获取到的都是一个新的对象，每次获取到的都不一样</td></tr></tbody></table><h3 id="生命周期属性"><a href="#生命周期属性" class="headerlink" title="生命周期属性"></a>生命周期属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>init-method</td><td>创建bean的时候执行该属性指定的方法名<img src="/" style="zoom:40%;" / class="lazyload" data-src="./Spring01入门和配置信息/3.png"></td></tr><tr><td>destroy-method</td><td>销毁bean的时候执行该属性指定的方法名<img src="/" style="zoom:40%;" / class="lazyload" data-src="./Spring01入门和配置信息/4.png"></td></tr></tbody></table><blockquote><p>在java代码中添加initMethod和destroyMethod</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象初始化中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象被干掉了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao save method running..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在配置信息中init-method,destroy-method</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.dao.impl.UserDaoImpl"</span> <span class="attr">init-method</span>=<span class="string">"initMethod"</span> <span class="attr">destroy-method</span>=<span class="string">"destroyMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao)context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src="/" alt="29" class="lazyload" data-src="./Spring01%E5%85%A5%E9%97%A8%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/29.jpg"></p><h3 id="创建相关属性"><a href="#创建相关属性" class="headerlink" title="创建相关属性"></a>创建相关属性</h3><table><thead><tr><th>创建方式</th><th>描述</th></tr></thead><tbody><tr><td>无参构造方法实例化</td><td><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/5.png"><br />总结:相当于 UserDao userDao = new UserDaoImpl();</td></tr><tr><td>方工厂静态方法实例化</td><td>第一步:创建静态工厂<br /><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/6.png"><br />第二步：配置class属性指定工厂类，factory-method指定工厂方法<br /><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/7.png"><br />总结：相当于UserDao userDao = StaticFactory.getUserDao();</td></tr><tr><td>工厂实例方法实例化</td><td>第一步：创建工厂类<br /><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/8.png"><br />第二步：先将工厂类通过bean对象配置到XML中<br /><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/9.png"><br />第三步：配置userDao，通过factory-method指定具体工厂，通过factory-method指定工厂的具体方法<br /><img src="/" style="zoom:70%;" / class="lazyload" data-src="./Spring01入门和配置信息/10.png"><br />总结：相当于UserDao userDao = new DynamicFactory().getUserDao();</td></tr></tbody></table><h3 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入(DI)"></a>依赖注入(DI)</h3><p>概念:通过框架给成员变量赋值，有2种方式，set方法和构造方法</p><h4 id="通过set方法进行"><a href="#通过set方法进行" class="headerlink" title="通过set方法进行"></a>通过set方法进行</h4><p>解释：会调用userDao属性对应的setUserDao方法将id=”userDao”的bean注入给userDao属性</p><blockquote><p>第一种 通过property标签</p></blockquote><img src="/" style="zoom:80%;" / class="lazyload" data-src="./Spring01入门和配置信息/11.png"><blockquote><p>第二种 通过p命名空间</p></blockquote><img src="/" style="zoom:80%;" / class="lazyload" data-src="./Spring01入门和配置信息/12.png"><h4 id="通过构造方法注入"><a href="#通过构造方法注入" class="headerlink" title="通过构造方法注入"></a>通过构造方法注入</h4><p>解释：会调用UserServiceImpl类的的UserServiceImpl(UserDao userDao)方法将id=”userDao”的bean注入给userDao属性</p><img src="/" style="zoom:80%;" / class="lazyload" data-src="./Spring01入门和配置信息/14.png"><img src="/" style="zoom:80%;" / class="lazyload" data-src="./Spring01入门和配置信息/13.png"><h4 id="普通数据类型注入"><a href="#普通数据类型注入" class="headerlink" title="普通数据类型注入"></a>普通数据类型注入</h4><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过spring的依赖注入给name和age赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.domain.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"孙凯"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a>集合数据类型</h4><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;<span class="comment">//爱好</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; kids; <span class="comment">//孩子</span></span><br><span class="line">    <span class="keyword">private</span> Properties wife;<span class="comment">//妻子</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; grandson;<span class="comment">//孙子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过spring的依赖注入给集合属性赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"孙凯"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抢红包<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>收红包<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>放炮<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>洗脚<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"kids"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"大闺女"</span> <span class="attr">value</span>=<span class="string">"孙尚香"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"二闺女"</span> <span class="attr">value</span>=<span class="string">"孙小香"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"三儿子"</span> <span class="attr">value</span>=<span class="string">"孙悟空"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"少奶奶"</span>&gt;</span>王晶<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"二姨太"</span>&gt;</span>张家晨<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"三姨太"</span>&gt;</span>张子祎<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"grandson"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>孙富贵<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>孙可爱<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>孙漂亮<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>孙美丽<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Object user = context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User(name&#x3D;孙凯, age&#x3D;22, hobbies&#x3D;[抢红包, 收红包, 放炮, 洗脚], kids&#x3D;&#123;大闺女&#x3D;孙尚香, 二闺女&#x3D;孙小香, 三儿子&#x3D;孙悟空&#125;, wife&#x3D;&#123;三姨太&#x3D;张子祎, 少奶奶&#x3D;王晶, 二姨太&#x3D;张家晨&#125;, grandson&#x3D;[孙富贵, 孙可爱, 孙漂亮, 孙美丽])</span><br></pre></td></tr></table></figure><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>property容易混淆的2个属性名 value ,ref 都是给属性设置值的，value设置的是普通类型的值，ref是把当前容器中的其他bean赋值给属性</p><h2 id="import标签"><a href="#import标签" class="headerlink" title="import标签"></a>import标签</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>引入其他xml配置文件</p><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>该标签和bean是兄弟关系，不是嵌套关系</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-user.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"applicationContext-product.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h1><h2 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h2><blockquote><p>ClassPathXmlApplicationContext</p></blockquote><p>从类的根路径下加载配置文件，推荐使用</p><p>类的跟路径片面理解指的是src或者resources目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从src目录下加载配置文件</span></span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>FileSystemXmlApplicationContext</p></blockquote><p>他是从磁盘路径加载配置文件，配置文件可以放在磁盘的任意位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从指定目录下加载配置文件</span></span><br><span class="line">FileSystemXmlApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"D:\\code\\day15-1\\s\\src\\main\\resources\\applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>AnnotationConfigApplicationContext</p></blockquote><p>当使用注解方式配置容器对象时，需要使用此类创建Spring容器。它用来读取注解(后面介绍)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="getBean-方法的使用"><a href="#getBean-方法的使用" class="headerlink" title="getBean()方法的使用"></a>getBean()方法的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//方式1：通过beanid查找对应的bean对象</span></span><br><span class="line">        UserDao userDao1 = (UserDao)context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        <span class="comment">//方式2：通过bean的类型查找相应的bean对象,此种方式的缺陷：UserDao接口的实现类只能有一个，如果有多个则不知道获取哪个，程序会报错</span></span><br><span class="line">        UserDao userDao2 = context.getBean(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基本命令</title>
      <link href="/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos6-32位下载地址"><a href="#Centos6-32位下载地址" class="headerlink" title="Centos6 32位下载地址"></a>Centos6 32位下载地址</h1><p>链接：<a href="https://pan.baidu.com/s/1eOKI238H-9IiGBNteAh0QA" target="_blank" rel="noopener">https://pan.baidu.com/s/1eOKI238H-9IiGBNteAh0QA</a><br>提取码：suq2<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><h1 id="linux目录"><a href="#linux目录" class="headerlink" title="linux目录"></a>linux目录</h1><p><img src="/" alt="1" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/1.png"></p><h1 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> app</span></span><br></pre></td></tr></table></figure><p>切换到app目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><p>切换到上一层目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /</span></span><br></pre></td></tr></table></figure><p>切换到系统根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br></pre></td></tr></table></figure><p>切换到用户主目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> -</span></span><br></pre></td></tr></table></figure><p>切换到上一个所在目录</p><h1 id="列出目录下的文件和文件夹"><a href="#列出目录下的文件和文件夹" class="headerlink" title="列出目录下的文件和文件夹"></a>列出目录下的文件和文件夹</h1><p>ls(list)是一个非常有用的命令，用来显示当前目录下的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="2" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/2.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -a</span></span><br></pre></td></tr></table></figure><p>显示所有文件或目录(包含隐藏的文件),在linux中以 . 开头的文件都是隐藏的文件</p><p><img src="/" alt="3" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/3.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -l </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br></pre></td></tr></table></figure><p>显示文件详情，ll是缩写</p><p><img src="/" alt="4" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/4.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll -h</span></span><br></pre></td></tr></table></figure><p>友好显示文件大小</p><p><img src="/" alt="5" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/5.jpg"></p><h1 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir app</span></span><br></pre></td></tr></table></figure><p>在当前目录下创建app目录,只能创建单级目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p app2/<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>级联创建aap2以及test目</p><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch a.txt</span></span><br></pre></td></tr></table></figure><p>创建一个空文件</p><h1 id="删除文件和文件夹"><a href="#删除文件和文件夹" class="headerlink" title="删除文件和文件夹"></a>删除文件和文件夹</h1><h2 id="删除空文件夹"><a href="#删除空文件夹" class="headerlink" title="删除空文件夹"></a>删除空文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir app</span><br></pre></td></tr></table></figure><p>删除app目录,前提app目录必须为空，该目录下不能有文件</p><h2 id="删除非空文件夹"><a href="#删除非空文件夹" class="headerlink" title="删除非空文件夹"></a>删除非空文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf a</span></span><br></pre></td></tr></table></figure><p>不询问递归删除 a目录以及该目录下的所有内容</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf a.txt</span></span><br></pre></td></tr></table></figure><p>不询问直接删除a.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf *</span></span><br></pre></td></tr></table></figure><p>删除当前目录下的所有的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /*</span></span><br></pre></td></tr></table></figure><p>/表示根目录，表示删除根目录下的所有的文件，别用。</p><h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>用于显示文件的内容。</p><p>格式：cat[参数]&lt;文件名&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat yum.conf</span></span><br></pre></td></tr></table></figure><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。</p><p>回车显示下一行内容。</p><p>按 q 键退出查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> more yum.conf</span></span><br></pre></td></tr></table></figure><p>空格显示下一页数据 回车显示下一行的数据</p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>用法和more类似，不同的是less可以通过PgUp、PgDn键来控制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> less yum.conf</span></span><br></pre></td></tr></table></figure><p> PgUp 和 PgDn 进行上下翻页</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。</p><p>用法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tail -10 /etc/passwd</span></span><br></pre></td></tr></table></figure><p>查看后10行数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.log</span><br></pre></td></tr></table></figure><p>动态查看日志,ctrl+c 结束查看</p><h1 id="复制和移动和重命名"><a href="#复制和移动和重命名" class="headerlink" title="复制和移动和重命名"></a>复制和移动和重命名</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp a.txt b.txt</span></span><br></pre></td></tr></table></figure><p>将a.txt复制为b.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp a.txt ../</span></span><br></pre></td></tr></table></figure><p>将a.txt文件复制到上一层目录中</p><h2 id="移动或重命名"><a href="#移动或重命名" class="headerlink" title="移动或重命名"></a>移动或重命名</h2><p>mv 移动或者重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv a.txt ../</span></span><br></pre></td></tr></table></figure><p>将a.txt文件移动到上一层目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv a.txt b.txt</span></span><br></pre></td></tr></table></figure><p>将a.txt文件重命名为b.txt</p><h1 id="查看当前所处目录"><a href="#查看当前所处目录" class="headerlink" title="查看当前所处目录"></a>查看当前所处目录</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure><h1 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://nginx.org/download/nginx-1.9.12.tar.gz</span></span><br></pre></td></tr></table></figure><p>下载nginx-1.9.12.tar.gz到当前目录</p><h1 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h1><p>tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。</p><p>常用参数：</p><p>-c：创建一个新tar文件</p><p>-v：显示运行过程的信息</p><p>-f：指定文件名</p><p>-z：调用gzip压缩命令进行压缩</p><p>-t：查看压缩文件的内容</p><p>-x：解开tar文件</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar –cvf xxx.tar ./*</span></span><br></pre></td></tr></table></figure><h2 id="打包并压缩"><a href="#打包并压缩" class="headerlink" title="打包并压缩"></a>打包并压缩</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar –zcvf xxx.tar.gz ./*</span></span><br></pre></td></tr></table></figure><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p>xvf可以解压.tar和gz文件，zxvf只能解压gz文件，-C表示指定解压位置</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar –xvf xxx.tar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf xxx.tar.gz -C /usr/aaa</span></span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="根据文件内容查询"><a href="#根据文件内容查询" class="headerlink" title="根据文件内容查询"></a>根据文件内容查询</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep lang anaconda-ks.cfg</span></span><br></pre></td></tr></table></figure><p>在文件中查找lang</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep lang anaconda-ks.cfg –color</span></span><br></pre></td></tr></table></figure><p>高亮显示查询结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> $ grep lang anaconda-ks.cfg –color -A1 -B1</span></span><br></pre></td></tr></table></figure><p>高亮显示查询结果,并且显示上一行和下一个</p><h2 id="根据文件名查询"><a href="#根据文件名查询" class="headerlink" title="根据文件名查询"></a>根据文件名查询</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find 路径 -name 文件名</span></span><br></pre></td></tr></table></figure><p>文件名支持通配符,比如 *.log</p><h1 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h1><p>1.打开文件, vi 文件名</p><p>2.启用编辑，按i键</p><p>3.保存退出 esc-&gt;:wq</p><p>4.不保存退出 esc-&gt;:q!</p><h1 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h1><p>&gt; 重定向输出，覆盖原有内容；</p><p>&gt;&gt; 重定向输出，又追加功能；</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd &gt; a.txt</span></span><br></pre></td></tr></table></figure><p>将输出定向到a.txt中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd &gt;&gt; a.txt</span></span><br></pre></td></tr></table></figure><p>输出并且追加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/src/jdk/jdk1.7.0_71/bin:$PATH'</span> &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><p>把字符串”export PATH=/usr/local/src/jdk/jdk1.7.0_71/bin:$PATH” 追加到/etc/profile文件中,然后执行source /etc/profile让环境变量生效</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>管道 | 实际上就是过滤器</p><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。</p><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls --<span class="built_in">help</span> | more</span></span><br></pre></td></tr></table></figure><p>分页查询帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps –ef | grep java</span></span><br></pre></td></tr></table></figure><p>查询名称中包含java的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ifconfig | more</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat index.html | more</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps –ef | grep aio</span></span><br></pre></td></tr></table></figure><h1 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><p>date 显示或设置系统时间</p><p>date 显示当前系统时间</p><p>date -s “2014-01-01 10:10:10“ 设置系统时间</p><p>df 显示磁盘信息</p><p>df –h 友好显示大小</p><p>free 显示内存状态</p><p>free –m 以mb单位显示内存组昂头</p><p>top 显示，管理执行中的程序</p><p>clear 清屏幕</p><p>ps 正在运行的某个进程的状态</p><p>ps –ef 查看所有进程</p><p>ps –ef | grep ssh 查找某一进程</p><p>kill 杀掉某一进程</p><p>kill 2868 杀掉2868编号的进程</p><p>kill -9 2868强制杀死进程</p><p>kill -hup pid 友好的重启进程</p><p>du 显示目录或文件的大小。</p><p>du –h 显示当前目录的大小</p><p>who 显示目前登入系统的用户信息。</p><p>hostname 查看当前主机名</p><p>修改：vi /etc/sysconfig/network</p><p>uname 显示系统信息。</p><p>uname -a 显示本机详细信息。</p><p>依次为：内核名称(类别)，主机名，内核版本号，内核版本，内核编译日期，硬件名，处理器类型，硬件平台类型，操作系统名称</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>ifconfig 显示或设置网络设备。</p><p>ifconfig 显示网络设备</p><p>ifconfig eth0 up 启用eth0网卡</p><p>ifconfig eth0 down停用eth0网卡</p><p>ping  探测网络是否通畅。</p><p>ping 192.168.0.1</p><p>netstat 查看网络端口。</p><p>netstat -an | grep 3306 查询3306端口占用情况</p><h1 id="Centos6-软件安装环境初始化"><a href="#Centos6-软件安装环境初始化" class="headerlink" title="Centos6 软件安装环境初始化"></a>Centos6 软件安装环境初始化</h1><blockquote><p>我们在安装软件的时候最好先将gcc,pcre,zlib,OpenSSL升级到最新版。否则安装程序时会出错。</p></blockquote><h2 id="安装GCC环境"><a href="#安装GCC环境" class="headerlink" title="安装GCC环境"></a>安装GCC环境</h2><blockquote><p> GCC编程语言译器，有些程序是手动编译安装 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  yum install gcc-c++</span></span><br></pre></td></tr></table></figure><h2 id="安装PCRE和pcre-devel"><a href="#安装PCRE和pcre-devel" class="headerlink" title="安装PCRE和pcre-devel"></a>安装PCRE和pcre-devel</h2><blockquote><p>PCRE(Perl Compatible Regular Expressions)是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库。pcre-devel 是使用 pcre 开发的一个二次开发库。nginx 也需要此库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y pcre pcre-devel</span></span><br></pre></td></tr></table></figure><h2 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h2><blockquote><p>zlib 库提供了很多种压缩和解压缩的方式，nginx 使用 zlib 对 http 包的内容进行 gzip，所以需要在 linux 上安装 zlib 库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y zlib zlib-devel</span></span><br></pre></td></tr></table></figure><h2 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h2><blockquote><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 linux安装 openssl 库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y openssl openssl-devel</span></span><br></pre></td></tr></table></figure><h1 id="Centos6-安装jdk"><a href="#Centos6-安装jdk" class="headerlink" title="Centos6 安装jdk"></a>Centos6 安装jdk</h1><blockquote><p>jdk7 32位下载地址</p></blockquote><p>链接：<a href="https://pan.baidu.com/s/1wvBHM06FOe9-LG94tfaJUQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1wvBHM06FOe9-LG94tfaJUQ</a><br>提取码：qtej</p><blockquote><p>jdk8 32位下载地址</p></blockquote><p>链接：<a href="https://pan.baidu.com/s/19EeHM89zsdCsDUskbv0dyA" target="_blank" rel="noopener">https://pan.baidu.com/s/19EeHM89zsdCsDUskbv0dyA</a><br>提取码：gjrl</p><h2 id="0-安装必看"><a href="#0-安装必看" class="headerlink" title="0.安装必看"></a>0.安装必看</h2><blockquote><p>安装必看 <a href="https://haoyongliang.gitee.io/2020/01/12/linux/linux基本命令/#Centos6-软件环境初始化">https://haoyongliang.gitee.io/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#Centos6-%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96</a> </p></blockquote><h2 id="1-查看系统是否有自带jdk"><a href="#1-查看系统是否有自带jdk" class="headerlink" title="1.查看系统是否有自带jdk"></a>1.查看系统是否有自带jdk</h2><blockquote><p>使用以下命令查询已经安装的jdk的名字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep java</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="6" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/6.jpg"></p><p>查询到3条记录，说明系统自带jdk</p><h2 id="2-卸载自带jdk"><a href="#2-卸载自带jdk" class="headerlink" title="2.卸载自带jdk"></a>2.卸载自带jdk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps java-1.6.0-openjdk-1.6.0.35-1.13.7.1.el6_6.i686</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps tzdata-java-2015e-1.el6.noarch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps java-1.7.0-openjdk-1.7.0.79-2.5.5.4.el6.i686</span></span><br></pre></td></tr></table></figure><h2 id="3-上传安装包"><a href="#3-上传安装包" class="headerlink" title="3.上传安装包"></a>3.上传安装包</h2><blockquote><p>在/usr/local目录下新建java目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br></pre></td></tr></table></figure><blockquote><p>将本地32位的JDK[jdk-7u71-linux-i586.tar.gz]上传到java目录下</p></blockquote><h2 id="4-解压"><a href="#4-解压" class="headerlink" title="4.解压"></a>4.解压</h2><blockquote><p>先进入java目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java</span></span><br></pre></td></tr></table></figure><blockquote><p>解压缩</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf jdk-7u71-linux-i586.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>在java目录会多出来一个jdk1.7.0_71目录,这个就是待会要设置的JAVA_HOME目录</p></blockquote><p><img src="/" alt="7" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/7.jpg"></p><h2 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h2><blockquote><p>打开环境变量配置文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/profile</span></span><br></pre></td></tr></table></figure><blockquote><p>在末尾添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#set java environment</span><br><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_71</span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><blockquote><p>执行source命令让环境变量生效</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><h2 id="6-检查是否配置成功"><a href="#6-检查是否配置成功" class="headerlink" title="6.检查是否配置成功"></a>6.检查是否配置成功</h2><blockquote><p>查看jdk版本，查看是否配置成功</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure><h1 id="Centos6-安装mysql"><a href="#Centos6-安装mysql" class="headerlink" title="Centos6 安装mysql"></a>Centos6 安装mysql</h1><h2 id="0-安装必看-1"><a href="#0-安装必看-1" class="headerlink" title="0.安装必看"></a>0.安装必看</h2><blockquote><p>安装必看 <a href="https://haoyongliang.gitee.io/2020/01/12/linux/linux基本命令/#Centos6-软件环境初始化">https://haoyongliang.gitee.io/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#Centos6-%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96</a> </p></blockquote><h2 id="1-检测是否已经安装了mysql"><a href="#1-检测是否已经安装了mysql" class="headerlink" title="1.检测是否已经安装了mysql"></a>1.检测是否已经安装了mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep mysql</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="8" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/8.jpg"></p><h2 id="2-卸载系统自带的mysql"><a href="#2-卸载系统自带的mysql" class="headerlink" title="2.卸载系统自带的mysql"></a>2.卸载系统自带的mysql</h2><p>如果第二步检测到则卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps  mysql-libs-5.1.73-5.el6_6.i686</span></span><br></pre></td></tr></table></figure><h2 id="3-上传安装包-1"><a href="#3-上传安装包-1" class="headerlink" title="3.上传安装包"></a>3.上传安装包</h2><blockquote><p>在/usr/local目录下新建mysql目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/mysql</span><br></pre></td></tr></table></figure><blockquote><p>将本地32位的MYSQL[MySQL-5.6.22-1.el6.i686.rpm-bundle.tar]上传到java目录下</p></blockquote><h2 id="4-解压-1"><a href="#4-解压-1" class="headerlink" title="4.解压"></a>4.解压</h2><blockquote><p>进入MySQL目录查看安装包名字并解压</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="9" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/9.jpg"></p><blockquote><p>解压缩</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="10" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/10.jpg"></p><h2 id="5-安装服务端程序"><a href="#5-安装服务端程序" class="headerlink" title="5.安装服务端程序"></a>5.安装服务端程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="11" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/11.jpg"></p><h2 id="6-安装客户端程序"><a href="#6-安装客户端程序" class="headerlink" title="6.安装客户端程序"></a>6.安装客户端程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="12" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/12.jpg"></p><h2 id="7-启动mysql服务"><a href="#7-启动mysql服务" class="headerlink" title="7.启动mysql服务"></a>7.启动mysql服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service mysql start</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="13" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/13.jpg"></p><h2 id="8-查看MySQL密码"><a href="#8-查看MySQL密码" class="headerlink" title="8. 查看MySQL密码"></a>8. 查看MySQL密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /root/.mysql_secret</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="14" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/14.jpg"></p><h2 id="9-使用root账号登录"><a href="#9-使用root账号登录" class="headerlink" title="9.使用root账号登录"></a>9.使用root账号登录</h2><p>注意：-u后可以有空格, -p后不能加空格，<strong>以下命令必须手敲</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p密码</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="15" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/15.jpg"></p><h2 id="10-修改密码"><a href="#10-修改密码" class="headerlink" title="10.修改密码"></a>10.修改密码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD = PASSWORD('root');</span><br></pre></td></tr></table></figure><h2 id="11-设置开机启动MySQL"><a href="#11-设置开机启动MySQL" class="headerlink" title="11.设置开机启动MySQL"></a>11.设置开机启动MySQL</h2><blockquote><p>加入到系统服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chkconfig --add mysql</span></span><br></pre></td></tr></table></figure><blockquote><p>设置开机自动启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chkconfig mysql on</span></span><br></pre></td></tr></table></figure><h2 id="12-开启远程访问"><a href="#12-开启远程访问" class="headerlink" title="12.开启远程访问"></a>12.开启远程访问</h2><blockquote><p>登录，注意：-u后可以有空格, -p后不能加空格，<strong>以下登录命令必须手敲</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root –proot</span></span><br></pre></td></tr></table></figure><blockquote><p>设置远程访问（使用root密码）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to 'root' @'%' identified by 'root';</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="13-防火墙设置允许3306端口"><a href="#13-防火墙设置允许3306端口" class="headerlink" title="13.防火墙设置允许3306端口"></a>13.防火墙设置允许3306端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/rc.d/init.d/iptables save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/iptables status</span></span><br></pre></td></tr></table></figure><h2 id="14-测试"><a href="#14-测试" class="headerlink" title="14.测试"></a>14.测试</h2><p>使用sqlyog连接mysql</p><p><img src="/" alt="16" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/16.jpg"></p><h1 id="Centos6-安装tomcat"><a href="#Centos6-安装tomcat" class="headerlink" title="Centos6 安装tomcat"></a>Centos6 安装tomcat</h1><blockquote><p>链接：<a href="https://pan.baidu.com/s/1rbwSzQFY6j9CkvU_JniUkA" target="_blank" rel="noopener">https://pan.baidu.com/s/1rbwSzQFY6j9CkvU_JniUkA</a><br>提取码：yyv8</p></blockquote><h2 id="0-安装必看-2"><a href="#0-安装必看-2" class="headerlink" title="0.安装必看"></a>0.安装必看</h2><blockquote><p>安装必看  <a href="https://haoyongliang.gitee.io/2020/01/12/linux/linux基本命令/#Centos6-软件环境初始化">https://haoyongliang.gitee.io/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#Centos6-%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96</a> </p></blockquote><h2 id="1-上传"><a href="#1-上传" class="headerlink" title="1.上传"></a>1.上传</h2><blockquote><p>在/usr/local目录下新建tomcat目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/tomcat</span></span><br></pre></td></tr></table></figure><p>将apache-tomcat-7.0.57.tar.gz 上传到该目录</p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><blockquote><p>进入/usr/local/tomcat 目录并解压apache-tomcat-7.0.57.tar.gz 文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf apache-tomcat-7.0.57.tar.gz</span></span><br></pre></td></tr></table></figure><p>解压后会在/usr/local/tomcat目录下创建apache-tomcat-7.0.57文件夹</p><h2 id="3-防火墙设置允许8080端口"><a href="#3-防火墙设置允许8080端口" class="headerlink" title="3.防火墙设置允许8080端口"></a>3.防火墙设置允许8080端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure><h2 id="4-启动tomcat"><a href="#4-启动tomcat" class="headerlink" title="4.启动tomcat"></a>4.启动tomcat</h2><blockquote><p>进入到tomcat的安装目录下的bin目录：/usr/local/tomcat/apache-tomcat-7.0.57/bin</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./startup.sh</span></span><br></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>访问 http://虚拟机地址:8080</p><p><img src="/" alt="17" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/17.jpg"></p><h1 id="Centos6-安装redis"><a href="#Centos6-安装redis" class="headerlink" title="Centos6 安装redis"></a>Centos6 安装redis</h1><h2 id="0-安装必看-3"><a href="#0-安装必看-3" class="headerlink" title="0.安装必看"></a>0.安装必看</h2><blockquote><p>安装必看 <a href="https://haoyongliang.gitee.io/2020/01/12/linux/linux基本命令/#Centos6-软件环境初始化">https://haoyongliang.gitee.io/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#Centos6-%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96</a> </p></blockquote><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><blockquote><p>在/usr/local目录下创建redis文件夹,并进入该文件夹</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /usr/<span class="built_in">local</span>/redis</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span></span><br></pre></td></tr></table></figure><blockquote><p>方式1：下载redis到/usr/local/redis目录,这是32位版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>方式2：使用百度云下载(32位版本)，然后上传到/usr/local/redis目录</p></blockquote><p>链接：<a href="https://pan.baidu.com/s/1w1XAYG8icvKVHsRr9N2WEQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1w1XAYG8icvKVHsRr9N2WEQ</a><br>提取码：yiff<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><h2 id="2-解压-1"><a href="#2-解压-1" class="headerlink" title="2.解压"></a>2.解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf redis-3.0.4.tar.gz</span></span><br></pre></td></tr></table></figure><p>解压后会得到redis-3.0.4目录，如下图。进入该目录 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/redis-3.0.4</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="18" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/18.jpg"></p><h2 id="3-编译"><a href="#3-编译" class="headerlink" title="3.编译"></a>3.编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make PREFIX=/usr/<span class="built_in">local</span>/redis install</span></span><br></pre></td></tr></table></figure><p>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：</p><p>redis-server：Redis服务器端启动程序</p><p>redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作</p><p>redis-benchmark：Redis性能测试工具</p><p>redis-check-aof：数据修复工具</p><p>redis-check-dump：检查导出工具</p><h2 id="5-配置redis"><a href="#5-配置redis" class="headerlink" title="5.配置redis"></a>5.配置redis</h2><p>进入/usr/local/redis/redis-3.0.4目录，并且复制配置文件到/usr/local/redis/bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/redis-3.0.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp redis.conf  /usr/<span class="built_in">local</span>/redis/bin</span></span><br></pre></td></tr></table></figure><h2 id="6-启动redis"><a href="#6-启动redis" class="headerlink" title="6.启动redis"></a>6.启动redis</h2><p>进入redis/bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis/bin</span></span><br></pre></td></tr></table></figure><p>启动redis服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./redis-server ./redis.conf</span></span><br></pre></td></tr></table></figure><p>新建窗口进入/usr/local/redis/bin，并启动redis客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli</span><br></pre></td></tr></table></figure><h1 id="Centos6-安装nginx"><a href="#Centos6-安装nginx" class="headerlink" title="Centos6 安装nginx"></a>Centos6 安装nginx</h1><blockquote><p>安装必看 <a href="https://haoyongliang.gitee.io/2020/01/12/linux/linux基本命令/#Centos6-软件环境初始化">https://haoyongliang.gitee.io/2020/01/12/linux/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#Centos6-%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96</a> </p></blockquote><h2 id="1-上传-1"><a href="#1-上传-1" class="headerlink" title="1.上传"></a>1.上传</h2><blockquote><p>32位nginx下载地址</p></blockquote><p>链接：<a href="https://pan.baidu.com/s/1-aN5w_r0hb1lRkXpFqNhvg" target="_blank" rel="noopener">https://pan.baidu.com/s/1-aN5w_r0hb1lRkXpFqNhvg</a><br>提取码：zmzq<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>把 nginx 的源码包nginx-1.8.0.tar.gz上传到 linux 系统 /usr/local下</p><h2 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf nginx-1.8.0.tar.gz</span></span><br></pre></td></tr></table></figure><h2 id="3-创建makeFile-文件"><a href="#3-创建makeFile-文件" class="headerlink" title="3.创建makeFile 文件"></a>3.创建makeFile 文件</h2><p>进入nginx-1.8.0目录  使用 configure 命令创建一 makeFile 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx-1.8.0</span></span><br></pre></td></tr></table></figure><p>执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock \</span><br><span class="line">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client \</span><br><span class="line">--http-proxy-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;proxy \</span><br><span class="line">--http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;fastcgi \</span><br><span class="line">--http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;uwsgi \</span><br><span class="line">--http-scgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;scgi</span><br></pre></td></tr></table></figure><p>省略模式(使用默认配置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure \ 回车</span><br></pre></td></tr></table></figure><p>执行后可以看到Makefile文件</p><p><img src="/" alt="2" class="lazyload" data-src="./linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/2.png"></p><h2 id="4-编译"><a href="#4-编译" class="headerlink" title="4.编译"></a>4.编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><h2 id="5-安装"><a href="#5-安装" class="headerlink" title="5.安装"></a>5.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make install</span></span><br></pre></td></tr></table></figure><h2 id="6-启动"><a href="#6-启动" class="headerlink" title="6.启动"></a>6.启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /var/tmp/nginx/client -p</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./nginx</span></span><br></pre></td></tr></table></figure><h2 id="7-关闭与重启"><a href="#7-关闭与重启" class="headerlink" title="7.关闭与重启"></a>7.关闭与重启</h2><p>关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./nginx -s stop</span></span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./nginx -s reload</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装系统后配置gitee与博客</title>
      <link href="/2020/01/09/gitee/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%85%8D%E7%BD%AEgitee%E4%B8%8E%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/09/gitee/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%85%8D%E7%BD%AEgitee%E4%B8%8E%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>重装系统后需要将本地未及时更新到git的数据同步过去</p><p>也需要重新配置gitee博客</p></blockquote><h1 id="1-安装和配置git"><a href="#1-安装和配置git" class="headerlink" title="1.安装和配置git"></a>1.安装和配置git</h1><h2 id="1-1安装"><a href="#1-1安装" class="headerlink" title="1.1安装"></a>1.1安装</h2><p>安装就不介绍了，下一步即可</p><h2 id="1-2配置"><a href="#1-2配置" class="headerlink" title="1.2配置"></a>1.2配置</h2><blockquote><p>设置你的用户名称和e-mail地址这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email "haoyongliang@foxmail.com"</span><br><span class="line">git config --global user.name "haoyongliang"</span><br></pre></td></tr></table></figure><p>然后在之前git项目根路径右键运行git图形化界面，并依次点击以下按钮</p><p><img src="/" alt="1" class="lazyload" data-src="./%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%85%8D%E7%BD%AEgitee%E4%B8%8E%E5%8D%9A%E5%AE%A2/1.jpg"></p><p>点击push会弹出登录，输入账号和密码即可</p><p><img src="/" alt="2" class="lazyload" data-src="./%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E9%85%8D%E7%BD%AEgitee%E4%B8%8E%E5%8D%9A%E5%AE%A2/2.jpg"></p><h1 id="2-配置gitee博客"><a href="#2-配置gitee博客" class="headerlink" title="2.配置gitee博客"></a>2.配置gitee博客</h1><h2 id="2-1安装node"><a href="#2-1安装node" class="headerlink" title="2.1安装node"></a>2.1安装node</h2><p>安装就不介绍了，下一步即可，建议安装到非C盘，这样即使C盘重装后只需要配置环境变量就行了</p><h2 id="2-2安装cnpm"><a href="#2-2安装cnpm" class="headerlink" title="2.2安装cnpm"></a>2.2安装cnpm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br></pre></td></tr></table></figure><h2 id="2-3安装hexo-cli"><a href="#2-3安装hexo-cli" class="headerlink" title="2.3安装hexo-cli"></a>2.3安装hexo-cli</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="2-4-生成博客并提交"><a href="#2-4-生成博客并提交" class="headerlink" title="2.4 生成博客并提交"></a>2.4 生成博客并提交</h2><p>进入到博客项目根目录执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lombok中关于log4j2日志的配置</title>
      <link href="/2020/01/07/%E5%B7%A5%E5%85%B7/lombok%E4%B8%AD%E5%85%B3%E4%BA%8Elog4j2%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/07/%E5%B7%A5%E5%85%B7/lombok%E4%B8%AD%E5%85%B3%E4%BA%8Elog4j2%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用lombok编写日志更加方便,本文介绍lombok与log4j2日志的配置</p></blockquote><h1 id="为什么使用日志"><a href="#为什么使用日志" class="headerlink" title="为什么使用日志"></a>为什么使用日志</h1><p>1.使用应用程序是客户，如果程序出了问题，一般客户能提供精确步骤就阿弥陀佛了。</p><p>2.不是所有的问题都很容易重现</p><p>3.如果我们仅仅使用调试器断点机制，该问题没有重现，会让我们以为已经解决了</p><h1 id="哪些位置要做日志记录"><a href="#哪些位置要做日志记录" class="headerlink" title="哪些位置要做日志记录"></a>哪些位置要做日志记录</h1><p>本着一个原则：在不使用DEBUG调试器的情况下，通过日志信息定位错误位置。尽可能在可能出现问题的代码附近做日志。</p><h1 id="log4j与lombok结合使用步骤"><a href="#log4j与lombok结合使用步骤" class="headerlink" title="log4j与lombok结合使用步骤"></a>log4j与lombok结合使用步骤</h1><h2 id="第一步-引入依赖"><a href="#第一步-引入依赖" class="headerlink" title="第一步:引入依赖"></a>第一步:引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二步-添加log4j2-xml配置文件"><a href="#第二步-添加log4j2-xml配置文件" class="headerlink" title="第二步:添加log4j2.xml配置文件"></a>第二步:添加log4j2.xml配置文件</h2><blockquote><p>文章末尾会对该配置文件做介绍</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置打印到控制台的数据格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            fileName:表示日志写入到logs/app.log文件中</span></span><br><span class="line"><span class="comment">            filePattern:当日志达到5M时,对app.log按照filePattern的值g进行重命名并归档</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/app.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--写入到日志中的数据格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy.MM.dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            触发策略：每经过1小时或者当文件大小到达5M时，</span></span><br><span class="line"><span class="comment">            按照app-2017-08-01 12.log的格式对app.log进行重命名并归档，</span></span><br><span class="line"><span class="comment">            并生成新的文件用于写入log 1个小时或者5M--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"5MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">日志的四个级别从低到高 DEBUG INFO WARN ERROR</span></span><br><span class="line"><span class="comment">以下配置表示DEBUG级别以上的日志将会</span></span><br><span class="line"><span class="comment">按照Console规范打印到控制台</span></span><br><span class="line"><span class="comment">按照RollingFile规范输出到文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三步-引入-Slf4j注解和log变量"><a href="#第三步-引入-Slf4j注解和log变量" class="headerlink" title="第三步:引入@Slf4j注解和log变量"></a>第三步:引入@Slf4j注解和log变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查看日志位置"><a href="#查看日志位置" class="headerlink" title="查看日志位置"></a>查看日志位置</h1><p>如果是普通java工程，日志相对于项目根目录</p><p>如果是web工程，日志文件在tomcat的bin目录下</p><p>如果是web工程，使用的是maven中的tomcat插件，启动tomcat的时候查看控制台，找到以下信息””</p><h1 id="log4j2-xml配置文件配置介绍"><a href="#log4j2-xml配置文件配置介绍" class="headerlink" title="log4j2.xml配置文件配置介绍"></a>log4j2.xml配置文件配置介绍</h1><h2 id="RollingFile标签"><a href="#RollingFile标签" class="headerlink" title="RollingFile标签"></a>RollingFile标签</h2><h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><blockquote><p>按天记录日志，日志保留7天 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"rollingFile"</span> <span class="attr">fileName</span>=<span class="string">"log/main.log"</span> <span class="attr">filePattern</span>=<span class="string">"log/$$&#123;date:yyyy-MM&#125;/main-%d&#123;yyyy-MM-dd&#125;.log.gz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5p] %l - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">"true"</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"log"</span> <span class="attr">maxDepth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"*/*.log.gz"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"7d"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><blockquote><p>按小时记录日志，日志保留6天</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"rollingFile"</span> <span class="attr">fileName</span>=<span class="string">"log/main.log"</span> <span class="attr">filePattern</span>=<span class="string">"log/$$&#123;date:yyyy-MM&#125;/main-%d&#123;yyyy-MM-dd-HH&#125;.log.gz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5p] %l - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">"true"</span> <span class="attr">interval</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"log"</span> <span class="attr">maxDepth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"*/*.log.gz"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"6d"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h3><blockquote><p>按大小记录日志，满20MB记录一个日志，日志保留7天；同一天最多生成10个20MB日志文件，由filePattern中的%i和DefaultRolloverStrategy中max的值决定</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"rollingFile"</span> <span class="attr">fileName</span>=<span class="string">"log/main.log"</span> <span class="attr">filePattern</span>=<span class="string">"log/$$&#123;date:yyyy-MM&#125;/main-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%-5p] %l - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"20 MB"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"log"</span> <span class="attr">maxDepth</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"*/*.log.gz"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"7d"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="interval的单位"><a href="#interval的单位" class="headerlink" title="interval的单位"></a>interval的单位</h3><p>关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval；日期格式精确到哪一位，interval也精确到哪一个单位<br>若将filePattern改为filePattern=“logs/app-%d{yyyy-MM-dd HH-mm}-%i.log”，yyyy-MM-dd HH-mm最小时间粒度为分钟，将每1分钟触发一次rollover。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>固定Centos7虚拟机中的IP地址</title>
      <link href="/2020/01/06/linux/%E5%9B%BA%E5%AE%9ACentos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84IP%E5%9C%B0%E5%9D%80/"/>
      <url>/2020/01/06/linux/%E5%9B%BA%E5%AE%9ACentos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84IP%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-打开目录"><a href="#1-打开目录" class="headerlink" title="1.打开目录"></a>1.打开目录</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /etc/sysconfig/network-scripts</span></span><br></pre></td></tr></table></figure><h1 id="2-找到配置文件"><a href="#2-找到配置文件" class="headerlink" title="2.找到配置文件"></a>2.找到配置文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br></pre></td></tr></table></figure><p>找到ifcng-开头的文件，我的是ifcfg-ens33</p><p><img src="/" alt="1" class="lazyload" data-src="./%E5%9B%BA%E5%AE%9ACentos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84IP%E5%9C%B0%E5%9D%80/1.jpg"></p><h1 id="3-编辑配置文件"><a href="#3-编辑配置文件" class="headerlink" title="3.编辑配置文件"></a>3.编辑配置文件</h1><p>编辑该文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ifcfg-ens33</span></span><br></pre></td></tr></table></figure><p>将BOOTPROTO=dhcp的值改为static</p><p>并在最后面加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DNS1&#x3D;114.114.114.114     --dns地址</span><br><span class="line">IPADDR&#x3D;192.168.162.130   --需要设置的ip地址，ID地址设置成虚拟机当前IP，随意设置可能无法访问</span><br><span class="line">NETMASK&#x3D;255.255.255.0  --子网掩码</span><br><span class="line">GATEWAY&#x3D;192.168.162.1   --网关，设置参考IP</span><br></pre></td></tr></table></figure><p><img src="/" alt="2" class="lazyload" data-src="./%E5%9B%BA%E5%AE%9ACentos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84IP%E5%9C%B0%E5%9D%80/2.jpg"></p><h1 id="4-重启服务"><a href="#4-重启服务" class="headerlink" title="4.重启服务"></a>4.重启服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service network restart</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="3" class="lazyload" data-src="./%E5%9B%BA%E5%AE%9ACentos7%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84IP%E5%9C%B0%E5%9D%80/3.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务安全框架SpringSecurity</title>
      <link href="/2019/12/19/SpringCloud/SpringCloud-Security/"/>
      <url>/2019/12/19/SpringCloud/SpringCloud-Security/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要学SpringSecurity"><a href="#为什么要学SpringSecurity" class="headerlink" title="为什么要学SpringSecurity"></a>为什么要学SpringSecurity</h1><p>SpringSecurity的竞争对手是Apache的Shiro框架，并且市面上用Shir的公司要更多，但是在SpringCloud微服务中推荐用SpringSecurity框架做安全控制。</p><h1 id="什么是SpringSecurity"><a href="#什么是SpringSecurity" class="headerlink" title="什么是SpringSecurity"></a>什么是SpringSecurity</h1><p>SpringSecurity是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。</p><h1 id="SpringSecurity应用场景"><a href="#SpringSecurity应用场景" class="headerlink" title="SpringSecurity应用场景"></a>SpringSecurity应用场景</h1><p>Security在很多企业中作为后台角色权限框架、授权认证oauth2.0、安全防护（防止跨站点请求）、Session攻击、非常容易融合SpringMVC使用等</p><p>比如有两个账户admin和zhangsan,admin账户所有请求都有访问权限，zhangsan账户只能访问查询和添加订单权限，如果框架返回403表示权限不足，401表示没有授权</p><h1 id="SpringBoot项目集成Security"><a href="#SpringBoot项目集成Security" class="headerlink" title="SpringBoot项目集成Security"></a>SpringBoot项目集成Security</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="导入POM依赖"><a href="#导入POM依赖" class="headerlink" title="导入POM依赖"></a>导入POM依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-security-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-security-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot整合freemarker --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意： 这里必须要添加， 否者各种依赖有问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导入application-yml配置文件"><a href="#导入application-yml配置文件" class="headerlink" title="导入application.yml配置文件"></a>导入application.yml配置文件</h3><blockquote><p>这里页面用到了freemarker,所以要配置一下，不会freemarker也没关系。当做html页面按照教程配置就行。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置freemarker</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="comment"># 设置模板后缀名</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span></span><br><span class="line">    <span class="comment"># 设置文档类型</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="comment"># 设置页面编码格式</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 设置页面缓存</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 设置ftl文件路径</span></span><br><span class="line">    <span class="attr">template-loader-path:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:/templates</span></span><br><span class="line">  <span class="comment"># 设置静态文件路径，js,css等</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span></span><br></pre></td></tr></table></figure><h3 id="添加OrderController"><a href="#添加OrderController" class="headerlink" title="添加OrderController"></a>添加OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.springbootsecuritydemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 首页</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/showOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"showOrder"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加订单</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addOrder"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改订单</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/updateOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateOrder"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除订单</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/deleteOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"deleteOrder"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义登陆页面</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在resources目录下的templates目录添加模板页"><a href="#在resources目录下的templates目录添加模板页" class="headerlink" title="在resources目录下的templates目录添加模板页"></a>在resources目录下的templates目录添加模板页</h3><blockquote><p>index.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>订单系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"showOrder"</span>&gt;</span>查询订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"addOrder"</span>&gt;</span>添加订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"deleteOrder"</span>&gt;</span>删除订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"updateOrder"</span>&gt;</span>修改订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>login.ftl    </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>每特教育--权限控制登陆系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名称<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">RequestParameters</span>['<span class="attr">error</span>']??&gt;</span></span><br><span class="line">用户名称或者密码错误</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>addOrder.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加订单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>deleteOrder.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>删除订单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>showOrder.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>查询订单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>updateOrder.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改订单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>logFail.ftl</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登陆失败!</span><br></pre></td></tr></table></figure><h2 id="使用HttpBasic模式登陆"><a href="#使用HttpBasic模式登陆" class="headerlink" title="使用HttpBasic模式登陆"></a>使用HttpBasic模式登陆</h2><h3 id="什么是Basic认证"><a href="#什么是Basic认证" class="headerlink" title="什么是Basic认证"></a>什么是Basic认证</h3><p>在HTTP协议进行通信的过程中，HTTP协议定义了基本认证过程以允许HTTP服务器对WEB浏览器进行用户身份证的方法，当一个客户端向HTTP服务 器进行数据请求时，如果客户端未被认证，则HTTP服务器将通过基本认证过程对客户端的用户名及密码进行验证，以决定用户是否合法。客户端在接收到HTTP服务器的身份认证要求后，会提示用户输入用户名及密码，然后将用户名及密码以BASE64加密，加密后的密文将附加于请求信息中， 如当用户名为mayikt，密码为：123456时，客户端将用户名和密码用“：”合并，并将合并后的字符串用BASE64加密为密文，并于每次请求数据 时，将密文附加于请求头（Request Header）中。HTTP服务器在每次收到请求包后，根据协议取得客户端附加的用户信息（BASE64加密的用户名和密码），解开请求包，对用户名及密码进行验证，如果用 户名及密码正确，则根据客户端请求，返回客户端所需要的数据;否则，返回错误代码或重新要求客户端提供用户名及密码。</p><h3 id="添加SpringSecurity依赖"><a href="#添加SpringSecurity依赖" class="headerlink" title="添加SpringSecurity依赖"></a>添加SpringSecurity依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;spring-boot 整合security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加SpringSecurity配置文件"><a href="#添加SpringSecurity配置文件" class="headerlink" title="添加SpringSecurity配置文件"></a>添加SpringSecurity配置文件</h3><blockquote><p>本节知识点主要介绍Basic认证，下面配置文件不做详细介绍，后续介绍。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.springbootsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*配置用户认证信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth</span><br><span class="line">            .inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">"admin"</span>)</span><br><span class="line">            .password(<span class="string">"123456"</span>)</span><br><span class="line">            .authorities(<span class="string">"addOrder"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*配置HttpSecurity 拦截资源*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/**"</span>)</span><br><span class="line">            .fullyAuthenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * There is no PasswordEncoder mapped for the id "null"</span></span><br><span class="line"><span class="comment">        原因:升级为Security5.0以上密码支持多中加密方式，恢复以前模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoOpPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (NoOpPasswordEncoder) NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/" alt="1" class="lazyload" data-src="./SpringCloud-Security/1.jpg"></p><h2 id="使用FromLogin模式登陆"><a href="#使用FromLogin模式登陆" class="headerlink" title="使用FromLogin模式登陆"></a>使用FromLogin模式登陆</h2><blockquote><p>表单登陆这种方式在实际开发中会用的更多一点</p></blockquote><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><blockquote><p> 修改配置文件中的configure方法，如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*配置HttpSecurity 拦截资源*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/**"</span>)</span><br><span class="line">        .fullyAuthenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h3><blockquote><p>SpringSecurity框架会提供一个默认的登陆页面，也可以是使用我们自己的</p></blockquote><p><img src="/" alt="2" class="lazyload" data-src="./SpringCloud-Security/2.jpg"></p><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><blockquote><p>打开localhost:8080登录成功后发现每一个功能都能访问，原因是没有配置控制权限</p></blockquote><h3 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h3><blockquote><p>修改SecurityConfig.java文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.springbootsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*配置用户信息并且分配权限*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置用户账号信息和权限</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"admin"</span>) <span class="comment">//配置帐号</span></span><br><span class="line">                .password(<span class="string">"123456"</span>) <span class="comment">//配置密码</span></span><br><span class="line">            <span class="comment">//配置权限名</span></span><br><span class="line">                .authorities(<span class="string">"showOrder"</span>,<span class="string">"addOrder"</span>,<span class="string">"updateOrder"</span>,<span class="string">"deleteOrder"</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 useradd账号 只有添加查询和添加订单权限</span></span><br><span class="line">        auth.inMemoryAuthentication().</span><br><span class="line">                withUser(<span class="string">"userAdd"</span>) <span class="comment">//配置账号</span></span><br><span class="line">                .password(<span class="string">"123456"</span>) <span class="comment">//配置密码</span></span><br><span class="line">                .authorities(<span class="string">"showOrder"</span>,<span class="string">"addOrder"</span>); <span class="comment">//配置权限名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*配置HttpSecurity 拦截资源，每一个资源路径和权限名的映射关系*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 拦截请求, 权限名称</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/showOrder"</span>).hasAnyAuthority(<span class="string">"showOrder"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/addOrder"</span>).hasAnyAuthority(<span class="string">"addOrder"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/updateOrder"</span>).hasAnyAuthority(<span class="string">"updateOrder"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/deleteOrder"</span>).hasAnyAuthority(<span class="string">"deleteOrder"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/**"</span>).fullyAuthenticated().and().formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * There is no PasswordEncoder mapped for the id "null"</span></span><br><span class="line"><span class="comment">        原因:升级为Security5.0以上密码支持多中加密方式，恢复以前模式</span></span><br><span class="line"><span class="comment">        SpringBoot2.0抛弃了原来的NoOpPasswordEncoder，</span></span><br><span class="line"><span class="comment">        要求用户保存的密码必须要使用加密算法后存储，</span></span><br><span class="line"><span class="comment">        在登录验证的时候Security会将获得的密码在进行编码后再和数据库中加密后的密码进行对比</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoOpPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (NoOpPasswordEncoder) NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用admin帐号登陆效果"><a href="#使用admin帐号登陆效果" class="headerlink" title="使用admin帐号登陆效果"></a>使用admin帐号登陆效果</h3><blockquote><p>每一个页面都有权限访问</p></blockquote><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/3.jpg"></p><h3 id="使用userAdd帐号登陆效果"><a href="#使用userAdd帐号登陆效果" class="headerlink" title="使用userAdd帐号登陆效果"></a>使用userAdd帐号登陆效果</h3><blockquote><p>查询和添可以访问，删除和修改提示权限不足</p></blockquote><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/4.jpg"></p><h2 id="修改403页面"><a href="#修改403页面" class="headerlink" title="修改403页面"></a>修改403页面</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>查看报错页面，发现错误原因是因为/error 没有对应的映射路径</p><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/5.jpg"></p><p>然后查看控制台找到/error对应的控制器</p><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/6.jpg"></p><p>查看BasicErrorController控制器中的源代码,发现error视图在errorHtml方法里，观察status.value()的值是403</p><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/7.jpg"></p><h3 id="编写配置文件覆盖SpringBoot默认控制器"><a href="#编写配置文件覆盖SpringBoot默认控制器" class="headerlink" title="编写配置文件覆盖SpringBoot默认控制器"></a>编写配置文件覆盖SpringBoot默认控制器</h3><p>我们可以覆盖SpringBoot提供的默认的错误页面，根据不同的错误状态码，跳转的不同的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.springbootsecuritydemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title">webServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        ErrorPage errorPage400 = <span class="keyword">new</span> ErrorPage(HttpStatus.BAD_REQUEST, <span class="string">"/error/400"</span>);</span><br><span class="line">        ErrorPage errorPage401 = <span class="keyword">new</span> ErrorPage(HttpStatus.UNAUTHORIZED, <span class="string">"/error/401"</span>);</span><br><span class="line">        ErrorPage errorPage403 = <span class="keyword">new</span> ErrorPage(HttpStatus.FORBIDDEN, <span class="string">"/error/403"</span>);</span><br><span class="line">        ErrorPage errorPage404 = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">"/error/404"</span>);</span><br><span class="line">        ErrorPage errorPage415 </span><br><span class="line">            = <span class="keyword">new</span> ErrorPage(HttpStatus.UNSUPPORTED_MEDIA_TYPE, <span class="string">"/error/415"</span>);</span><br><span class="line">        ErrorPage errorPage500 </span><br><span class="line">            = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"/error/500"</span>);</span><br><span class="line">        factory.addErrorPages(errorPage400, errorPage401, errorPage403, errorPage404, errorPage415, errorPage500);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写错误页面对应的控制器"><a href="#编写错误页面对应的控制器" class="headerlink" title="编写错误页面对应的控制器"></a>编写错误页面对应的控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.springbootsecuritydemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/403"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">statusCode403</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error/403"</span>;<span class="comment">//在templates的error目录下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加403错误页面"><a href="#添加403错误页面" class="headerlink" title="添加403错误页面"></a>添加403错误页面</h3><blockquote><p>在templates目录下新建error目录，error目录下新建403模板页面</p></blockquote><p>403.ftl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您的权限不足!</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/" alt="3" class="lazyload" data-src="./SpringCloud-Security/8.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Spring-Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务组件Quartz</title>
      <link href="/2019/12/08/%E5%B7%A5%E5%85%B7/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%BB%84%E4%BB%B6Quartz/"/>
      <url>/2019/12/08/%E5%B7%A5%E5%85%B7/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%BB%84%E4%BB%B6Quartz/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本文介绍定时任务组件Quartz</p></blockquote><h1 id="1-Quartz介绍"><a href="#1-Quartz介绍" class="headerlink" title="1. Quartz介绍"></a>1. Quartz介绍</h1><p>Quartz是Job scheduling（作业调度）领域的一个开源项目，Quartz既可以单独使用也 可以跟spring框架整合使用，在实际开发中一般会使用后者。使用Quartz可以开发一个 或者多个定时任务，每个定时任务可以单独指定执行的时间，例如每隔1小时执行一次、 每个月第一天上午10点执行一次、每个月最后一天下午5点执行一次等。<br>官网：<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/</a></p><p>maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz‐jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-Quartz入门案例"><a href="#2-Quartz入门案例" class="headerlink" title="2.Quartz入门案例"></a>2.Quartz入门案例</h1><blockquote><p>本案例基于Quartz和spring整合的方式使用。</p></blockquote><h2 id="第一步-创项目，导依赖"><a href="#第一步-创项目，导依赖" class="headerlink" title="第一步 创项目，导依赖"></a>第一步 创项目，导依赖</h2><p>创建maven工程quartzdemo，导入Quartz和spring相关坐标，pom.xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF‐8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema‐instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">http://maven.apache.org/xsd/maven‐4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0‐SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐context‐support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz‐jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二步-创建任务类"><a href="#第二步-创建任务类" class="headerlink" title="第二步 创建任务类"></a>第二步 创建任务类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.jobs;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Job</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"job execute..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步-配置自定义Job"><a href="#第三步-配置自定义Job" class="headerlink" title="第三步 配置自定义Job"></a>第三步 配置自定义Job</h2><p>提供Spring配置文件spring-jobs.xml，配置自定义Job、任务描述、触发器、调度<br>工厂等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?xml version="1.0" encoding="UTF‐8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema‐instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring‐beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc                        </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring‐</span></span></span><br><span class="line"><span class="tag"><span class="string">mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       </span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo                        </span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                       </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context                        </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring‐context.xsd"</span>&gt;</span></span><br><span class="line">                       </span><br><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> 注册自定义<span class="attr">Job</span> ‐‐&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDemo"</span> <span class="attr">class</span>=<span class="string">"com.itheima.jobs.JobDemo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> 注册<span class="attr">JobDetail</span>,作用是负责通过反射调用指定的<span class="attr">Job</span> ‐‐&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDetail"</span></span></span><br><span class="line"><span class="tag">         </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFacto</span></span></span><br><span class="line"><span class="tag"><span class="string">ryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!‐‐</span> 注入目标对象 ‐‐&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"jobDemo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!‐‐</span> 注入目标方法 ‐‐&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"run"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐</span> 注册一个触发器，指定任务触发的时间 ‐‐&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTrigger"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!‐‐</span> 注入<span class="attr">JobDetail</span> ‐‐&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobDetail"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!‐‐</span> 指定触发的时间，基于<span class="attr">Cron</span>表达式 ‐‐&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>0/10 * * * * ?<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!‐‐</span> 注册一个统一的调度工厂，通过这个调度工厂调度任务 ‐‐&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!‐‐</span> 注入多个触发器 ‐‐&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myTrigger"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第四步-编写测试类"><a href="#第四步-编写测试类" class="headerlink" title="第四步 编写测试类"></a>第四步 编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.jobs.com.itheima.app;</span><br><span class="line"><span class="keyword">import</span></span><br><span class="line">org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring‐jobs.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面main方法观察控制台，可以发现每隔10秒会输出一次，说明每隔10秒自定义<br>Job被调用一次</p><h1 id="3-cron表达式"><a href="#3-cron表达式" class="headerlink" title="3.cron表达式"></a>3.cron表达式</h1><p>上面的入门案例中我们指定了一个表达式：0/10 * * * * ?<br>这种表达式称为cron表达式，通过cron表达式可以灵活的定义出符合要求的程序执行的<br>时间。本小节我们就来学习一下cron表达式的使用方法。如下图：<br>cron表达式分为七个域，之间使用空格分隔。其中最后一个域（年）可以为空。每个域<br>都有自己允许的值和一些特殊字符构成。使用这些特殊字符可以使我们定义的表达式更<br>加灵活。</p><p>下面是对这些特殊字符的介绍：<br>逗号（,）：指定一个值列表，例如使用在月域上1,4,5,7表示1月、4月、5月和7月<br>横杠（-）：指定一个范围，例如在时域上3-6表示3点到6点（即3点、4点、5点、6点）<br>星号（*）：表示这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月<br>都会触发<br>斜线（/）：表示递增，例如使用在秒域上0/15表示每15秒<br>问号（?）：只能用在日和周域上，但是不能在这两个域上同时使用。表示不指定<br>井号（#）：只能使用在周域上，用于指定月份中的第几周的哪一天，例如6#3，意思是<br>某月的第三个周五 (6=星期五，3意味着月份中的第三周)<br>L：某域上允许的最后一个值。只能使用在日和周域上。当用在日域上，表示的是在月域<br>上指定的月份的最后一天。用于周域上时，表示周的最后一天，就是星期六<br>W：W 字符代表着工作日 (星期一到星期五)，只能用在日域上，它用来指定离指定日的<br>最近的一个工作日</p><h1 id="4-cron表达式在线生成"><a href="#4-cron表达式在线生成" class="headerlink" title="4.cron表达式在线生成"></a>4.cron表达式在线生成</h1><p>前面介绍了cron表达式，但是自己编写表达式还是有一些困难的，我们可以借助一些<br>cron表达式在线生成器来根据我们的需求生成表达式即可。<br><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><p><img src="/" alt="" class="lazyload" data-src="./%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%BB%84%E4%BB%B6Quartz/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七牛云存储使用</title>
      <link href="/2019/12/07/%E5%B7%A5%E5%85%B7/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/07/%E5%B7%A5%E5%85%B7/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 图片存储方案 </p></blockquote><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p>在实际开发中，我们会有很多处理不同功能的服务器。例如：<br>应用服务器：负责部署我们的应用<br>数据库服务器：运行我们的数据库<br>文件服务器：负责存储用户上传文件的服务器</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/1.png"></p><p>分服务器处理的目的是让服务器各司其职，从而提高我们项目的运行效率。<br>常见的图片存储方案：<br>方案一：使用nginx搭建图片服务器<br>方案二：使用开源的分布式文件存储系统，例如Fastdfs、HDFS等<br>方案三：使用云存储，例如阿里云、七牛云等 </p><h1 id="2-七牛云存储"><a href="#2-七牛云存储" class="headerlink" title="2.七牛云存储"></a>2.七牛云存储</h1><p>七牛云（隶属于上海七牛信息技术有限公司）是国内领先的以视觉智能和数据智能为核 心的企业级云计算服务商，同时也是国内知名智能视频云服务商，累计为 70 多万家企业 提供服务，覆盖了国内80%网民。围绕富媒体场景推出了对象存储、融合 CDN 加速、容 器云、大数据平台、深度学习平台等产品、并提供一站式智能视频云解决方案。为各行 业及应用提供可持续发展的智能视频云生态，帮助企业快速上云，创造更广阔的商业价 值。<br>官网：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">https://www.qiniu.com/</a><br>通过七牛云官网介绍我们可以知道其提供了多种服务，我们主要使用的是七牛云提供的 对象存储服务来存储图片。</p><h2 id="2-1-登陆注册"><a href="#2-1-登陆注册" class="headerlink" title="2.1.登陆注册"></a>2.1.登陆注册</h2><p>要使用七牛云的服务，首先需要注册成为会员。地址：<a href="https://portal.qiniu.com/signup" target="_blank" rel="noopener">https://portal.qiniu.com/signup</a></p><p>注册完成后就可以使用刚刚注册的邮箱和密码登录到七牛云。</p><p>登录成功后点击页面右上角管理控制台，选择对象存储</p><p><strong>注意</strong>：登录成功后还需要进行实名认证才能进行相关操作。</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/2.png"></p><h2 id="2-2-新建存储空间"><a href="#2-2-新建存储空间" class="headerlink" title="2.2.新建存储空间"></a>2.2.新建存储空间</h2><p>要进行图片存储，我们需要在七牛云管理控制台新建存储空间。点击管理控制台首页对 象存储下的立即添加按钮或者新建存储空间按钮，页面跳转到新建存储空间页面：</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/3.png"></p><p>可以创建多个存储空间，各个存储空间是相互独立的。</p><h2 id="2-3-查看存储空间信息"><a href="#2-3-查看存储空间信息" class="headerlink" title="2.3.查看存储空间信息"></a>2.3.查看存储空间信息</h2><p>存储空间创建后，会在左侧的存储空间列表菜单中展示创建的存储空间名称，点击存储 空间名称可以查看当前存储空间的相关信息</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/4.png"></p><h2 id="2-4-开发者中心"><a href="#2-4-开发者中心" class="headerlink" title="2.4.开发者中心"></a>2.4.开发者中心</h2><p>可以通过七牛云提供的开发者中心学习如何操作七牛云服务，地 址：<a href="https://developer.qiniu.com/" target="_blank" rel="noopener">https://developer.qiniu.com/</a></p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/5.png"></p><p>点击对象存储，跳转到对象存储开发页面，地址：<a href="https://developer.qiniu.com/kodo" target="_blank" rel="noopener">https://developer.qiniu.com/kodo</a></p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/6.png"></p><p>七牛云提供了多种方式操作对象存储服务，本项目采用Java SDK方式，地 址：<a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/sdk/1239/java</a></p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/7.png"></p><h1 id="3-Java-SDK操作七牛云"><a href="#3-Java-SDK操作七牛云" class="headerlink" title="3.Java SDK操作七牛云"></a>3.Java SDK操作七牛云</h1><h2 id="3-1-导入依赖"><a href="#3-1-导入依赖" class="headerlink" title="3.1.导入依赖"></a>3.1.导入依赖</h2><p>七牛云存储</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所需要的第三方依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>happy-dns-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-鉴权"><a href="#3-2-鉴权" class="headerlink" title="3.2.鉴权"></a>3.2.鉴权</h2><p>Java SDK的所有的功能，都需要合法的授权。授权凭证的签算需要七牛账号下的一对有效的<code>Access Key</code>和<code>Secret Key</code>，这对密钥可以通过如下步骤获得：</p><ol><li>点击<a href="https://portal.qiniu.com/signup" target="_blank" rel="noopener">注册🔗</a>开通七牛开发者帐号</li><li>如果已有账号，直接登录七牛开发者后台，点击<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">这里🔗</a>查看 Access Key 和 Secret Key</li></ol><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/8.png"></p><h2 id="3-3-根据文件路径上传文件"><a href="#3-3-根据文件路径上传文件" class="headerlink" title="3.3.根据文件路径上传文件"></a>3.3.根据文件路径上传文件</h2><p>接下来我们使用七牛云提供的Java SDK完成图片上传和删除，我们可以参考官方 提供的例子。</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类,Region.region1()表示服务器的位置，查看上图</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region1());</span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">        <span class="comment">//...生成上传凭证，然后准备上传</span></span><br><span class="line">        String accessKey = <span class="string">"自己的AK"</span>;</span><br><span class="line">        String secretKey = <span class="string">"自己的SK"</span>;</span><br><span class="line">        String bucket = <span class="string">"当前存储空间的名字"</span>;<span class="comment">//存储空间名字</span></span><br><span class="line">        <span class="comment">//本地文件位置</span></span><br><span class="line">        String localFilePath = <span class="string">"C:\\Users\\haoyongliang\\Desktop\\18禁\\12.gif"</span>;</span><br><span class="line">        <span class="comment">//设置文件名，key表示文件名默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        String upToken = auth.uploadToken(bucket);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(localFilePath, key, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//输出服务器中文件的名字</span></span><br><span class="line">            System.out.println(putRet.key);</span><br><span class="line">            System.out.println(putRet.hash);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            Response r = ex.response;</span><br><span class="line">            System.err.println(r.toString());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.err.println(r.bodyString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FujP9TQI1WTMYmO4DkXFtVUTehYF</span><br><span class="line">FujP9TQI1WTMYmO4DkXFtVUTehYF</span><br></pre></td></tr></table></figure><p>查看上传到服务器的文件</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/11.png"></p><h2 id="3-4-根据文件的字节码上传文件"><a href="#3-4-根据文件的字节码上传文件" class="headerlink" title="3.4 根据文件的字节码上传文件"></a>3.4 根据文件的字节码上传文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration(Region.region0());</span><br><span class="line"><span class="comment">//...其他参数参考类注释</span></span><br><span class="line"></span><br><span class="line">UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line"><span class="comment">//...生成上传凭证，然后准备上传</span></span><br><span class="line">String accessKey = <span class="string">"your access key"</span>;</span><br><span class="line">String secretKey = <span class="string">"your secret key"</span>;</span><br><span class="line">String bucket = <span class="string">"your bucket name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] uploadBytes = <span class="string">"hello qiniu cloud"</span>.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">    Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">    String upToken = auth.uploadToken(bucket);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Response response = uploadManager.put(uploadBytes, key, upToken);</span><br><span class="line">        <span class="comment">//解析上传成功的结果</span></span><br><span class="line">        DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(putRet.key);</span><br><span class="line">        System.out.println(putRet.hash);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">        Response r = ex.response;</span><br><span class="line">        System.err.println(r.toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.err.println(r.bodyString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">            <span class="comment">//ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException ex) &#123;</span><br><span class="line">    <span class="comment">//ignore</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-删除文件"><a href="#3-5-删除文件" class="headerlink" title="3.5.删除文件"></a>3.5.删除文件</h2><p><img src="/" alt="" class="lazyload" data-src="./%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8/10.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration(Region.region1());</span><br><span class="line"><span class="comment">//...其他参数参考类注释</span></span><br><span class="line"></span><br><span class="line">String accessKey = <span class="string">"ak"</span>;</span><br><span class="line">String secretKey = <span class="string">"sk"</span>;</span><br><span class="line"></span><br><span class="line">String bucket = <span class="string">"存储空间名"</span>;<span class="comment">//存储空间名</span></span><br><span class="line">String key = <span class="string">"文件名"</span>;<span class="comment">//文件名</span></span><br><span class="line"></span><br><span class="line">Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">BucketManager bucketManager = <span class="keyword">new</span> BucketManager(auth, cfg);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    bucketManager.delete(bucket, key);</span><br><span class="line">&#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">    <span class="comment">//如果遇到异常，说明删除失败</span></span><br><span class="line">    System.err.println(ex.code());</span><br><span class="line">    System.err.println(ex.response.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-封装工具类"><a href="#3-5-封装工具类" class="headerlink" title="3.5.封装工具类"></a>3.5.封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.BucketManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Region;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiNiuUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_KEY = <span class="string">"o3KNPxydqBA51Z32nOO92OBeL0aUuF5ZBt37HZNp"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET_KEY = <span class="string">"XKD0Mbc-p99g1xsD8M6n83I7UTcl_suIswlpr5c5"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUCKET = <span class="string">"hyl-test"</span>;<span class="comment">//存储空间名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">upload2Qiniu</span><span class="params">(<span class="keyword">byte</span>[] data,String fileName)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region1());</span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        String key = fileName;</span><br><span class="line">            Auth auth = Auth.create(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">            String upToken = auth.uploadToken(BUCKET);</span><br><span class="line">                Response response = uploadManager.put(data, key, upToken);</span><br><span class="line">                <span class="comment">//解析上传成功的结果</span></span><br><span class="line">                DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                System.out.println(putRet.key);</span><br><span class="line">                System.out.println(putRet.hash);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">upload2Qiniu</span><span class="params">(String filePath,String fileName)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region1());<span class="comment">//Region.region1()表示服务器的位置，查看API</span></span><br><span class="line">        <span class="comment">//...其他参数参考类注释</span></span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是Windows情况下，格式是 D:\\qiniu\\test.png</span></span><br><span class="line">        String localFilePath = filePath+<span class="string">"\\"</span>+fileName;</span><br><span class="line">        <span class="comment">//默认不指定key(文件名)的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Auth auth = Auth.create(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">        String upToken = auth.uploadToken(BUCKET);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(localFilePath, key, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//输出服务器中文件的名字</span></span><br><span class="line">            System.out.println(putRet.key);</span><br><span class="line">            System.out.println(putRet.hash);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            Response r = ex.response;</span><br><span class="line">            System.err.println(r.toString());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.err.println(r.bodyString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                <span class="comment">//ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFileFromQiniu</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region1());</span><br><span class="line"></span><br><span class="line">        Auth auth = Auth.create(ACCESS_KEY, SECRET_KEY);</span><br><span class="line">        BucketManager bucketManager = <span class="keyword">new</span> BucketManager(auth, cfg);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bucketManager.delete(BUCKET, fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            <span class="comment">//如果遇到异常，说明删除失败</span></span><br><span class="line">            System.err.println(ex.code());</span><br><span class="line">            System.err.println(ex.response.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2019/12/04/javaSE/%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/12/04/javaSE/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h1><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h2 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释"></a>通俗解释</h2><p>把.class文件加载到内存，并创建对应的Class对象(<strong>这是第一步</strong>)，然后获取Class对象(字节码对象)中的Constructor,Field,Method（<strong>这是第二步</strong>）。并通过这三个对象任意操作内存中的对象属性和行为（<strong>这是第三步</strong>）。</p><p>名词解释：</p><p>Constructor 构造方法描述器</p><p>Field 属性描述器</p><p>Method 方法描述器</p><h1 id="获取Class对象的方式"><a href="#获取Class对象的方式" class="headerlink" title="获取Class对象的方式"></a>获取Class对象的方式</h1><blockquote><p>如何把.class文件加载到内存</p><p>Class类表示字节码文件对象类</p></blockquote><p><strong>注意：</strong>只要操作的是同一个.class文件，那么获取到的Class对象一定是相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 获取<span class="title">Class</span>对象的三种方式 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.类名.class</span></span><br><span class="line">        Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Class.forName("全类名");</span></span><br><span class="line">        Class clazz2 = Class.forName(<span class="string">"cn.itcast.domain.Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.对象名.getClass()</span></span><br><span class="line">        Class clazz3 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出字节码对象的名字</span></span><br><span class="line">        System.out.println(clazz.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过反射操作对象的属性"><a href="#通过反射操作对象的属性" class="headerlink" title="通过反射操作对象的属性"></a>通过反射操作对象的属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一步：创建对象(可以new对象也可以通过反射创建对象，这不是重点)*/</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二步：通过反射获取Field对象，并操作person的属性*/</span></span><br><span class="line"><span class="comment">//1.获取字节码对象</span></span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过字节码对象获取Field属性描述器</span></span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取访问权限，暴力反射</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.给person对象的name属性设置值</span></span><br><span class="line">field.set(person, <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.通过属性描述器获取指定对象的属性</span></span><br><span class="line">String name = (String)field.get(person);</span><br><span class="line"></span><br><span class="line">System.out.println(name);<span class="comment">//输出张三</span></span><br></pre></td></tr></table></figure><h1 id="通过反射操作构造方法"><a href="#通过反射操作构造方法" class="headerlink" title="通过反射操作构造方法"></a>通过反射操作构造方法</h1><blockquote><p>构造方法的作用：给私有成员变量赋值，创建对象</p></blockquote><p><strong>目的</strong>:是为了创建Constructor对象，然后通过该对象的newInstance方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.获取字节码对象</span></span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//2.获取属性/构造方法/成员方法//获取Person(String, int)构造 </span></span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.设置访问权限</span></span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//4.创建对象</span></span><br><span class="line">Person person = (Person)constructor.newInstance(<span class="string">"张三"</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure><h1 id="通过反射操作对象的普通方法"><a href="#通过反射操作对象的普通方法" class="headerlink" title="通过反射操作对象的普通方法"></a>通过反射操作对象的普通方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一步：创建对象(可以new对象也可以通过反射创建对象，这不是重点)*/</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二步：通过反射获取Method对象，并通过method对象执行person对象的setName(String name)方法*/</span></span><br><span class="line"><span class="comment">//1.获取字节码对象</span></span><br><span class="line">Class clazz = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//2.获取属性/构造方法/成员方法</span></span><br><span class="line">Method setName = clazz.getDeclaredMethod(<span class="string">"setName"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.设置访问权限</span></span><br><span class="line">setName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//4.执行person对象的setName方法</span></span><br><span class="line">setName.invoke(person,<span class="string">"李四"</span>);</span><br><span class="line">System.out.println(person);</span><br></pre></td></tr></table></figure><h1 id="反射案例"><a href="#反射案例" class="headerlink" title="反射案例"></a>反射案例</h1><p>通过反射执行配置文件中指定类的指定方法</p><p>prop.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className=cn.itcast.domain.Student</span><br><span class="line">methodName=sleep</span><br></pre></td></tr></table></figure><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//表示将src目录下的config.properties中的数据加载到当前集合中</span></span><br><span class="line">properties.load(反射的应用真实案例.class.getClassLoader().getResourceAsStream("config.properties"));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*目的：执行className这个类中methodName这个方法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步：根据className的值创建对象className的值：cn.itcast.domain.Cat</span></span><br><span class="line">String className = properties.getProperty(<span class="string">"className"</span>);</span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：执行对应的方法</span></span><br><span class="line">String methodName = properties.getProperty(<span class="string">"methodName"</span>);<span class="comment">//methodName的值eat</span></span><br><span class="line">Method method = clazz.getDeclaredMethod(methodName);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(obj);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java核心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中双击Shift 弹出search everywhere</title>
      <link href="/2019/11/17/IDEA/%E4%BF%AE%E6%94%B9Idea%E5%BF%AB%E6%8D%B7%E9%94%AEDoubleShift/"/>
      <url>/2019/11/17/IDEA/%E4%BF%AE%E6%94%B9Idea%E5%BF%AB%E6%8D%B7%E9%94%AEDoubleShift/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>IDEA中双击Shift键快捷会弹出search everywhere</p><p>这个问题很困惑，因为这个功能很好用，查找什么很方便，but！ 我用了十年的百度/搜狗输入法，大家都知道输入法按shift中英文切换很方便，特别在写代码时候。。。所以就和这个double shift功能冲突了，经常会按两下shift 弹出个框，把代码写框里了。废话不多说上图，告诉你怎么取消此功能，在修改成其他快捷键。</p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><blockquote><p>首先取消该功能：  打开IDE  按快捷键 Ctrl+Shift+A  输入 registry 进入软件注册表，</p></blockquote><p><img src="/" alt="1" class="lazyload" data-src="%E4%BF%AE%E6%94%B9Idea%E5%BF%AB%E6%8D%B7%E9%94%AEDoubleShift/1.png"></p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>进入之后找到 ide.suppress.double.click.handler 打上勾 ，然后直接点右下角 close,不要点restory defaults(论英文的重要性！！！  我点错了好几次才知道那叫恢复默认！！！)  到此–&gt;取消OK！</p><p><img src="/" alt="1" class="lazyload" data-src="%E4%BF%AE%E6%94%B9Idea%E5%BF%AB%E6%8D%B7%E9%94%AEDoubleShift/2.png"></p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>设置快捷键  打开设置，找到keymap   ，找到search everywhere,右键第一个选项 然后根据喜好按键盘或者按组合键就会自动设置进去。</p><p><img src="/" alt="1" class="lazyload" data-src="%E4%BF%AE%E6%94%B9Idea%E5%BF%AB%E6%8D%B7%E9%94%AEDoubleShift/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.指数基金的挑选</title>
      <link href="/2019/10/12/%E7%90%86%E8%B4%A2/06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/"/>
      <url>/2019/10/12/%E7%90%86%E8%B4%A2/06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/</url>
      
        <content type="html"><![CDATA[<h1 id="指数是什么"><a href="#指数是什么" class="headerlink" title="指数是什么"></a>指数是什么</h1><p>指数其实就是一个<strong>选股规则</strong>，它是按照某个规则挑选出一篮子股票，并由专业机构通过复杂的计算后算出这一篮子股票的平均价格，然后用来反映市场上这类股票的价格水平。我们把这个平均价格称为指数点位，放在篮子里的这些股票，我们称他们是这只指数的成分股。</p><h1 id="指数基金是什么"><a href="#指数基金是什么" class="headerlink" title="指数基金是什么"></a>指数基金是什么</h1><p>指数基金，指的是跟踪特定的指数，并<strong>按照这个指数成分股的比例，买入同样的股票组合的基金。</strong></p><h1 id="A股市场的5个主要指数"><a href="#A股市场的5个主要指数" class="headerlink" title="A股市场的5个主要指数"></a>A股市场的5个主要指数</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>上证50指数、沪深300指数、重症500指数、创业板指数、红利指数</p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/1.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/2.png"></p><h2 id="为什么沪深300比中证500涨幅低"><a href="#为什么沪深300比中证500涨幅低" class="headerlink" title="为什么沪深300比中证500涨幅低"></a>为什么沪深300比中证500涨幅低</h2><p>可以把沪深300理解成班里的优等生，每次考试98分，想要提升1分都很困难。中证500理解成中等生，上升空间相对较大</p><h2 id="各个指数中包含的优质股票排名"><a href="#各个指数中包含的优质股票排名" class="headerlink" title="各个指数中包含的优质股票排名"></a>各个指数中包含的优质股票排名</h2><p>红利&gt;沪深300、上证50&gt;中证500&gt;创业板</p><h1 id="美股市场的2个主要指数"><a href="#美股市场的2个主要指数" class="headerlink" title="美股市场的2个主要指数"></a>美股市场的2个主要指数</h1><blockquote><p>美股指数可以对冲人民币贬值的风险</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/3.png"></p><h1 id="港股市场的2个主要指数"><a href="#港股市场的2个主要指数" class="headerlink" title="港股市场的2个主要指数"></a>港股市场的2个主要指数</h1><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/4.png"></p><h1 id="指数基金的分类"><a href="#指数基金的分类" class="headerlink" title="指数基金的分类"></a>指数基金的分类</h1><blockquote><p>常见的指数基金可以从两个维度分类</p></blockquote><h2 id="按指数基金是否通吃各个行业分类"><a href="#按指数基金是否通吃各个行业分类" class="headerlink" title="按指数基金是否通吃各个行业分类"></a>按指数基金是否通吃各个行业分类</h2><p>分为宽基指数基金和行业指数基金</p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/5.png"></p><p>宽基指数和行业指数的区别</p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/6.png"></p><h2 id="按复制方式分类"><a href="#按复制方式分类" class="headerlink" title="按复制方式分类"></a>按复制方式分类</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/7.png"></p><p>买指数基金的目的就是因为其被动，个人不推荐增强型指数基金。</p><h1 id="指数基金的优点"><a href="#指数基金的优点" class="headerlink" title="指数基金的优点"></a>指数基金的优点</h1><h2 id="灭绝人性"><a href="#灭绝人性" class="headerlink" title="灭绝人性"></a>灭绝人性</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/8.png"></p><h2 id="永垂不朽"><a href="#永垂不朽" class="headerlink" title="永垂不朽"></a>永垂不朽</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/9.png"></p><h2 id="笑道最后"><a href="#笑道最后" class="headerlink" title="笑道最后"></a>笑道最后</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/10.png"></p><h1 id="指数基金一定安全吗"><a href="#指数基金一定安全吗" class="headerlink" title="指数基金一定安全吗"></a>指数基金一定安全吗</h1><h2 id="指数基金的风险"><a href="#指数基金的风险" class="headerlink" title="指数基金的风险"></a>指数基金的风险</h2><p>1.指数基金本质是股票型基金，它依然存在风险</p><p>2.虽然指数基金是复制和跟踪指数，来调整篮子里面的股票组合。但是基金经理如果复制的有偏差，货没有及时跟着指数调整，也会带来收益方面的误差风险</p><p>3.选择的指数基金规模小或者运作历史不长久的话，也会有风险</p><h2 id="查看指数基金的误差"><a href="#查看指数基金的误差" class="headerlink" title="查看指数基金的误差"></a>查看指数基金的误差</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/11.png"></p><h1 id="指数基金的筛选方法"><a href="#指数基金的筛选方法" class="headerlink" title="指数基金的筛选方法"></a>指数基金的筛选方法</h1><h2 id="第一步、确定要投资的指数"><a href="#第一步、确定要投资的指数" class="headerlink" title="第一步、确定要投资的指数"></a>第一步、确定要投资的指数</h2><p>选择指数基金的本质就是要选择指数，指数本身没有好坏之分，只有合适与否。对于大部分投资者来说，选择一个代表性强、、主流的指数即可。</p><p>只要指数本事神长期向上，就可以纳入投资范围。选择指数还可以结合自己的偏好或根据收益预期来决定。</p><p>如果想要获得市场平均收益，就可以选择代表A股的沪深300指数，建议<strong>最好选择宽基指数</strong>，原因见上文</p><h2 id="第二步、精选基金公司"><a href="#第二步、精选基金公司" class="headerlink" title="第二步、精选基金公司"></a>第二步、精选基金公司</h2><p>基金公司的实力对指数基金的表现起着至关重要的作用。</p><p>在2015年股灾的时候，很多股票连续跌停，那个时候很多投资者手里拿着股票想卖都卖不出去，大量的投资人要赎回基金，而基金公司在应对大额赎回上的表现差距非常大，TOP10的基金公司无论实例还是经验都胜过小公司。</p><p>如何判断基金公司有没有实力呢？公司规模是一个重要的衡量指标，目前国内一般<strong>资金规模超1000亿的基金公司</strong>实力都不可小觑。</p><h2 id="第三步、锁定指数基金"><a href="#第三步、锁定指数基金" class="headerlink" title="第三步、锁定指数基金"></a>第三步、锁定指数基金</h2><p><strong>1.跟踪误差率</strong></p><p>指数基金的投资目标就是为了完全复制指数，获得一个和指数一样的投资收益，那么判断一个指数基金的好坏，关键并不是看他的收益率，而是跟踪误差率，误差率低说明基金运作水平高</p><p><strong>2.基金规模</strong></p><p>规模越大，流动性越强的基金越好。一个指数基金规模较小，清盘的概率就比较大。</p><p><strong>3.成立年限长</strong></p><p>最好选择超过3年的，小于1年的不要考虑</p><p><strong>4.费用成本低</strong></p><p>费用包括管理费，托管费、申购费、赎回费，虽然大部分的基金费用为2~3%，看起来不是很大，但是在长期复利的威力下，就会对投资收益产生很大的影响。场内基金远低于场外基金，细节不解释了。</p><h1 id="指数基金的筛选实操"><a href="#指数基金的筛选实操" class="headerlink" title="指数基金的筛选实操"></a>指数基金的筛选实操</h1><blockquote><p>这里以上证50为例</p></blockquote><h2 id="第一步、首页点击基金公司"><a href="#第一步、首页点击基金公司" class="headerlink" title="第一步、首页点击基金公司"></a>第一步、首页点击基金公司</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/12.png"></p><h2 id="第二步、通过查询天天基金网，筛选出规模超千亿的基金公司"><a href="#第二步、通过查询天天基金网，筛选出规模超千亿的基金公司" class="headerlink" title="第二步、通过查询天天基金网，筛选出规模超千亿的基金公司"></a>第二步、通过查询天天基金网，筛选出规模超千亿的基金公司</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/13.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/15.png"></p><h2 id="第三步、搜索在天天基金网首页查询要投资的指数"><a href="#第三步、搜索在天天基金网首页查询要投资的指数" class="headerlink" title="第三步、搜索在天天基金网首页查询要投资的指数"></a>第三步、搜索在天天基金网首页查询要投资的指数</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/14.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/16.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/17.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/18.png"></p><h2 id="第四步、查找基金信息进行进一步筛选"><a href="#第四步、查找基金信息进行进一步筛选" class="headerlink" title="第四步、查找基金信息进行进一步筛选"></a>第四步、查找基金信息进行进一步筛选</h2><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/19.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/20.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/21.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/22.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/23.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/24.png"></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/25.png"></p><h1 id="指数基金的估值指标"><a href="#指数基金的估值指标" class="headerlink" title="指数基金的估值指标"></a>指数基金的估值指标</h1><blockquote><p>如果让你去超市买水果，相信你一定会先问问水果的价格，价格合理才买，价格贵的离谱就下次再买，万一撞大运价格低就可以多买点。</p><p>指数基金也是一样，在买入之前要看看价格贵不贵，在便宜的时候买才更划算</p></blockquote><h2 id="看大盘点数靠谱吗"><a href="#看大盘点数靠谱吗" class="headerlink" title="看大盘点数靠谱吗"></a>看大盘点数靠谱吗</h2><p>不准确，因为指数是长期向上的，以香港的恒生指数为例，1964年只有100点，而现在23000多点</p><p>不同的指数不好对比。有的指数几万点是低估，有些指数5000点就是高估。</p><p><strong>不靠谱</strong></p><h2 id="看市盈率PE靠谱吗"><a href="#看市盈率PE靠谱吗" class="headerlink" title="看市盈率PE靠谱吗"></a>看市盈率PE靠谱吗</h2><p>这个指标体现的是这笔投资到底花多久才能拿回来，计算公式=市值/净利润，简单理解就是看一只股票的价格，相比它的盈利能力，是不是够便宜。</p><p>所以，可以通过市盈率初步判断一家公司是贵还是便宜，市盈率越低，公司越便宜，市盈率越好，公司越贵，但不能作为唯一指标。</p><p><strong>不靠谱</strong></p><p><img src="/" alt="" class="lazyload" data-src="./06.%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/26.png"></p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.混合基金的挑选</title>
      <link href="/2019/10/11/%E7%90%86%E8%B4%A2/05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/"/>
      <url>/2019/10/11/%E7%90%86%E8%B4%A2/05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/</url>
      
        <content type="html"><![CDATA[<h1 id="混合型基金是什么"><a href="#混合型基金是什么" class="headerlink" title="混合型基金是什么"></a>混合型基金是什么</h1><p>投资选择多，可以同时配置股票、债券、货币等，而且配置比例灵活，简介实现了分散投资，降低了风险</p><p>混合基金通过资产配置，简单来说就是进行一定比例的组合，以达到收益率最大、风险最小的目的。有时候表现好的话，混合基金的收益还会比股票基金高。</p><h1 id="挑选混合基金的筛选指标"><a href="#挑选混合基金的筛选指标" class="headerlink" title="挑选混合基金的筛选指标"></a>挑选混合基金的筛选指标</h1><p>1.基金的业绩</p><p>2.基金规模</p><p>3.基金成立时间</p><p>4.资产配置比例</p><p>5.基金公司盈利能力</p><p>6.基金经理选股择时能力</p><p>7.手续费</p><h1 id="挑选债券基金实操"><a href="#挑选债券基金实操" class="headerlink" title="挑选债券基金实操"></a>挑选债券基金实操</h1><h2 id="1-百度搜索天天基金"><a href="#1-百度搜索天天基金" class="headerlink" title="1.百度搜索天天基金"></a>1.百度搜索天天基金</h2><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/1.png"></p><h2 id="2-找到基金筛选"><a href="#2-找到基金筛选" class="headerlink" title="2.找到基金筛选"></a>2.找到基金筛选</h2><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/2.png"></p><h2 id="3-选择混合型-基金业绩近三年前100名"><a href="#3-选择混合型-基金业绩近三年前100名" class="headerlink" title="3.选择混合型,基金业绩近三年前100名"></a>3.选择混合型,基金业绩近三年前100名</h2><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/3.png"></p><h2 id="4-按照近三年降序排序"><a href="#4-按照近三年降序排序" class="headerlink" title="4.按照近三年降序排序"></a>4.按照近三年降序排序</h2><p>为什么是3年呢，过去1-2年的收益率可能是运气，但是3-5年都能保持不错收益率的基金，那大概率就是有一定实力了。</p><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/4.png"></p><h2 id="5-按照上文提到的筛选指标进行筛选"><a href="#5-按照上文提到的筛选指标进行筛选" class="headerlink" title="5.按照上文提到的筛选指标进行筛选"></a>5.按照上文提到的筛选指标进行筛选</h2><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/5.png"></p><p>1.基金的业绩(收益率)</p><p>看总收益率（成立来收益率），如果成立时间越长，收益率的有效性就越大，而这个总收益率当然也是需要衡量的一个标准。</p><p>2.基金规模</p><p>基金规模不宜过小也不宜过大。太小的基金配置的资源少，风险也比较大；太大的基金趋于保守，收益可能也不高。在选择基金的时候，规模适中即可，建议在2-100亿之间。</p><p>3.成立时间</p><p>至少3年</p><p>4.资产配置比例</p><p>了解这只基金股票和债券的占比情况，这决定一只基金的收益和风险情况</p><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/6.png"></p><p>滚动到页面下面会发现资产配置一项</p><p>5.基金公司整体盈利能力</p><p><img src="/" alt="" class="lazyload" data-src="./05.%E6%B7%B7%E5%90%88%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/7.png"></p><p>6.基金经理的更换频率及选股择时能力</p><p>7.手续费</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.债券基金的挑选</title>
      <link href="/2019/10/11/%E7%90%86%E8%B4%A2/04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/"/>
      <url>/2019/10/11/%E7%90%86%E8%B4%A2/04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>证券市场上债券无数，要从中选出值得投资的好债券需要投资者话费大量的时间和精力。既然基金的特点之一就是专家投资，那么有基金经理和他的团队来帮你投资省心省力。</p><p>个人投资者资金有限，一方面在参与债券市场的时候会受到一些限制；另一方面，个人投资者很难做到分散投资，降低风险。债券基金则具备资金上的有事，能选择不同种类的债券进行分散投资，降低风险。获得比较稳定的收益</p><h1 id="什么资金适合投资债券基金"><a href="#什么资金适合投资债券基金" class="headerlink" title="什么资金适合投资债券基金"></a>什么资金适合投资债券基金</h1><p>债券基金没有货币基金灵活，更适合投资半年以内或者一年以内用不到的钱。</p><h1 id="挑选债券基金参考的五个标准"><a href="#挑选债券基金参考的五个标准" class="headerlink" title="挑选债券基金参考的五个标准"></a>挑选债券基金参考的五个标准</h1><p>1.成立时间，3-5年以上</p><p>2.收益率 看累计三年以上的收益率，优先选择收益率高的</p><p>3.规模，和货币基金一样越大越好</p><p>4.费率，和货币基金一样越低越好</p><p>5.基金经理是否频繁更换，更换频率越低越好</p><h1 id="挑选债券基金实操"><a href="#挑选债券基金实操" class="headerlink" title="挑选债券基金实操"></a>挑选债券基金实操</h1><h2 id="1-百度搜索天天基金"><a href="#1-百度搜索天天基金" class="headerlink" title="1.百度搜索天天基金"></a>1.百度搜索天天基金</h2><p><img src="/" alt="" class="lazyload" data-src="./04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/1.png"></p><h2 id="2-找到基金筛选"><a href="#2-找到基金筛选" class="headerlink" title="2.找到基金筛选"></a>2.找到基金筛选</h2><p><img src="/" alt="" class="lazyload" data-src="./04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/2.png"></p><h2 id="3-选择债券型，成立年限大于7"><a href="#3-选择债券型，成立年限大于7" class="headerlink" title="3.选择债券型，成立年限大于7"></a>3.选择债券型，成立年限大于7</h2><p>筛选条件3-5年以上，由于没有大于3-5年选项，因此挑年限长的为标准</p><p><img src="/" alt="" class="lazyload" data-src="./04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/3.png"></p><h2 id="4-按照近三年降序排序，选取前10分析"><a href="#4-按照近三年降序排序，选取前10分析" class="headerlink" title="4.按照近三年降序排序，选取前10分析"></a>4.按照近三年降序排序，选取前10分析</h2><p><img src="/" alt="" class="lazyload" data-src="./04.%E5%80%BA%E5%88%B8%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/4.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>货币基金一般投资一年期内的债券，债券基金投资一年以上的债券，借款时间更长，风险就越高，利息就越高。所以收益要大于货币基金。债券基金的收益率可达5%~6%左右，相比于货币基金的3%，明显更高一些</p><p>债券基金主要投资债权类资产，整体来看仍算是收益稳定、风险较低的。</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.货币基金的挑选</title>
      <link href="/2019/10/10/%E7%90%86%E8%B4%A2/03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/"/>
      <url>/2019/10/10/%E7%90%86%E8%B4%A2/03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是货币基金"><a href="#什么是货币基金" class="headerlink" title="什么是货币基金"></a>什么是货币基金</h1><p>用起来像货币一样方便的基金</p><p><strong>便利性</strong>特点：货币基金与活期存款相当，随用随取</p><p><strong>收益性</strong>特点：大多数货基收益率超过银行一年期定期存款</p><h1 id="货币基金保本吗"><a href="#货币基金保本吗" class="headerlink" title="货币基金保本吗"></a>货币基金保本吗</h1><p><strong>不承诺保本，可视为保本</strong></p><p>主要投资去向是银行存款。而对其他投资则尽量分散，所以手受单一时间的影响小。</p><p>基金公司为自己声誉考虑，可能会抗下投资损失(目前仅仅在2006年某天出现过，损失并且也不大，相当于某日的收益)。</p><h1 id="好货币基金长什么样"><a href="#好货币基金长什么样" class="headerlink" title="好货币基金长什么样"></a>好货币基金长什么样</h1><h2 id="挑选货币基金应该关注什么"><a href="#挑选货币基金应该关注什么" class="headerlink" title="挑选货币基金应该关注什么"></a>挑选货币基金应该关注什么</h2><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/3.png"></p><p>1.【首要关注】流动性(别等到急用钱卡壳了)</p><p>货基的正常流程是当日赎回，资金要等到下个<strong>交易日</strong>到帐</p><p>许多基金公司为了方便客户，通过自己或第三方垫钱的方式，让客户提前拿到资金。</p><p><strong>关注点</strong>：</p><p>a.快速赎回到账时间(1秒，2小时)。</p><p>b.快速赎回的总额度(总额度是否还剩余，别人赎回了，不够自己赎回)。</p><p>c.单账户最高额度</p><p>2.【适当关注】收益性(买入前适当关注，买入后无需关注，浪费精力)</p><p>3.【几乎无需关注】风险性(不必要花很多时间去研究风险，实在担心风险，可以分散持有多只货币基金)</p><h2 id="一款好货基张什么样"><a href="#一款好货基张什么样" class="headerlink" title="一款好货基张什么样"></a>一款好货基张什么样</h2><p>全年365天24小时无休，急用钱时立马到账，最好手机就能操作，收益要比银行存款高。。。等待，还有<strong>不能被黑客盗走！！</strong></p><h2 id="货基也要注意防盗"><a href="#货基也要注意防盗" class="headerlink" title="货基也要注意防盗"></a>货基也要注意防盗</h2><p>很多人不敢在货基中存太多的钱，就是担心网络安全。</p><p><strong>推荐</strong>：可选择“<strong>闭环型</strong>”货基。不能转账，不能购物，不能缴费。只能提现到自己相同身份证的银行卡，只能对自己相同身份证的信用卡还款</p><h1 id="挑选货币基金实操"><a href="#挑选货币基金实操" class="headerlink" title="挑选货币基金实操"></a>挑选货币基金实操</h1><p>第一步：百度搜索关键字:”基金公司名单”</p><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/2.png"></p><p>第二步：查看基金规模，按照规模排序，有限选择规模大的。</p><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/4.png"></p><p>第三步：打开基金公司官网 找到货币基金</p><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/5.png"></p><p>第四步：查看关注点是否满足条件(重点关注流动性)，T+0快速取回，手机现金宝，一分钱起存..</p><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/6.png"></p><p>第五步：查看货基的总规模，总规模越大流动性越好</p><p>第六步：完整注册和银行卡绑定，一步一步绑定即可。</p><p>提示：最好用的一般是基金公司的旗舰产品(官网打广告的)。建议直接从基金公司官网购买，省去第三方流程，资金到账速度更快。</p><h1 id="两个重要收益率"><a href="#两个重要收益率" class="headerlink" title="两个重要收益率"></a>两个重要收益率</h1><p>万份收益：上一个交易日每一万份能拿到多少收益</p><p>七日年后收益率：过去七天的收益加总，再年化所得的收益率</p><p><img src="/" alt="" class="lazyload" data-src="./03.%E8%B4%A7%E5%B8%81%E5%9F%BA%E9%87%91%E7%9A%84%E6%8C%91%E9%80%89/1.png"></p><p>周四收益率高，周五、周末低，所以取7天平均值。</p><h1 id="货基还可与信用卡配合使用"><a href="#货基还可与信用卡配合使用" class="headerlink" title="货基还可与信用卡配合使用"></a>货基还可与信用卡配合使用</h1><p>平时把钱放在货基里，在消费时，尽可能少使用现金，优先使用信用卡付款</p><p>信用卡还款日临近，再使用货基还款，最快1秒到帐，部分银行还支持电子账单自动还款</p><p>相当于：<strong>套取了信用卡的免息期利息</strong></p><h1 id="一周中在周几买入合适"><a href="#一周中在周几买入合适" class="headerlink" title="一周中在周几买入合适"></a>一周中在周几买入合适</h1><p>周1到周四，最迟周四，周五开始计算收益，还可以享受周末的收益。如果周五买入下周一才计算收益。周末有2天空档期。</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历-精简版</title>
      <link href="/2019/10/08/%E7%AE%80%E5%8E%86/%E7%AE%80%E5%8E%86-%E7%B2%BE%E7%AE%80%E7%89%88/%E7%AE%80%E5%8E%86-%E7%B2%BE%E7%AE%80%E7%89%88/"/>
      <url>/2019/10/08/%E7%AE%80%E5%8E%86/%E7%AE%80%E5%8E%86-%E7%B2%BE%E7%AE%80%E7%89%88/%E7%AE%80%E5%8E%86-%E7%B2%BE%E7%AE%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎来到我的博客，点击此处输入密码后访问" />    <label for="pass">欢迎来到我的博客，点击此处输入密码后访问</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简历-精简版</title>
      <link href="/2019/10/08/%E7%AE%80%E5%8E%86/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98-/"/>
      <url>/2019/10/08/%E7%AE%80%E5%8E%86/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98-/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎来到我的博客，点击此处输入密码后访问" />    <label for="pass">欢迎来到我的博客，点击此处输入密码后访问</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19qnzZCP9oF3orxs8SyyDx75o9lDIo/5r1bxhjmDtgHuw8pInJ6gDDc6RIq5ks6HZPtWLTOV4fszC3OYBCDyPOPD2ZnzljiS/JfzpznkC5gL4YiozKR/8vwrcEnuJHZ4IgM/HERcoFUKga61+6QdPi+JGNdEBWvf20ijW6m6KdoOurJdvBHH/KoZiyF0lCn6zaC59/+LDumA0+m0JqI7ioJ1I7hlrtQH0newUzNAtMJZ7x6Z9ji4w46XpJw+RUY6TaZ/oDGEa+uhVldh+1ODmldis92NyYvofKFeoNlxq8IMeGwSEsTbnBAxYuE0b1gs0H2PJL4ljIlxm0j5G4/l4RWvE26v0DQvHj3q5w1UVRZXfgig5Qr71EQ0jKzZKJ5eP/UEb0XF3lqUm1O17svHiO4QpbJcKm1c+XuMK46esNXi6nYDyj6V9jTZ9UIYNJSK5it6dNypHj0eQpPzysCdX85dbtVtFQFlZKAlTECEEPoQTqAoeeqiuhI5TXe4atXJXnnuI69H9O+A4hS6jz1saNL9nQq2qKToNmlHVB3G17GlnBE+v67gUMfFkVUXCupKOej3gbWvMPmqRHP5lHk2UE/LEeEuY7TlOnd1G26IbfkUMFiJVIlw3wqys22mmfERcw06IT4yeI4BWfQz10BX0kPg3DmKvgrfZRL3r1ww8rmfglsOKOyXQ9v/8gogJHcwceuN+fj7o9zCjgRJRs7gUaXWcz6WsZiTaYIMP472l7GNJZwn0VI4y4ILK8mzdUUvpDtdQspGaSJhhsKedSxeEugwRBAvPy39EWMuNChdSxZrFHkAB9NxUfg0jx/vh6jh142MKH1we0k8rXR629L6qJcoEpxeNXxBkORiO2Fi1QxLHAaIVbDTaIuUp0GHXRdTyfYDgq3ZHFa+ZDy74WvK7zYlS4rxY4xajBqe+7Nqb+BWgst/lwibnkj3w2TMcrbjnjqIps2KAgEiFygWcXjYGzp+vYKFiA0mzIqqWKaIvfWvV0FH0FhSaTeXXQscSEH6Ar2bEcNGsLOFryGI/bWnbF5E43OchwUzJ/xEDJR9ARZLykoQ3uUpyoGI6/5+3eorczC24jnFlQEDiXaMlvX34OLxQBu1TlKPh88GR90MByHup63LaNzvzJPGPZX7NQuKw11zbxAiTfJCZDhkP73zL4pI5CGQUcx4AuFojzpJDVtm+qLQaaKF1y7H3CQTsilhoqYbddgMBzkR5SQbt7jtjMvDKrB66AlKCKr2OeO5ic2miKPAPOnVx2TWw87/2h3sPjTOkMW54FIRm12GtSP+3UF0Ctfakk9uKLDYO4zJ1kVkSCEs4LL3hsWw3PLe6iMkDpG9inzCxRiIRE3TmJCnhZqhaITTia3q34HT+2UCmvZOndaqUerOx7GSL9uFmWKGthzuK3S2WWrL/YyMxRr2dYLhMrOKvkamp+/hvdNqG5J8g1wuyUn/xGLcFd5H2c08QAr1bB9JKbDBtDz3/nPgEXts+dFb2V5basCUKJxhAt2qhYQq7lDGe9pHNG3JTFauwWjgHXql7nGo4su7JuvLhqeMuaE0d6adUoQpvxhJQjgihMn2O13+8wQ1GZOacRPwf7TXQHAY75v1yklHNRJ/NpX1QKl4Tgx1RdF4fRTUbAPREbWGzXzJm6XuwTOmSY6F9gU8lIrM6mVLzv+9np6G4wHoR821fQbsXHHdZCUR1/LEE0Fpvz3gXH0gz9r5ISrbSaxTqeo0iHLao6NmldwhiXwOIbWVOsY8x34SWXqKmK5Zgt78OBD9YzWbmRvvoK2XjX1FTAd5gKHo0F8UpLu/uB2xHDKP0suNQC+vpSYwXSjCoSzM1bJTVLj9XIWqC7Ye7PochXFBa8aGPgDq22BNYZyKW9VFLtf1lvT1yyKMA1dVuqfONZvS11DRa6o16uIj1LVRbfxzNYqiHUgexJ94Ab/79C3xMUTlztmrecXHbhccA8I5VR7M6jzeGw51Q9gzkviArenTtaUq5ryuj0nJN4rsqkUDwaQE7eWKpXFok8fOrL6Q24o3SV44w+nqbhUaxFh2wyavgEu8fFzBrlncPvmJ2o825ELTT3wmRGeXy63g4ytqvBsiYMJ16UqSSahr9UU4hinpUNNm5Ynmd/Nez7zVTOTf+f6oohiU2w9Oh71OXs+Q0BwsWGwIYnCuS0MZoBLfJ6n+5V6rnJv9BFbDBQ4zhwER0DW+LDmbOZrubU8HpMjxiBegQJshjXHobW6b+swgigfb0Pg+Cm/CqvGAx2sKq8Wgrdpt3V0+auBo214i1utvtZl8i0Qw7pCxrLwtuWIwL89CYCPThf33XdmZuBfwK7zw4VsmUiTEPUK3pxDtc3UOnZx6kzJhDyUXQBRnCbfbOgOHrWfUMCs2MpQO4/JrzYT8VtkNt8+iA/79sLlk4dnqVpCvHLMs8SDvv8vIk+49+sLdPXbZ0hit5wx2hxlh/uZaiLSoX2VeiFIxS6XWdcPaHnFn6HkG0aZeyPM63EtRk3nhtvtByN5dzQRWmjcYGrem4BjJi496JY9vEqtvuXKNo0b3QVTjbgvfO2/7g4O9T91Qwf85kbwg70SLLsuYacPCZaWOm65v39P5bBIYFmtM5QTv7aCO4bXaADH0acW/KZ/kbIOyvxk12zjv0SfP8ewejk6QiJ2VSK2KoQkDAyyDuHkTOzHcjzl182Yy52oh8mIhXApTQXAnm9nACE59BrCoI7Warg/XUwwPQGv0dfBtszl06pBbmXzz4XFf3wPQh9isTWyni6MF4r3AsWYENEjGyLx0DSVvb+d4BLuj+p5nl0CGt4VYa90Ysjwm/xOgsceYS79Gb+WuKI9E5h9enBacj6FxrX3AsH+xIwUz7wS0RqyyDWEp76fNVAGmbvS0mJD3bKTlgomFu7Dwo7Iii80rkV0h8PYFe6Vl9YTV00koUN/IqjhlLsX0NT3XftbQHgYscvgVsVV+pMHoLxTNHjo7Njk1xo1PVHr1nAT+Czb6USbcH5uMIwTAACoY84QShvh5rR7G+qcZFuXntkUSgfWF4XyHFxF/tsjtEyVtKjV9gH9Lg+aPo5ypKTZtedXGr8BjNaA7zYlPi3Of5TzeWwX6S34SYEJ9YauWqxuPoxukcTF+VMZO/3ZeQOks+8vSBQX/b583yKaSHqxV8B0U8nE56WNfkf36nike5aLLobDflnUsxY8fp6kAfYgjlMHbHNbDTEoSTa3h61i6e/2n9Nb36nj1767h4SnBRdaPjkkMmmw5crn85TIA8qf0yZZuZiAmYEcGAWaD+7kRieuEqcF5IwIOLZ9/zytYEPFHqNqBdM7xpO627g63Z7y06AjpzDiA8+pKthunASTOm2Vpq0VTqYtn1FVqls00FW/T8H/oTgMvnJpAS6q6KbVIN+rDw7dt4o1nFvZ0Ka80rrPzHrbuSLWz+upMNpiE1iE2LTwgDQzJFdkTlHEwfdAPCH1PG5bKSO1wK9YpVr8gVIjNg+1papWycreyaHYtAk6neUYW98e3wyTLG+CWwF21zeD8niv5dG+rkT6BCdfzuW/beLB6w7deumwnukxqmqNjTygtz62IktX4Yjp/9XnqjbE99rbDlvmRuMtovj92ypsDf9jRoCsiZk/D5grNyYz6wg7LoNM+lGB0I5+C5v5KWwis9ZXbI8vKuNuiKIntPemmn3bmWcnmEyP5yi/X0Zx8TnLlN8KSLd7ZTtqiZWYa1XeoWQN9i5IkLvEHqoU7QsmT7RHN1AN8ltZ4cs5wKTbTYs9aNTOGEch2638Aiz7XyPiibfxlTj+cwDH6zwHkwFUBw+5xjvwCQMlZL4479OrqOqm5+9nOjZujh7iFO4HvSRuc5OnTvqQ8nJKLa1rCwtfFvOYUxdJbrfEEnVViBiLGmV9pB5umkVr2pDSnerlvICBJoi9icp4YFUJ0eykJuR2+SsA0L30O89qkofiVERAoq+GM7RXF5YFCsS0yWWgCWACu11eDkE+kjpuVlsWIPph9TSBk1Y5tG3+6rm8ygIsahDe5BkRWgyisp7eOFK2zBaKKoUlbX+W0vLrTZRjMeRTRbCibToqrIXAMdAkpeYNLG6WI1zC8QNitcv57MQNDtFHcpobgtEtbkWIl7oCfK2nPgzppcApjtmQjJlxuCo34WVNrra5L4cZ++SmHhKzQ+HnHlxe833l3K428nHfK7xNPa1krND3RltMPpqiPkaSP+t0oJ4vQM15+49Aqw6gmPlBeFQ2WJ3ljAkOYfHAt+khRyTg+61AhxzcO6PvtQDtkCJ/DUGiGDc4z+dQD3dUpp9faU3I2MEEOseDLlGaC8USWxbigDlzkMuBJNa/N3R596Sy2lXYnQ3tRYqQx5PzR5eTAQ/ov6+CaREUBMvUcH5MmU2b8/LqhVRNJ3Cno60BgjLNwPhN9rhzhEc2xeEWb/X6GgihbZAoTkO8JFuHRdtbT6aOAC7Hoi9isZogKXGHdq7K8z6Jh8vIQB/vkg2yTgWBTuGKDWixSMeZzP5OC1gZou0VUfuhZ6ByI3dQiCe0clQ3UhvmSHd5a/2QM0IGuxAcOiabQ3RwjBfNcEykGHrlBzKLBIHszZK11lcW5ymlPVmTmWB1hEyhhWwNRdwkQ5Zh+dghU48uO2W+OQkdah5lvraMsH28MdJyTJLCFCqyFnhJ8HOgEwggsdic0/jpTPgi2qYoVw0JXCD51O58wM25qmvXoVcQFXIniEoHoD2DYsxoIuaFDVmibfsJC83eGHh5QCZ3wh6zHn05KIA2hJQYtzfR2ILC+9BfXjI1TirZ0OB1dsAZdP8ji3UApG7Wjm8eZLALhSzA8oz+B6B8iBosMHxmzOGurfueSyiy9HYti9mzCbrkTuDoF1g52RsP2wwRZPCMQI5D5wxK8NNBIUwpxllMtzhwzX59+WmnYwTJIv1trFEWqgihE39aXFuyeCPKlI5SOETg7NhY/3DQtMJh1U2JBrJPRVjQKHs62HDj3ZvIBiKZq/clMNpZ1fIdgG7j+0F2pioXmBdTyNthjag7kHOUTx1ECT0ETW6UIuXtgGGzQgrsiuN0OwG+hAhlJ7bp02fQro2Gnnsa/1M7hcZpdHqcmXsbAEyat7aa+jQU309RnRMPhOUjgx3j2YJq+YT8ijlrln3Cz+uyYdgaWPLwAtc1SkOkLXPK1q6OaTvGE9TCptU0g4VQjgxSYPXlUCJ6W4wTZshyVcCWbsgmYxyDMkBLWVl0wE/gGAeV8KvVLJLwQ3xd3IUyKopauMQIheMTarkPuLrj2DEGzn9DNaGu26Ym/bCtd8gAcygVMx0hk7rp2/Bx24IpBxqgUTGEMp3SDb4eDbFOcRuqxCWzqIvGg00YRmYTNWfX8bpuVXcFqxJ2oUeZlY/TkBqJLoXv5osHzWLQTzadphe9HnPy+MomssB6Bt4T3v+NS4ymuyNaCLxwmtDzrFfYqYFb8+XZgNCIOfixxn/K9V9qBLuzOS9HaGdFxjTy1t42PyRoM+8Z7Mm93G5NW8mgJgd+rnaMMZnZDmiFRJX2i3bycPuVJm6Gyra+J78FRuh6q/L8ua9ivpF4FAvb0a7bHyoXpjergWARzkWNZOiHs/qiwtFGkr6qbBzPXJJR3hBW+sVlxGPan1IrytIlfb6AeBq25lrxQFvq1rNlGfOuZOhx8KOMxpKkP8qI/wf2cGMeUncllySX/+QTvo29AeHNZI3an0Fovf+rKCbWTbcgZAwX1DpH4fXY8Y5J6rCDEoto7TVqhxJVeAljSadrB+2QMJiR8zkV6BWqaJAwpMPqPIGbHKAzMCCOSHDpkmWMVyCzBPx/glIvXBPNEvKUsciDvptUMZMt2jdBmV3rgOL9swJjUOC1ZfBnArF1C9OmiU9V0Y/zSqTUXNYx7FByNG88PaTMPOALjj33FHOZuzA1cO5iApUCnz0QNVfuY/sQ+RhPJPkxbPJk549RnMTbvZfyzBhGmu41q62bpTHuhSd/3KHhpvZgW2Iu98KviNdIVcRa1W5Bryufozn8vzGTI7QU0X5YQgwRJ2xYYlj8Bym+cRuITeMQCeZSxHESddCyGj5YjKi3aeXw5tigYjyg45MCjFCyMSbV4Fr6WAUiCU9LfUFxTujMqatgMkuG0+dlsyWIgePNAzuJDYqYYNWQ4KYfltfhk2L97UwG1pCd9Q4/+hA4EPO7IRYB+G6D0I0YZxHk0iXqhqXXaXQmmJUa0cTVGR0/lNQr4U3FotjexqMVpUdkKToYZ5ZKuJVEoPLqljue/HSOq6/q3cskpFfrrkBBG/tHyIGQOs027VQTYcCI6M7u+oUgJIh2DRPJx7kEVWnR0ITwJtjEcgF259E6itn94APicYVB8/5ugaoOhhma9qqTIg+nwLx403pkWATlvvAZVp49aLEd5VlXxhIWQpu9fvCKnGJOQfGEeS+ocY3dzefAfFUtbMxjl1gcnb4/INnP2ZEI7xSgaQlm//Zr8Rihh0S9NFq6lspIVfdfHl5pwWap9hvgVyFIleU3N7jFTh5oPmFEcqIY+AsWQOn+gOSQt8hpVNTrLcWPC7Qui3MR5afX7hq/QRqPjcgMyPnUApOsbnUSiLmmbwcsv9M4hsQ7kPKFrnF9cMXS0Jh+cKonz5w8TmLGtqZY1pPPDENw1B54fCGeDFBq3fOnPhgJpQgwRIs8rDHvL5fyEdsYvMazcaMxMuIcoogjZ387REnnsk8++c2I632nBF0oB9dy0hQAeYFacdyKXJiSavmU5mgllu7TC9FTGRdTGryAzjKBabFlGZ+8NCrRZezxBw8cJEbElKxKbafBL4+PvB6ARUJ5OELfHtHXgbt3LJ5Gothm4WYsKL1yBNQTCvpPc8v9nKmfn1mVMdTRnuc0BndzVySijVxjCmiWtJaXWR/4YRe2WNI82Xp2i0rHHVdh9kSRxK3x51YDEDwwwKM9HB8iDawGKMXT2QVzi0og845SVzhhwIubgxgKvvKWPxyljOuMBTBnRJZEHGwViOz3JKSe981/7JdsMPTJijgdoeW7lNQqWAfqngUpAGY+u0dYP1anqP3S/dPffWBNGl01OVXdkRsMOlzvCtBC+k+VB6aTUEbbO37XawULt6YWuv3Gh73gfR8CqYcMk35/Ed0ymRXr/vCpKcX2Ei1acrqiFndJ7Pw0UhJ8zjFOkFH4YEQPKmTyhNSKPGu3Z9TcDllRXbnLZv6VcujKB1wkKmZGo5rfKlemlv+NI6PKkYJ2T5Fglkf3aqdqdB+nRf7wgn1guy3stxcx0v69WJBK5lVvsC9P74pOg60EbC8xzktzqGyD/F0vTCv3Frz+eAk8I3olWtVX0BwLpCGBMNgxd6MZrDYrdMSANJByb1ifGiFr5zKJiG5bRJip2POJcFeKbgkP1P1MB3S7WH7kv1fwMp/S6rjNTuBoKw6mABeQGGqpVmMrwmkcYzK8fCDWuvDi/mxEY4OuRQH0VTepCJ3lHEUEw2ZPLVu41nT6xxE9651Gf+Mll6dBWYEegHdEbTu4iY8ET3LXejrsdJmnxIj3tNEkfBYBgzTwNWKSEYsWMmGWRq+U5G3bgPutx+i0OetpWPPIM8ca9650zsbWrpzpyFyw6+ePdadWsHktFTh/rFyft/d6sIlVuHKWd0fWPZ3YkS94PVYGLrqigAm+FQcHb/PiAjr20JgkKfm1swre3Xu2k5DiCO4KpTiTKJ53XHbKGCA5Dsat97GfGT9d7KtxB+b0zJUYUyCL8oyDO100hCWTCDn32yw9N6aHOZHVkFRUt2hHapZVNm6p4286tXY7nqeLn7Qi18eOefVVPg1JEP5FG2fWwRvKcl24gsPcHvF04iE/FbPYszVt9kAum1eGuky7mue1wJpwEDlPc9MzM9qKyXGmc3qXyPMJsOrZ43QiAVcqX5ShPOHwIQfPtJUzq1Syqyfs/Pn0/HpTZuWrOf5IkoqxCBYTisPBM4gwNDha4YNmrY0TLqqLdVrQLOxFg+Tilkjg8A7OY5DCRGZneF1CDmbsGJOUQXXdUR8pdGc1yqXi6jz76QlAxBKgam3G4C0rdBjjObFLaK5qTPGVLwm3fANKdEnM+hKhMumIfCY95dHeg5lGZ4E4Ab9neUGSj+m9/m+vvm4HogtgrVcwURHA32xx2Btqo8+cXNp9ML2ARpcSEhSvVo8f0bRWDEbiaDZ2ZwZyv999AewHT1+YJNKx6E6u0X9NOWYpakwJwN4kU7N93Qg43iTk2IpvlQ0GfxuDpEIwPzr0FTwJfX4xQHk6b+TTDBJew6tzzOLJX3t2jdQuFBLNEeiEK1xrgBdWjrUj2qY5omNd/XrQ/GO0PHbhFtJeY09wTmvXk4lis9QS0H8RaYlkhQZMOa90FfD0X+qD9iHwpk8fXNa4aNdfHD7kR8GXYZ91mmzifzpAN22pMost4Ddgr2zFOjoag3aNtWdca8rCwqGu/1XldVOvxucHP8t9wCeD0hD4pOMylu5UXqsXgRR4jmy1swtbIQkEEZXsus9WruXm7xLrwwH32i513jFT0fGPIqft4fNOpdk1g38PGt+6LvveD+xH2SHqEfEDg36gBJpkedaaWzb9mhkXw8K5735HEOoZM+18sZsARpowtzcUFGpResBg1qRmKrXvh+CWzzpehqvFOx9XmbM9FINScFs2ckk7kZi79nImo7lSCX85a4KUzs5TSF7LqYRV5mZl0WpYEScUiDiS1yB3dG4PhNBsSJXEdrZf2WKxXMlnpwpj+NeZ9CvpT5eCVPGRsVKKYOFQoPNKdmPi8Gff8Nf3+h4Mugla2QkXSaZL3ZiLWSoX8Se0azGRkdJxvx+CsHiHO7fiE+4znu0r6an/bC3+clR8EC64sC7AvC/YINPU6QLeyp0ub3Pb2PCr+etGVFVm92/vUhjdOUHX/UvUAvmRElf/ThJS5HP8tRtoH9LpM7Ftnusfv0AK8jec8gEVqS5jCtdRm6xoHww1vzETiffbDUq0Jja2tLpVbXTzObmNxsBdXaCFruBvYnnhEdqHJn+dWhwNor7VRv5Z8oiThmAmlMFk8mxfKRXyDreBKGWHNFaNzZ2V/GQadzv7CPQzM/DHVcKuNZRAYwVUmV4isXgl5fPAExrI8QEOH61yIdQg18rDDxFoCijwWVzws4m7m1GVml7g2UvtOxW9Obc/ZQ1An3aNqRjcVksG21gNs3bt3trwLKeVMAALaIGrzCk9AUbQIVwaYD2q8uMzhWKZm6eu+y1Mw2UNcGvkknPm7n6KlqkS4yVNF8B12oZ3ThXlSUS0sfZT2Wa/BfD8p6xgw0LJ2WkExmLl+PaYmuSakMNJgYiBpfTJlZSDHeBmCyk9fnzyMsE81yGVVy7pdhKo8fEEye2kvWUKewaIm5k1xcZKunaZDjxuir3x513n1N3ObUrsDWmr08S0Hb0bt6jAO9SfwzzvrKqazldn1aXl5OlVxjzizSIX/eY7MMpQ09kpY9u8daXjrTOtIPcGRzYPKms9rejjgNN/fCnvZUEmYZfZUtCVAtEvj0HbB0uZRJY+gs+on0v/xlaTEyy35TOc3lMI//s6QKGAwa90b8YxOs7AgwbFiVBMfwFSRgAqfW3M//WVWttuvtCS8FnK1qq0TQ9RQ00RzEwyLBqshgQuGQ6SGjoDC92qVBjC5wLk6Jj44Q1zQWRgZ1HhYw2ZePrTgYcfpXS10nbC7wuuaTebsu5+HmthFN2IdagafXfkifLtk88SyAMEgG4hNmqxtl97E8D4Rrkhx51u7SiwT5EWjqThUyb453SS01l7YWGF3IHlh1ZcF0RNB8/2B0jfXilUp1TKa9jkjrB87mLbyBCEYcZMw2m5k7u/TRgjPaFUEMa02zdaUcTT2RbSxs2TYs/gzNXFEwzhJ7Vuh3FwYDfMnrq5qbQ1TzUQtXwusEcblLG3OutXLszL0mGpy2LIItj7j8eWRLcpNKQJyMo3KESrfx5OrW2vHulTGzhOBm7F3h/V9GXHSbdGh6l02JYieBfu/C94LExox9c6PKSosFiiX9MlKNdvPwi8Hu9GaQoyyrdpvkHzFW4zKZr8dbNpfRH1gPjvRn7Y9zGoV9j01LOLFLF3Vrrf/TZZ9dhkKeobnMJo0PfqRbhZjYkpyx9TH0Yr4CLQo/lJVAHFUoi8ALKRL3K1PQPT/u9jgv8YMWVq0SFVtudwlyIM/jRbRhYLB73Qec7L88sRVNZCWo++NtRELdsGIDvrX91pb8G3A/KAdl/Krb3yIC0dxybKpCiludtICfIfP6imRCv8BtBRvH8qKWR+/dNRxLjXlvcbs9piHQeY2PViuGGXTUwtIBZvKFGoMTITRJmX+BLfzFmGIL6oGDfEkxJw8zWONqNOu1MdXP4jjgDRButPYvWQhPxkCRqVUjb8ETwEOTzWpavIzfwwAvtv+EFaT23k0exzz4QlsSCfb4DqdCJgVU3jcVp3gMheozHgCBO7B4zD857nQvAkrF7AG/45ypWJeATIwpUTFE6PZoJkfbHaFp4yb6wbNIRorrMJuxVq7lYyrl5oMy7JeENkdP4ckcEeIBbiLS2VU5JYdRyXCwQ0yoUSjSJnOXuDDJNWjh8ZRooA+VUUnTTB9NNmHPlpcrO0IgMaItKLOe4rOAUhDVEfv9JEUk8OVqL3E7BKtU9jvdtgzOK6n17wSXkY/l7cPdiKq0gNgHsuUeKRBQkaLSZz7MFYIZDfWf2SdUugEU6MwxtOtlBnP1j6EH3v7M9xTKfhsM7KB6sWhZ6bPzc3375E+xSt81AQmQWxIb/EPYsuaqcukhGWInOZZJ9vWYjTawPpXYGoCNzxseXWQKWigM5tC5hy9ptN5pX4j86t9hYrBSvVdwfDjNkPF2XaIpciObWFIgIs8PlfAuS2PaflFYd3yIbdQe77/qm9MZQnPh4DEV6BH5DuRt1R/esXF6ury1qBXOZbmA6ZGt12dHVcUAqauThcGbY7a4SomqYSAA8vupvVLkhXNXogByv77hIaryqhBXWhAYKzZb123QzTiMok3D9CbMhXWgSu5T+/0EwYA0de+PrGGQNe8FuEDBFc8F9SFLO4G/hOfmMi1OBG3mEJ2tW2IKvAfmtq2Z0OAmp1VRUu2a2buTEudmb66cm1EVmIdATvgrokTSFxGlyIH2AOXKtpl3+EqCRLw+aoqa4V+AnYClg8Ff90m7Np2ZT43xbeU2ANm85Cr2dzFqtWv0i6BSeroowrjqZOmOpy9Vnn99YC/1ujM7HFxneWQa7YX3ss9Ae8mReMT7kQv8O4xjQnqs5fxoROJWAR6G1TLRvzj078sCJXMIael/Jszqfuoglecq/+ZuBdrO2goZYnf6t6t9VJ2hgTguLN6T1dROeO0jJ8cCmtRib74nqJp5wz7jnBCUbxQKq9Mzy8D34cnHz8ZzI=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>01.工作前五年决定你的一生之基金读后感</title>
      <link href="/2019/10/08/%E7%90%86%E8%B4%A2/01.%E5%B7%A5%E4%BD%9C%E5%89%8D%E4%BA%94%E5%B9%B4%E5%86%B3%E5%AE%9A%E4%BD%A0%E7%9A%84%E4%B8%80%E7%94%9F%E4%B9%8B%E5%9F%BA%E9%87%91%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>/2019/10/08/%E7%90%86%E8%B4%A2/01.%E5%B7%A5%E4%BD%9C%E5%89%8D%E4%BA%94%E5%B9%B4%E5%86%B3%E5%AE%9A%E4%BD%A0%E7%9A%84%E4%B8%80%E7%94%9F%E4%B9%8B%E5%9F%BA%E9%87%91%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>下面我来给大家分享一下书里关于基金的一些知识。然而那些基金的类别我也是很多还是没搞懂，希望那些已经学完基金课或者已经知道的小伙伴们帮忙解答一下～</p><h1 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h1><p>按照通俗的解释，基金有很多类别：</p><p>（1）按照组织形式不同，可以分为契约型基金和公司型基金；</p><p>（2）按照运作方式不同，可以分为封闭式基金和开放式基金；</p><p>（3）按照投资目的不同，可以分为成长型基金、收入型基金和平衡型基金；</p><p>（4）按照投资对象不同，可以分为股票型基金、债券型基金和货币基金；</p><p>（5）按照投资理念的不同，可以分为主动型基金和被动（指数）型基金；</p><p>（6）按照募集方式的不同，可以分为公募基金和私募基金。</p><p>基本上，买基金的人最频繁接触的名词就是：封闭式基金、开放式基金。其中开放式基金是绝大多数介入基金的人都会购买的种类。</p><h1 id="购买基金是要收费的"><a href="#购买基金是要收费的" class="headerlink" title="购买基金是要收费的"></a>购买基金是要收费的</h1><p>基金是要收保管费。当然，用专业术语来说就是“佣金”。</p><p>佣金有两种，一种是<strong>申购费</strong>，一种是<strong>认购费</strong>用。发行期间购买基金叫作<strong>认购</strong>，成立后的基金购买叫作<strong>申购</strong>。</p><p>基本上，大多数人在网络上或者银行柜面进行操作的都是“申购”，费率一般在1％～1.5％。</p><p>然后，收取费用的方式也分为“事前”和“事后”，也就是前端收费和后端收费(文章后面会介绍)。当然，基金收保管费也可以理解，我们把钱交给别人管理，人家自然需要收取一定的劳务费用。好比托儿所帮人带孩子，不管带得好不好，总归每年的托管费是要交的。基金也是如此，不管基金一年的收益如何，佣金是一定要支付的，而且很多还是提前支付。</p><h1 id="货币基金-股票型基金-债券型基金和混合型基金的区别"><a href="#货币基金-股票型基金-债券型基金和混合型基金的区别" class="headerlink" title="货币基金\股票型基金\债券型基金和混合型基金的区别"></a>货币基金\股票型基金\债券型基金和混合型基金的区别</h1><h2 id="货币基金"><a href="#货币基金" class="headerlink" title="货币基金"></a>货币基金</h2><p>流动性非常好，没有申购赎回费用，基金也主要投资债券、央行票据、回购等安全性极高的短期金融品种，类似“储蓄产品”，每月分红。同时赎回也很方便，现在南方基金、华夏基金、汇添富基金、易方达基金等一些公司都推出了T+0服务，也就是当天赎回，当天到账，也许比活期取钱立马兑现稍微慢了点，但相对其他也很快捷。根据实际操作来看，购买的货币基金是南方现金A，每次T+0赎回的时间都在1分钟之内。</p><p>这里再多说一句，阿里巴巴旗下的余额宝就是货币基金的一种，余额宝中的资金其实是由天弘基金公司进行管理的，余额宝的收益也不是“利息”，而是用户购买货币基金的收益，淘宝用户一旦把钱从支付宝账户转到“余额宝”，支付宝公司就自动把钱成名为“天弘增利宝货币”的货币基金，这样一来你在“余额宝”里的钱就可以得到货币基金的收益。</p><h2 id="债券型基金"><a href="#债券型基金" class="headerlink" title="债券型基金"></a>债券型基金</h2><p>是指以国债、金融债等固定收益类金融工具为主要投资对象的基金，相对而言风险比较稳定，收益也稳定。当然，这里稍微有些区别，纯债型基金不投资股票，偏债型基金可以投资少量的股票。一般来说，债券型基金不收取认购或申购的费用，赎回费率也较低。</p><h2 id="股票型基金"><a href="#股票型基金" class="headerlink" title="股票型基金"></a>股票型基金</h2><p>是基金中风险最高的一种，资产总额的60％以上投资于股票的基金就是股票型基金。申购赎回费用都相对较高。当然它的投资回报率也相对来说比较高。因为股票型基金买入的就是股票，而股票波动性要比债券强，会因为股市的变化而起起落落。</p><h2 id="混合型基金"><a href="#混合型基金" class="headerlink" title="混合型基金"></a>混合型基金</h2><p>介于债券型基金和股票型基金之间，投资债市和股市的灵活性高，股市好就多投资股票，股市不好则多购买债券来分担风险，当然，这对基金经理的要求比较高。</p><h1 id="基金的风险"><a href="#基金的风险" class="headerlink" title="基金的风险"></a>基金的风险</h1><p> 基金有风险，投资需谨慎，这是大家耳熟能详的口号了。那么，基金的风险是不是如台风一样凶险呢？</p><p><strong>从本质上来说，基金就是股票，有风险，但也没有风险。更准确地来说，从短期来看，风险巨大；从中期来看，风险不大；从长期来看，风险很小；从超长期来看，风险没有。</strong></p><p>最简单的用数据来说话，看美国这些年的股票交易历史，看看从1925～2002年美国77年股票交易历史。如果1925年投资1美元在大公司股票上，到2002年，收益是1775美元。在这77年中，包含了多次股市崩溃，最终的收益依然是1775倍，而同期通货膨胀是10倍。如果你真的能够投资77年，显然可以大大地赚一笔。平均每年的收益是12.2％。但是这77年中，如果你独立的看每一年，却有23年是亏本的，最大一年亏损达到-43.34％。在其余的盈利年份，最赚的年收益是53.99％，亏本年份的概率接近30％。</p><p>如果你连续任意投资5年，最亏的年平均收益为-12％，最赚的为24％。亏本年份的概率接近10％。</p><p>如果连续投资10年，最亏的年平均收益为-0.9％，最赚的为20％，亏本年份的概率接近3％。</p><p>如果连续投资20年，最亏的年平均收益为3.1％，最赚的为17.7％，没有亏本年。</p><p>所以，这就是结论，按照美国的股市历史，如果你仅仅进行一年的投资，你亏损可能性是30％，如果做5年投资，亏损的可能性是10％，如果做10年的投资，亏损的可能性是3％，做20年投资，就不会有亏损了。</p><p>至于只进行小于1年的投资，3个月或者1个月的失败概率有多大，她觉得应该和抛硬币差不多大吧。</p><p>所以，短期来看，风险很大；长期来看，风险很小。</p><p>当然，这些概率是针对股票而言的，或者说股票基金。股票既是收益最大的，也是风险最大的，要降低风险，只有增加投资年限。当然你也可以投资债券，如果投资债券，按照美国的金融历史，投资期为5年的时间，亏损的概率就不到5％，当然放到77年的历史中看，美国大公司的债券年平均收益只有6.2％。经过77年后，1美元变为60美元。相比股票的1775美元，天差地别，然而好处就是风险小很多，心情波动也会小很多。</p><p>当然，风险最低的是货币基金，但2％左右的收益。经过77年后，1美元只不过是4.5美元，远远跑不过通货膨胀。</p><p><strong>如果要收益大，买股票型基金；如果要稳健，买债券型基金或者混合型基金；如果要安全，买货币基金。世界上没有低风险高收益的事情</strong>（当然，即便有，也不是基金可以解决的）。</p><p>如果有人说，我想要高收益，还不想承担高风险，那就增加投资的时间，用时间来平滑掉那些可怕的波动。从短期来看，股票型基金上下波动显得那么惊心动魄，让人胆战心惊，而从长久来看，这些波动不过是大海中的一点小小涟漪，甚至都可以忽略不计。所以，买卖有时候买的不是心跳，而是时间。</p><p>所以，<strong>如果想拥有高收益，那么就要想办法增加投资年限。目的是养老或者抚养儿女的话，适合买股票基金，目的是3到5年之间买房结婚，那么债券基金会更加合适，至于半年左右就要赎回资金的话，那么货币基金会更加合适。</strong></p><h1 id="时间的馈赠——复利"><a href="#时间的馈赠——复利" class="headerlink" title="时间的馈赠——复利"></a>时间的馈赠——复利</h1><p>读理财入门书的时候，常常会看到一个说法，投资开始的越早，就可以承担更多的风险，也可以获得更大的收益。究其原因非常简单，投资越早，时间越长，复利的威力就越大。</p><p>做个简单的算术题，一个25岁的年轻人，打算在60岁退休的时候有100万元存款，他只需要一个非常简单的办法，按照平均年收益12％来计算，每月只需要投资175元，那么在60岁的时候，账户中就会有101万元，而实际投入的本金只有73500元。</p><p>但对于一个40岁的人而言，需要每月投入1000元，在同样的收益率下，60岁才能有97万元的存款，与此同时他投入的本金已经达到24万元。为了达到同样的目的，就要多拿出17万元，仅仅是因为投资晚了15年。</p><p>如果进行一次性的投资，差距会更加可怕。25岁的时候，拿出2万元，按照年收益12％复利增长，60岁的时候会有105万元；如果40岁的时候拿出2万元投资，按照同样的收益率复利增长，60岁时只有19万元，差距有4倍之多。</p><p>基金公司的宣传册上常常能够看到类似的小故事，比如王女士20岁的时候每月投资500元买基金，假设年均收益率为10％，她投资7年就不再扣款，然后让本金和获利一起成长，到60岁退休的时候，本利已经达到了162万元；而张女士则是在26岁的时候开始投资基金，同样是每月500元，10％的年均收益率，她需要花33年的时间持续扣款，到60岁才累计154万元。张女士不过比王女士晚投资了7年，却要多花25年来追赶。</p><p>计算长期收益有一个非常好用的公式“<strong>72法则</strong>”，比如年收益率是8％，那么72÷8=9，也就是说9年资产可以翻一倍；如果年收益率是12％，那么72÷12=6，也就是说6年收益率翻一倍。在30年的时间里，如果年收益率达到12％，本金可以翻5番，即32倍；如果年收益率是8％，本金可以翻3番，即10倍左右。</p><p>由此可以看出，想获得巨大的收益，有两点很重要：<strong>时间长短和年收益率</strong>。如果一个人无法获得10％以上的高收益率，那么在寻求稳健的前提下，尽可能延长投资的时间，提早开始进行投资。如果一个人没有提早开始投资，失去了时间的优势，那么就需要承担很多的风险去谋求高收益率。两者相比，谁更容易成功，一目了然。</p><h1 id="定投还是一次性投入"><a href="#定投还是一次性投入" class="headerlink" title="定投还是一次性投入"></a>定投还是一次性投入</h1><p>定投很简单，与银行签订一个合同，每月固定某一日，或者每两周固定某一日，或者每周固定某一日进行扣款，一般银行或者基金公司会提前两日进行提醒，要求在扣款账户中保证余额充足。如果一次扣款不成功，那么就会顺延到下一次扣款日进行扣款。</p><p>一次性投入就更容易理解，就是自己决定某一日在某一只或某几只基金产品中投入一定数额的资金，跟定期存款一样，买入就持基金不动，任由其净值的涨跌。</p><h1 id="定投的好处"><a href="#定投的好处" class="headerlink" title="定投的好处"></a>定投的好处</h1><h2 id="对大脑比较好"><a href="#对大脑比较好" class="headerlink" title="对大脑比较好"></a>对大脑比较好</h2><p>因为定投不需要过度预测市场，自己账户中设置的是每周一次定时扣款，扣款金额选择小一点，这样一来每月投入金额不会伤筋动骨，经济压力小；二来风险被时间平滑，精神压力小。只要经济大体向上，短期内挑选的基金涨不上去会是件好事，我可以多买点份额。如果短期内涨上去了，那也不追加，就当短期发点小财，心里乐一乐也就罢了。</p><h2 id="对心脏比较好"><a href="#对心脏比较好" class="headerlink" title="对心脏比较好"></a>对心脏比较好</h2><p>投资中最怕的就是“贪心”，多少人在股市里栽跟头就是因为“太贪心”。然而，大多数人都克服不了贪婪，都认为自己可以猜到股市的涨跌，可以在这种波动中收获额外的财富，然而结果往往是把家中老底都赔了进去。</p><p>这时定投就可以帮助你克服自己的贪婪，因为定投是一种强制性的非常有纪律性的投资方法，不用去考虑股市的涨跌，不用去猜测明天的起伏。</p><h1 id="前端收费还是后端收费"><a href="#前端收费还是后端收费" class="headerlink" title="前端收费还是后端收费"></a>前端收费还是后端收费</h1><h2 id="前端收费"><a href="#前端收费" class="headerlink" title="前端收费"></a>前端收费</h2><p>是指在申购基金时进行的收费，比如我20日申购沪深300指数基金500元，那么同时也要支付1.5％申购费用。等下个月20日我再次申购沪深300指数基金500元时，依旧也要支付这笔费用，依此类推。</p><h2 id="后端收费"><a href="#后端收费" class="headerlink" title="后端收费"></a>后端收费</h2><p>是指在申购基金时不收费用，但是在赎回基金的时候收取费用。但后端收费的优点在于，如果持有基金产品超过一定的年限，比如5年，赎回是不需要支付费用的。</p><p>因此，前段收费还是后端收费，需要看个人情况。如果只是打算定投三年左右，年限并不长，或者自己对选择的基金没有太多的把握，可能在几个月后或者一年后进行调整，那么选择前端收费就胜过后端收费。同理，如果对基金本身持续看好，同时也打算长久持有，那么可以选择后端收费，毕竟1.5％～3％的费用还是挺高的。</p><h1 id="买入和卖出时机的把握"><a href="#买入和卖出时机的把握" class="headerlink" title="买入和卖出时机的把握"></a>买入和卖出时机的把握</h1><p><strong>买入和卖出时机的把握</strong>预测时机永远不是人类能干的事情，我们只知道2000点的时候进场，风险一定小于5000点的时候进场。</p><p>我们都没有上帝之眼能够看到大盘的精准底部，只能知道经济不景气就反映了大盘处在历史低位，就这么简单。那么，现在买就很好，即便大盘再跌，对我而言，无非就是用相同的资金买入更多的筹码，我不需要一夜致富，有时间耐心等待。</p><p>那么卖出呢？有朋友建议如果基金浮盈了25％，维持定投，就将获利的部分了结，落袋为安，如果基金浮亏了25％，那么就可以考虑止损离场。我个人不会做这般机械的操作。</p><p>在我看来，买入和卖出的逻辑很简单，买入是因为市场风险充分释放了，大盘点位很低，买入很划算。等到大盘上涨到不合理的状态，市场上开始频繁出来各种“市梦率”先生时，那么我就获利离场，结束这场愉快的投资旅程。我无须为了这25％的上下浮动而纠结不已，也无须为了猜测市场近三个月，后三个月的表现而整日劳心劳力。</p><h1 id="分散投资和再平衡"><a href="#分散投资和再平衡" class="headerlink" title="分散投资和再平衡"></a>分散投资和再平衡</h1><p>分散投资，并不等于去买一堆乱七八糟的基金就是分散投资。</p><p><strong>最合理的分散投资应该是投资在互相不相干的投资品种上，比如股市、房地产、黄金甚至古董等。</strong>对于基金领域，我们需要寻找那些相互关联不是特别大的证券品种。比如股票和债券是独立的，比如大盘股和小盘股关联性也不大，价值股和成长股关联性也较小。所以首先要确定股票和债券的比例，其次股票应该尽量包含成长股、价值股、大盘股和小盘股。</p><p>按照自己的投资年限和风险投资能力，制定一个股票和债券的配置比例。举个栗子，最开始的比例为7：3，一年以后，股票涨得快了，债券涨得慢了，比例变为8：2，怎么办？这时候要卖掉股票，买入债券。如果再过一年，遇到熊市了，股票大跌，比例变成了6：4，这时候就要卖掉债券，买入股票，使比例回到7：3，这就是再平衡。</p><p><strong>再平衡是很微妙的事情。从表面来看，你是卖掉一个上涨快的优良资产，买入一个下跌或者跑得慢的不良资产，但实际上这是一个高抛低吸的过程，是一种通过纪律性投资来进行卖高买低的过程。另外，再平衡也是保持风险等级的一个重要过程，有人用历史数据做过计算，再平衡的综合效益要远远高于不做再平衡的收益。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery分页插件的使用</title>
      <link href="/2019/08/28/%E5%89%8D%E7%AB%AF/Jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/28/%E5%89%8D%E7%AB%AF/Jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>现在网上各种各样的分页组件很多，但是很难找到十分“称心如意”的，于是jqPaginator诞生了。</p><p>我心中理想的分页组件，要不受CSS框架限制，可以使用在各种不同风格中的网页中。以我浅显的经验来看，要达到这个目标，关键的一点就是高度自定义的Html结构。所以jqPaginator努力做到合理范围内的自定义，使其灵活的使用了各种不同的场景。</p><p>官网<code>&lt;http://jqpaginator.keenwon.com/&gt;</code></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载jquery,下载插件jqpaginator,下载bootstrap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;haoyongliang.gitee.io&#x2F;2019&#x2F;08&#x2F;28&#x2F;%E5%89%8D%E7%AB%AF&#x2F;Jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8&#x2F;fenye.rar</span><br></pre></td></tr></table></figure><h2 id="引入JQuery、BootStrap、jqpaginator"><a href="#引入JQuery、BootStrap、jqpaginator" class="headerlink" title="引入JQuery、BootStrap、jqpaginator"></a>引入JQuery、BootStrap、jqpaginator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src="js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="js/jqpaginator.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/bootstrap.min.css"</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="第一步、定义显示分页条的容器"><a href="#第一步、定义显示分页条的容器" class="headerlink" title="第一步、定义显示分页条的容器"></a>第一步、定义显示分页条的容器</h1><p>在页面定义一个标签容器，这个容器里就是我们未来要显示的分页条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span> <span class="attr">id</span>=<span class="string">"pagination0"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第二步、初始化分页条"><a href="#第二步、初始化分页条" class="headerlink" title="第二步、初始化分页条"></a>第二步、初始化分页条</h1><p>初始化分页条</p><p>总页数插件自己算，不用管</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.jqPaginator(<span class="string">'#pagination0'</span>, &#123;<span class="comment">//这个选择器是容器的ID，必须和第一步的ID对应</span></span><br><span class="line">    totalCounts:<span class="number">1</span>, <span class="comment">//总记录数是1,先写死</span></span><br><span class="line">    pageSize:<span class="number">10</span>,<span class="comment">//每页显示10条记录</span></span><br><span class="line">    visiblePages: <span class="number">10</span>,<span class="comment">//分页条显示10个页码</span></span><br><span class="line">    currentPage: <span class="number">1</span>,<span class="comment">//默认是第一页</span></span><br><span class="line">    first:<span class="string">'&lt;li class="first"&gt;&lt;a href="javascript:;"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">    last:<span class="string">'&lt;li class="first"&gt;&lt;a href="javascript:;"&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">    prev : <span class="string">'&lt;li class="prev"&gt;&lt;a href="javascript:;"&gt;上页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">    next : <span class="string">'&lt;li class="next"&gt;&lt;a href="javascript:;"&gt;下页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">    page : <span class="string">'&lt;li class="page"&gt;&lt;a href="javascript:;"&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">    onPageChange: <span class="function"><span class="keyword">function</span> (<span class="params">num, type</span>) </span>&#123;<span class="comment">//num表示被点击的那个页码</span></span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="第三步、编写onPageChange函数"><a href="#第三步、编写onPageChange函数" class="headerlink" title="第三步、编写onPageChange函数"></a>第三步、编写onPageChange函数</h1><p>该函数在分页条初始化完毕后会被执行一次，并且num=1</p><p>之后在每次点击页码的时候都会触发一次</p><p>分析后发现：这个函数中我们可以干两件事</p><p>1.把当前页码和每页显示的记录书以ajax形式发送给服务器</p><p>2.将写死的totalCounts配置更新为真实数据</p><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">onPageChange: <span class="function"><span class="keyword">function</span> (<span class="params">num, type</span>) </span>&#123;<span class="comment">//num表示被点击的那个页码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"当前被点击的是第"</span>+num+<span class="string">"页"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       做两件事</span></span><br><span class="line"><span class="comment">         1.想servlet发送请求，请求当前页的数据</span></span><br><span class="line"><span class="comment">         2.将写死的totalCounts修改为真实的总记录数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    $.<span class="keyword">get</span>("route/pageQuery",</span><br><span class="line">          &#123;</span><br><span class="line">        cid:location.search.split(<span class="string">"="</span>)[<span class="number">1</span>],</span><br><span class="line">           currentPage:num,</span><br><span class="line">           pageSize:<span class="number">10</span></span><br><span class="line">      &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">pageBean</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//用真实记录数替换原有写死的记录数</span></span><br><span class="line">        $(<span class="string">'#pagination0'</span>).jqPaginator(<span class="string">'option'</span>, &#123;</span><br><span class="line">            totalCounts: pageBean.totalCount</span><br><span class="line">           &#125;</span><br><span class="line"> );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.jqPaginator(<span class="string">'#pagination0'</span>, &#123;<span class="comment">//这个选择器是容器的ID</span></span><br><span class="line">                totalCounts:<span class="number">100</span>, <span class="comment">//总记录数是1</span></span><br><span class="line">                pageSize:<span class="number">10</span>,<span class="comment">//每页显示10条记录</span></span><br><span class="line">                visiblePages: <span class="number">10</span>,<span class="comment">//分页条显示10个页码</span></span><br><span class="line">                currentPage: <span class="number">1</span>,<span class="comment">//默认是第一页</span></span><br><span class="line">                first:<span class="string">'&lt;li class="first"&gt;&lt;a href="javascript:;"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">                last:<span class="string">'&lt;li class="first"&gt;&lt;a href="javascript:;"&gt;尾页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">                prev : <span class="string">'&lt;li class="prev"&gt;&lt;a href="javascript:;"&gt;上页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">                next : <span class="string">'&lt;li class="next"&gt;&lt;a href="javascript:;"&gt;下页&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">                page : <span class="string">'&lt;li class="page"&gt;&lt;a href="javascript:;"&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt;'</span>,</span><br><span class="line">                onPageChange: <span class="function"><span class="keyword">function</span> (<span class="params">num, type</span>) </span>&#123;<span class="comment">//num表示被点击的那个页码</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"当前被点击的是第"</span>+num+<span class="string">"页"</span>);</span><br><span class="line">                    search(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 做两件事</span></span><br><span class="line"><span class="comment">             *  1.想servlet发送请求，请求当前页的数据</span></span><br><span class="line"><span class="comment">             *  2.将写死的totalCounts修改为真实的总记录数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param </span>num 当前正在被点击的页码</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                $.<span class="keyword">get</span>("route/pageQuery",</span><br><span class="line">                    &#123;</span><br><span class="line">                        cid:location.search.split(<span class="string">"="</span>)[<span class="number">1</span>],</span><br><span class="line">                        currentPage:num,</span><br><span class="line">                        pageSize:<span class="number">10</span></span><br><span class="line">                    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">pageBean</span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">'#pagination0'</span>).jqPaginator(<span class="string">'option'</span>, &#123;</span><br><span class="line">                        totalCounts: pageBean.totalCount</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>后端只需要返回总记录数counts和查询结果lists即可</p><p>后端需要接受的数据:currentPage,pageSize,查询条件</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始化Centos部署环境</title>
      <link href="/2019/08/28/linux/%E5%88%9D%E5%A7%8B%E5%8C%96Centos%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/08/28/linux/%E5%88%9D%E5%A7%8B%E5%8C%96Centos%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>为了减少在服务器上安装软件出现更多的问题，建议按照下面步骤初始化服务器环境</p><h1 id="安装gcc-gcc-c"><a href="#安装gcc-gcc-c" class="headerlink" title="安装gcc gcc-c++"></a>安装gcc gcc-c++</h1><blockquote><p>如新环境,未安装请先安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y gcc gcc-c++</span></span><br></pre></td></tr></table></figure><h1 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install wget</span></span><br></pre></td></tr></table></figure><h1 id="安装PCRE库"><a href="#安装PCRE库" class="headerlink" title="安装PCRE库"></a>安装PCRE库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf pcre-8.33.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> pcre-8.33</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h1 id="安装SSL库"><a href="#安装SSL库" class="headerlink" title="安装SSL库"></a>安装SSL库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.1j.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf openssl-1.0.1j.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> openssl-1.0.1j</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h1 id="安装zlib库存"><a href="#安装zlib库存" class="headerlink" title="安装zlib库存"></a>安装zlib库存</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://zlib.net/zlib-1.2.11.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf zlib-1.2.11.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关闭Centos7的防火墙</title>
      <link href="/2019/08/28/linux/%E5%85%B3%E9%97%ADCentos7%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2019/08/28/linux/%E5%85%B3%E9%97%ADCentos7%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<h1 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h1 id="永久关闭-禁止开机启动"><a href="#永久关闭-禁止开机启动" class="headerlink" title="永久关闭[禁止开机启动]"></a>永久关闭[禁止开机启动]</h1><p>临时关闭防火墙后在重启系统后就又会启动防火墙，下面是永久关闭防火墙的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line"></span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven依赖报错解决方案</title>
      <link href="/2019/08/27/%E9%97%AE%E9%A2%98/maven%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/08/27/%E9%97%AE%E9%A2%98/maven%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>开发中经常遇到pom文件依赖报红的问题，下面提供了几种解决方案</p><p><img src="/" alt="" class="lazyload" data-src="./maven%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>1.检查依赖是否单词拼写错误</p><p>2.先删除全部pom中爆红的依赖，然后再一个一个粘贴进去，定位真正产生问题的依赖</p><p>3.找到本地maven仓库，从maven仓库中删除对应的jar包和目录，重新下载</p><p>4.如果下载不回来，检查远程仓库是否有对应的依赖，打开maven安装目录下的settings.xml文件，找到mirrors标签，查看用到了远程仓库地址，打开仓库，查询是否有对应的依赖，如果没有换个依赖版本即可。</p><p>5.如果经常出现这问题更换maven，重新安装maven，并且将之前已有的仓库删掉，重新下载依赖</p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p><img src="/" alt="" class="lazyload" data-src="./maven%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.png"></p><p><img src="/" alt="" class="lazyload" data-src="./maven%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> 开发中遇到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的MAVEN依赖</title>
      <link href="/2019/08/27/maven/%E5%B8%B8%E8%A7%81%E7%9A%84maven%E4%BE%9D%E8%B5%96/"/>
      <url>/2019/08/27/maven/%E5%B8%B8%E8%A7%81%E7%9A%84maven%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="JDK编译插件"><a href="#JDK编译插件" class="headerlink" title="JDK编译插件"></a>JDK编译插件</h2><p>如果不配置该插件，那么IDEA在进行项目编译的时候会自动将编译语法降到1.5</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdk编译插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--tomcat插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tomcat7的插件， 不同tomcat版本这个也不一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过maven tomcat7:run运行项目时，访问项目的端口号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目虚拟路径  如果配置的aa， 则访问路径为localhost:8080/aa--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/aa<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--c3p0连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Druid连接池-1"><a href="#Druid连接池-1" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--beanUtils--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Javamail"><a href="#Javamail" class="headerlink" title="Javamail"></a>Javamail</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Javamail--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jedis--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>可能1.18.4可能会有坑，需要降级或者升级,可以使用1.16.6</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Lombok--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz‐scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz‐jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring核心"><a href="#Spring核心" class="headerlink" title="Spring核心"></a>Spring核心</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring核心--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring集成Junit测试"><a href="#Spring集成Junit测试" class="headerlink" title="Spring集成Junit测试"></a>Spring集成Junit测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring集成Junit测试--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring切面"><a href="#Spring切面" class="headerlink" title="Spring切面"></a>Spring切面</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring集成Aspect切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring事物"><a href="#Spring事物" class="headerlink" title="Spring事物"></a>Spring事物</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC核心"><a href="#SpringMVC核心" class="headerlink" title="SpringMVC核心"></a>SpringMVC核心</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC拦截器拦截静态资源问题</title>
      <link href="/2019/08/27/%E9%97%AE%E9%A2%98/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/27/%E9%97%AE%E9%A2%98/springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>1.在springmvc框架中开放了静态资源访问权限,如下图</p><p><img src="/" alt="" class="lazyload" data-src="./springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/4.png"></p><p>2.配置了拦截器，如下图</p><p><img src="/" alt="" class="lazyload" data-src="./springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/5.png"></p><p>3.项目中的DispatcherServlet的url-pattern的值是/</p><p><img src="/" alt="" class="lazyload" data-src="./springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/3.png"></p><p>以上3点都满足可能会造成静态资源被拦截无法访问的情况</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>让tomcat默认的servlet处理静态资源(默认servlet在tomcat/config/web.xml中，如下图)</p><p><img src="/" alt="" class="lazyload" data-src="./springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/1.png"></p><p>只需要在项目的web.xml中为default 这个servlet指定映射地址就可以,下面的配置的意思是如果请求后缀是.js或者以/assests/开头的资源就会交给tomcat默认servlet处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/assets/*"<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/images/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>以上配置要配置在springMVC的servlet的上面</p><p><img src="/" alt="" class="lazyload" data-src="./springMVC%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/2.png"></p><p>其实还有其他解决办法，但是推荐这一种，其他的本文不做详解。</p>]]></content>
      
      
      <categories>
          
          <category> 开发中遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改maven默认仓库</title>
      <link href="/2019/08/26/maven/%E4%BF%AE%E6%94%B9maven%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93/"/>
      <url>/2019/08/26/maven/%E4%BF%AE%E6%94%B9maven%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>maven从默认仓库下载依赖速度很慢，这里我筛选了几个比较快的仓库替换默认仓库，，因为有可能仓库中的依赖不全，所以最好多配置几个仓库。</p></blockquote><h1 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1.第一步"></a>1.第一步</h1><p>打开maven_home/conf/settings.xml文件，找到mirrors标签，如下图</p><p><img src="/" alt="1" class="lazyload" data-src="./%E4%BF%AE%E6%94%B9maven%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93/1.png"></p><h1 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2.第二步"></a>2.第二步</h1><p>插入仓库内容，最终效果如下图</p><p><img src="/" alt="" class="lazyload" data-src="./%E4%BF%AE%E6%94%B9maven%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93/2.png"></p><p>仓库地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阿里云镜像 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- maven官方2号镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Mirror from Maven Repo2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- maven的UK镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>ui<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Mirror from UK<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- maven的UK镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA不显示配置好的MAVEN插件</title>
      <link href="/2019/08/12/%E9%97%AE%E9%A2%98/maven%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/08/12/%E9%97%AE%E9%A2%98/maven%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在idea中，左侧POM文件中配置的TOMCAT插件,但是右侧plugins并没有显示出来</p><p><img src="/" alt="" class="lazyload" data-src="./maven%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%8F%92%E4%BB%B6/01.png"></p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>pluginmanagement标签一般用在父pom中，子元素可以包含<strong>plugins</strong>插件，比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attach</span>&gt;</span>true<span class="tag">&lt;/<span class="name">attach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在子pom文件中就可以这样使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>省去了版本、配置等信息，只需指定groupId和artifactId即可。</p><p>但是在父pom中，如果使用这个标签来包裹<strong>plugins</strong>插件，当在此项目根目录运行对应的mvn命令时，如果在子pom中没有直接像上面再次引用这个plugin，那么不会触发这个plugin插件，只有在子pom中再次引用了之后，才会在对应的子项目路径下触发这个plugin.</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>删除pluginManagement标签</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>pluginManagement</strong>主要是为了统一管理插件，确保所有子<strong>POM</strong>使用的插件版本保持一致</p><p><strong>plugins</strong>就是直接引入一个<strong>plugin</strong>，而且可以绑定到Maven相关的生命周期上。</p>]]></content>
      
      
      <categories>
          
          <category> 开发中遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> MAVEN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中关于TOMCAT的热部署相关的两个配置</title>
      <link href="/2019/08/05/IDEA/%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/05/IDEA/%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍IDEA中关于TOMCAT的热部署相关的两个配置，分别是on update action和 on frame deactivation,见图1</p></blockquote><p><img src="/" alt="1" class="lazyload" data-src="%E7%83%AD%E9%83%A8%E7%BD%B2/1.png"></p><h1 id="1、On-‘Update’-action"><a href="#1、On-‘Update’-action" class="headerlink" title="1、On ‘Update’ action"></a>1、On ‘Update’ action</h1><p>首先来看 on update action 相关的解释，从字面上理解 就是 手工触发 update 动作的时候 做什么，即点击图2中的按钮做什么事情</p><p><img src="/" alt="2" class="lazyload" data-src="%E7%83%AD%E9%83%A8%E7%BD%B2/2.png"></p><p>On ‘Update’ action的值有4个，具体介绍请参考图3</p><p><img src="/" alt="3" class="lazyload" data-src="%E7%83%AD%E9%83%A8%E7%BD%B2/3.png"></p><h1 id="2、On-frame-deactivation"><a href="#2、On-frame-deactivation" class="headerlink" title="2、On frame deactivation"></a>2、On frame deactivation</h1><p>on frame deactivation ，意思就是说IDE 失去焦点时做什么，有3个值(见图3)，意思同上，请看上图(图3)</p><p><img src="/" alt="4" class="lazyload" data-src="%E7%83%AD%E9%83%A8%E7%BD%B2/4.png">  </p><h1 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h1><p>最佳配置如下图</p><p><img src="/" alt="5" class="lazyload" data-src="%E7%83%AD%E9%83%A8%E7%BD%B2/5.png"></p><p>说明，修改完静态资源或者JSP资源后手动点击update tomcat application ctrl+f10按钮，不需要重新发布项目，如果修改了java代码则必须重新发布项目</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URI is not registered (Settings | Languages &amp; Frameworks | Schemas and DTDs</title>
      <link href="/2019/07/16/%E9%97%AE%E9%A2%98/UriIsNotRegistered/"/>
      <url>/2019/07/16/%E9%97%AE%E9%A2%98/UriIsNotRegistered/</url>
      
        <content type="html"><![CDATA[<h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>在idea中，写spring配置文件的时候，出现了这个错误。</p><p><img src="/" alt="" class="lazyload" data-src="./UriIsNotRegistered/01.png"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>拷贝第三行红色的文字</p><p><img src="/" alt="" class="lazyload" data-src="./UriIsNotRegistered/02.png"></p>]]></content>
      
      
      <categories>
          
          <category> 开发中遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的基本使用</title>
      <link href="/2019/07/13/docker/docker/"/>
      <url>/2019/07/13/docker/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><h2 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h2><p><a href="https://c.163.com/hub#/m/home/" target="_blank" rel="noopener">https://c.163.com/hub#/m/home/</a></p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p><a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>​    <img src="/" alt="" class="lazyload" data-src="docker/1-3.png"></p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="容器与虚拟机比较"><a href="#容器与虚拟机比较" class="headerlink" title="容器与虚拟机比较"></a>容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="/" alt="" class="lazyload" data-src="docker/1-1.png"></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="Docker-组件"><a href="#Docker-组件" class="headerlink" title="Docker 组件"></a>Docker 组件</h2><h3 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="/" alt="" class="lazyload" data-src="docker/1-2.png"></p><h3 id="Docker镜像与容器"><a href="#Docker镜像与容器" class="headerlink" title="Docker镜像与容器"></a>Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><pre><code>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</code></pre><h3 id="Registry（注册中心）"><a href="#Registry（注册中心）" class="headerlink" title="Registry（注册中心）"></a>Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​    请直接挂载课程配套的Centos7.x镜像    </p><p>（1）yum 包更新到最新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum update</span></span><br></pre></td></tr></table></figure><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><p>（3）设置yum源为阿里云</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><p>（4）安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce</span></span><br></pre></td></tr></table></figure><p>（5）安装后查看docker版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -v</span></span><br></pre></td></tr></table></figure><h2 id="设置ustc的镜像"><a href="#设置ustc的镜像" class="headerlink" title="设置ustc的镜像"></a>设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/docker/daemon.json</span></span><br></pre></td></tr></table></figure><p>在该文件中输入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br></pre></td></tr></table></figure><p>停止docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop docker</span></span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>查看docker状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl status docker</span></span><br></pre></td></tr></table></figure><p>开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><p>查看docker概要信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br></pre></td></tr></table></figure><p>查看docker帮助文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="./docker/4.jpg"></p><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search 镜像名称</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="./docker/5.jpg"></p><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull 镜像名称</span></span><br></pre></td></tr></table></figure><p>例如，我要下载centos7镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull centos:7</span></span><br></pre></td></tr></table></figure><h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><p>拉取镜像访问的是docker hub仓库，拉取的过程中速度可能速度会比较慢，可以修改镜像仓库地址。</p><ul><li><p>阿里云（先加入阿里云开发者平台：<a href="https://dev.aliyun.com）" target="_blank" rel="noopener">https://dev.aliyun.com）</a></p></li><li><p>docker中国加速器（<a href="https://www.docker-cn.com" target="_blank" rel="noopener">https://www.docker-cn.com</a>)</p></li><li><p>USTC加速器（<a href="https://lug.ustc.edu.cn/wiki/" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/</a> ）  真正的公共服务（无需任何操作）</p></li><li><p>daocloud、网易蜂巢加速器：略</p></li></ul><p>步骤： </p><p>1.打开配置文件，修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/docker/daemon.json</span></span><br></pre></td></tr></table></figure><p>配置内容：    </p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;        </span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://cs913o6k.mirror.aliyuncs.com"</span>]    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  2.重启docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart docker</span></span><br></pre></td></tr></table></figure><p>3.测试查询centos</p><p><img src="/" alt="1" class="lazyload" data-src="./docker/1.jpg"></p><h3 id="删除镜像rmi"><a href="#删除镜像rmi" class="headerlink" title="删除镜像rmi"></a>删除镜像rmi</h3><p>按镜像ID删除镜像</p><p>注意：如果某个镜像正在运行中无法删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi 镜像ID</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="2" class="lazyload" data-src="./docker/2.jpg"></p><p>删除所有镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rmi `docker images -q`</span></span><br></pre></td></tr></table></figure><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><blockquote><p>查看正在运行的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br></pre></td></tr></table></figure><blockquote><p>查看所有容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps –a</span></span><br></pre></td></tr></table></figure><blockquote><p>查看最后一次运行的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps –l</span></span><br></pre></td></tr></table></figure><blockquote><p>查看停止的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps -f status=exited</span></span><br></pre></td></tr></table></figure><h3 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h3><h4 id="创建容器常用的参数"><a href="#创建容器常用的参数" class="headerlink" title="创建容器常用的参数"></a>创建容器常用的参数</h4><p>创建并启动容器命令：docker run</p><p> -i：交互模式启动，最好加上，不加容器与主机没有交互，然后docker就会自动将容器关闭</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个tty伪终端（分配终端操作容器，终端工具比如xshell..）。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>-e : 表示设置环境变量</p><h4 id="交互式方式创建容器"><a href="#交互式方式创建容器" class="headerlink" title="交互式方式创建容器"></a>交互式方式创建容器</h4><p>交互式方式创建的容器不能在后台运行，创建完成后直接进入终端界面，执行exit，马上退出终端并且容器关闭。i表示启动容器,t表示提供命令窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -i -t --name=容器名称 镜像ID /bin/bash</span></span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name 容器名 镜像ID /bin/bash</span></span><br></pre></td></tr></table></figure><p>退出当前容器，当前容器会被关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><h4 id="守护式方式创建容器"><a href="#守护式方式创建容器" class="headerlink" title="守护式方式创建容器"></a>守护式方式创建容器</h4><blockquote><p>方式1:守护式方式创建的容器，容器状态为未启动，需要手动启动.d表示设置后台启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name 容器名称 镜像ID</span></span><br></pre></td></tr></table></figure><blockquote><p>方式2:守护式方式创建的容器，容器状态为启动,d表示设置后台，i表示启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name 容器名称 镜像ID</span></span><br></pre></td></tr></table></figure><blockquote><p>登录守护式容器方式(注意如果容器没有启动需要先启动容器才能登录)，i表示启动,t表示提供命令窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 容器名称[或者容器ID]  /bin/bash</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="3" class="lazyload" data-src="./docker/3.jpg"></p><h3 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h3><p>停止容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称（或者容器ID）</span><br></pre></td></tr></table></figure><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure><p>也可以将文件从容器内拷贝出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -v &#x2F;usr&#x2F;local&#x2F;myhtml:&#x2F;usr&#x2F;local&#x2F;myhtml --name&#x3D;mycentos3 centos:7</span><br></pre></td></tr></table></figure><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称（容器ID）</span><br></pre></td></tr></table></figure><p>也可以直接执行下面的命令直接输出IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format&#x3D;&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除指定的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称（容器ID）</span><br></pre></td></tr></table></figure><h1 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><p>（1）拉取mysql镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos&#x2F;mysql-57-centos7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;root mysql</span><br></pre></td></tr></table></figure><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:7-jre7</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;mytomcat -p 9000:8080 </span><br><span class="line">-v &#x2F;usr&#x2F;local&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps tomcat:7-jre7</span><br></pre></td></tr></table></figure><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><p>（1）拉取镜像    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><p>（2）创建Nginx容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;mynginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><p>（1）拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>（2）创建容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;myredis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>（3）通过reids-cli访问服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先进入redis-cli.exe所在目录</span><br><span class="line">redis-cli -h 主机IP</span><br></pre></td></tr></table></figure><h1 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h1><h2 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a>容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#docker commit 容器的名字 镜像的名字</span><br><span class="line">docker commit mynginx mynginx_i</span><br></pre></td></tr></table></figure><h2 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a>镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><p>在哪个目录执行该命令，那么tar文件就被保存到哪个目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#docker  save -o 要保存的文件的名字.tar 镜像的名字</span><br><span class="line">docker  save -o mynginx.tar mynginx_i</span><br></pre></td></tr></table></figure><h2 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a>镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;先进入到存放tar文件的目录</span><br><span class="line">#docker load -i mynginx.tar</span><br><span class="line">docker load -i mynginx.tar</span><br></pre></td></tr></table></figure><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><p>1、对于开发人员：可以为开发团队提供一个完全一致的开发环境；<br>2、对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了；<br>3、对于运维人员：在部署时，可以实现应用的无缝移植。</p><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p &#x2F;usr&#x2F;local&#x2F;dockerjdk8</span><br></pre></td></tr></table></figure><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER ITCAST</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR &#x2F;usr</span><br><span class="line">RUN mkdir  &#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">#ADD 是相对路径jar,把java添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME&#x2F;jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>JDK1.7</p><p>1.在usr/local/java目录下上传JDK1.7.GZ文件</p><p>2.将该文件解压(tar -zxvf xxxx.gz)到当前目录，会看到一个文件夹jdk1.7.0_75</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#依赖镜像名称和ID</span><br><span class="line">FROM centos:7</span><br><span class="line">#指定镜像创建者信息</span><br><span class="line">MAINTAINER ITCAST</span><br><span class="line">#切换工作目录</span><br><span class="line">WORKDIR &#x2F;usr</span><br><span class="line">RUN mkdir  &#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">#表示把&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_75目录下的东西，拷贝到新的镜像中的&#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line">COPY jdk1.7.0_75 &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line"></span><br><span class="line">#配置java环境变量</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>所有的文件都在/usr/local/java目录下</p><p>在/usr/local/java目录下的文件有</p><p>​    jdk1.7.0_75 </p><pre><code>jdk-7u75-linux-x64.tar.gz</code></pre><p>​    Dockerfile</p><p>（4）执行命令构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t&#x3D;&#39;jdk1.8&#39; .</span><br></pre></td></tr></table></figure><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><h2 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><p>（2）启动私有仓库容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>添加以下内容，保存退出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.184.141:5000"</span>]&#125;</span><br></pre></td></tr></table></figure><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag jdk1.8 192.168.184.141:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure><p>（2）再次启动私服容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure><p>（3）上传标记的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.184.141:5000&#x2F;jdk1.8</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.创建并运行镜像的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name&#x3D;容器的名字 -v 主机中的文件夹 容器中的文件夹 -p 主机中的端口:容器中的端口 镜像名:版本</span><br></pre></td></tr></table></figure><p>-d 后台运行</p><p>-i 建立主机和容器的交互，如果docker发现主机和容器没有交互关系，那么就会自动把容器关闭</p><p>-v 让主机中的文件夹和容器中的产生映射关系，主机中的修改后，容器中的文件夹会自动修改</p><p>-p 让主机的端口和容器中的端口产生映射关系</p><p>2.删除镜像</p><p>docker rmi 镜像名</p><p>3.删除容器</p><p>docker rm 容器名或容器ID</p><p>4.如何查看docker中的进程</p><p>docker ps -a</p><p>5.关闭和启动容器</p><p>docker start ID</p><p>docker stop ID</p><p>6.关闭和启动Docker</p><p>systemctl start docker</p><p>systemctl stop docker</p><p>7.将主机中的数据拷贝到容器中</p><p>docker cp 主机中的文件夹路劲 容器名:容器中的路劲//把主机中的数据拷贝到容器中</p><p>docker cp 容器名:容器中的路劲 主机中的文件夹路劲//把容器中的数据拷贝到主机中</p><p>8.将当前界面切换到到容器中</p><p>​    [root@localhost]：#=&gt;[root@容器ID]：#</p><p>​    docker exec -it d146d4ae5b19 /bin/bash</p><p>​    [root@容器ID]=&gt;[root@localhost]</p><p>​    exit</p><p>9.查看容器的IP地址</p><p>​    docker inspect 容器ID</p><p>10.将当前的容器变成镜像</p><p>​    docker commit 容器名 新的镜像名</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建SpringBoot2.0开发环境</title>
      <link href="/2019/07/13/SpringBoot/SpringBoot2.0/SpringBoot2.0/"/>
      <url>/2019/07/13/SpringBoot/SpringBoot2.0/SpringBoot2.0/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> SpringBoot提供了一种快速使用Spring的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率</p><h2 id="SpringBoot功能"><a href="#SpringBoot功能" class="headerlink" title="SpringBoot功能"></a><strong>SpringBoot功能</strong></h2><p> <strong>1</strong>） <strong>自动配置</strong></p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是SpringBoot自动完成的。</p><p><strong>2</strong>） <strong>起步依赖</strong></p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p><p><strong>3</strong>） <strong>辅助功能</strong></p><p>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等。</p><p><u><strong>注意：Spring Boot 并不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式。</strong></u></p><h1 id="为什么要学习SpringBoot"><a href="#为什么要学习SpringBoot" class="headerlink" title="为什么要学习SpringBoot"></a>为什么要学习SpringBoot</h1><h2 id="Spring的缺点"><a href="#Spring的缺点" class="headerlink" title="Spring的缺点"></a>Spring的缺点</h2><p>配置文件繁琐</p><p>引入的依赖过多</p><p>配置文件和业务逻辑之间需要频繁的切换</p><h2 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h2><p>提供了默认的最优配置</p><p>引入的依赖少</p><p>Spring可以不使用XML配置Bean，使用注解注解配置</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h2><p>好处：导入一个依赖，这个依赖会引用其他依赖</p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>有默认的配置，启动的时候会使用默认的配置</p><h1 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h1><h2 id="Sping-Boot-建议的包结构"><a href="#Sping-Boot-建议的包结构" class="headerlink" title="Sping Boot 建议的包结构"></a>Sping Boot 建议的包结构</h2><p>root package 结构：cn.giftsstore.myProject</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">myproject</span><br><span class="line"> -src</span><br><span class="line">    - main</span><br><span class="line">         - java</span><br><span class="line">              - cn.giftsstore.myProject</span><br><span class="line">                    - comm</span><br><span class="line">                    - domain</span><br><span class="line">                    - repository</span><br><span class="line">                    - service</span><br><span class="line">                    - web</span><br><span class="line">                    - Application.java</span><br><span class="line">         - resources</span><br><span class="line">              - static</span><br><span class="line">              - templates</span><br><span class="line">              - application.properties</span><br><span class="line">    - test</span><br><span class="line"> -pom.xml</span><br></pre></td></tr></table></figure><h2 id="各包名介绍"><a href="#各包名介绍" class="headerlink" title="各包名介绍"></a>各包名介绍</h2><ul><li>Application.java：建议放到根目录下面，是项目的启动类，Spring Boot 项目只能有一个 main() 方法。</li><li>comm：目录建议放置公共的类，如全局的配置文件、工具类等。</li><li>domain：目录主要用于实体（Entity）与数据访问层（Repository）。</li><li>repository：数据库访问层代码。</li><li>service：该层主要是业务类代码。</li><li>web：该层负责页面访问控制。</li><li>resources 目录下：<ul><li>static：目录存放 Web 访问的静态资源，如 JS、CSS、图片等。</li><li>templates：目录存放页面模板(JSP，Thymeleaf)</li><li>application.properties：项目的配置信息。</li><li>test 目录存放单元测试的代码；pom.xml 用于配置项目依赖包，以及其他配置。</li></ul></li></ul><p>采用默认配置可以省去很多设置，当然也可以根据自己的喜好来进行更改。最后，启动 Application main 方法，至此一个 Java 项目搭建好了！</p><h1 id="快速创建SpringBoot2-0工程"><a href="#快速创建SpringBoot2-0工程" class="headerlink" title="快速创建SpringBoot2.0工程"></a>快速创建SpringBoot2.0工程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/01.png"></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/02.png"></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/03.png"></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/04.png"></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/05.png"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller; <span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping; <span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;        </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)    </span><br><span class="line">    <span class="meta">@ResponseBody</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功!"</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行项目的启动类"><a href="#运行项目的启动类" class="headerlink" title="运行项目的启动类"></a>运行项目的启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        SpringApplication.run(MySpringBootApplication<span class="class">.<span class="keyword">class</span>)</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><p>打开浏览器访问url地址为：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/06.png"></p><h1 id="配置热部署"><a href="#配置热部署" class="headerlink" title="配置热部署"></a>配置热部署</h1><p>热启动会消耗系统性能，开启时<strong>慎重</strong>。</p><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大 量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称 之为热部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署配置--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：IDEA进行SpringBoot热部署失败原因<br>出现这种情况，并不是热部署配置问题，其根本原因是因为Intellij IEDA默认情况下不会自动编译，需要对IDEA进 行自动编译的设置，如下</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/07.png"></p><h1 id="SpringBoot起步依赖原理分析"><a href="#SpringBoot起步依赖原理分析" class="headerlink" title="SpringBoot起步依赖原理分析"></a>SpringBoot起步依赖原理分析</h1><ul><li><p>在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。</p></li><li><p>在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。</p></li><li><p>我们的工程继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突等问题。</p></li></ul><h1 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h1><h2 id="yml配置文件简介"><a href="#yml配置文件简介" class="headerlink" title="yml配置文件简介"></a>yml配置文件简介</h2><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用 application.properties或者application.yml（application.yaml）进行配置。</p><p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件。其中，application.properties文件是键值对类型的文件，之前一直在使用，所以此处不在对properties文件的格式 进行阐述。除了properties文件外，SpringBoot还可以使用yml文件进行配置，下面对yml文件进行讲解。 </p><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数 据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导 入，比如： C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简 洁。<br>YML文件的扩展名可以使用.yml或者.yaml。 </p><h2 id="yml语法注意事项"><a href="#yml语法注意事项" class="headerlink" title="yml语法注意事项"></a>yml语法注意事项</h2><ul><li>大小写敏感</li><li>数据值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格（各个系统 Tab对应的 空格数目可能不同，导致层次混乱）。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>‘’#” 表示注释，从这个字符一直到行尾，都会被解析器忽略。</li></ul><h2 id="yml配置文件的语法"><a href="#yml配置文件的语法" class="headerlink" title="yml配置文件的语法"></a>yml配置文件的语法</h2><h3 id="配置普通数据-纯量"><a href="#配置普通数据-纯量" class="headerlink" title="配置普通数据(纯量)"></a>配置普通数据(纯量)</h3><p>语法： key: value 示例代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line"><span class="attr">msg1:</span> <span class="string">'hello \n world'</span>  <span class="comment"># 单引忽略转义字符</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">"hello \n world"</span>  <span class="comment"># 双引识别转义字符</span></span><br></pre></td></tr></table></figure><p>注意：value之前有一个空格</p><h3 id="配置对象或者Map数据"><a href="#配置对象或者Map数据" class="headerlink" title="配置对象或者Map数据"></a>配置对象或者Map数据</h3><p>语法：<br>  key:<br>  key1: value1<br>  key2: value2<br>  或者：<br>  key: {key1: value1,key2: value2} 示例代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span>  </span><br><span class="line"><span class="attr">name:</span> <span class="string">haohao</span>  </span><br><span class="line"><span class="attr">age:</span> <span class="number">31</span>  </span><br><span class="line"><span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">person:</span> <span class="string">&#123;name:</span> <span class="string">haohao,age:</span> <span class="number">31</span><span class="string">,addr:</span> <span class="string">beijing&#125;</span></span><br></pre></td></tr></table></figure><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</p><h3 id="配置数组、List、Set数据"><a href="#配置数组、List、Set数据" class="headerlink" title="配置数组、List、Set数据"></a>配置数组、List、Set数据</h3><p>语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span> </span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line"><span class="attr">key:</span> <span class="string">[value1,value2]</span></span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">city:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">beijing</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">tianjin</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">shanghai</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">chongqing</span>  </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">city:</span> <span class="string">[beijing,tianjin,shanghai,chongqing]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 集合中的元素是对象形式 </span></span><br><span class="line"><span class="attr">student:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span>    </span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span>    </span><br><span class="line">  <span class="attr">score:</span> <span class="number">100</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span>    </span><br><span class="line">  <span class="attr">age:</span> <span class="number">28</span>    </span><br><span class="line">  <span class="attr">score:</span> <span class="number">88</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wangwu</span>    </span><br><span class="line">  <span class="attr">age:</span> <span class="number">38</span>    </span><br><span class="line">  <span class="attr">score:</span> <span class="number">90</span></span><br></pre></td></tr></table></figure><p>注意：value1与之间的 - 之间存在一个空格</p><h3 id="参数引用"><a href="#参数引用" class="headerlink" title="参数引用"></a>参数引用</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span> </span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment"># 引用上边定义的name值</span></span><br></pre></td></tr></table></figure><h2 id="获取yml文件中的数据"><a href="#获取yml文件中的数据" class="headerlink" title="获取yml文件中的数据"></a>获取yml文件中的数据</h2><h3 id="方式1-使用-Value"><a href="#方式1-使用-Value" class="headerlink" title="方式1:使用@Value"></a>方式1:使用@Value</h3><p>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上<br>例如：</p><blockquote><p>application.yml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span>  </span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span>  </span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)    </span><br><span class="line">    <span class="keyword">private</span> String name;    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.age&#125;"</span>)    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)    </span><br><span class="line">    <span class="meta">@ResponseBody</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功! name="</span>+name+<span class="string">",age="</span>+age;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2-使用Evironment"><a href="#方式2-使用Evironment" class="headerlink" title="方式2:使用Evironment"></a>方式2:使用Evironment</h3><blockquote><p>application.yml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tom</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getPropInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPropInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"查询结果:"</span>+env.getProperty(<span class="string">"person.name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式3-使用-ConﬁgurationProperties"><a href="#方式3-使用-ConﬁgurationProperties" class="headerlink" title="方式3:使用@ConﬁgurationProperties"></a>方式3:使用@ConﬁgurationProperties</h3><p>通过注解@ConﬁgurationProperties(preﬁx=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映 射</p><blockquote><p>application.yml配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span>  </span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span>  </span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/quick"</span>)    </span><br><span class="line">    <span class="meta">@ResponseBody</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot 访问成功! name="</span>+name+<span class="string">",age="</span>+age;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.name = name;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.age = age;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用@ConﬁgurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方 法才可以，而使用@Value注解修饰的字段不需要提供set方法</p><h1 id="约定优于配置怎么体现的"><a href="#约定优于配置怎么体现的" class="headerlink" title="约定优于配置怎么体现的"></a>约定优于配置怎么体现的</h1><p>SpringBoot解决了配置文件和业务逻辑不停切换的问题</p><p>使用SrpingBoot就不需要配置文件了，直接使用JAVA文件+注解开发</p><blockquote><p>使用注解(约定)作为配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line"></span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> MyFilter());<span class="comment">//添加过滤器</span></span><br><span class="line"></span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/"</span>);<span class="comment">//设置过滤路径，/所有路径</span></span><br><span class="line"></span><br><span class="line">        registration.addInitParameter(<span class="string">"name"</span>, <span class="string">"alue"</span>);<span class="comment">//添加默认参数</span></span><br><span class="line"></span><br><span class="line">        registration.setName(<span class="string">"MyFilter"</span>);<span class="comment">//设置优先级</span></span><br><span class="line"></span><br><span class="line">        registration.setOrder(<span class="number">1</span>);<span class="comment">//设置优先级</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用xml(配置文件) 作为配置文件</p></blockquote><ol start="3"><li><p><strong>@Configuration和@Bean注解说明:</strong></p></li><li><p>@Configuration 标注在类上，相当于把该类作为spring的xml配置文件中的 &lt;beans&gt;，作用为：配置spring容器(应用上下文),上文中在MyFilterConfiguration类上添加了该注解，相当于创建了一个beans.xml配置文件里面的内容是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"</span> <span class="attr">default-lazy-init</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>@Bean标注在方法上(返回某个实例的方法)，等价于spring的xml配置文件中的&lt;bean&gt;，作用为：注册bean对象。</li></ol><ul><li><p>@Bean注解在返回实例的方法上，如果未通过@Bean指定bean的名称，则默认与标注的方法名相同。</p></li><li><p>@Bean注解默认作用域为单例singleton作用域，可通过@Scope(“prototype”)设置为原型作用域</p><p>上文中在myFilterRegistration()方法上加了@Bean注解，表示在spring启动的时候会执行该方法并将结果作为一个bean注册到容器中，该bean的名字是”myFilterRegistration”</p></li></ul><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><ul><li><p>在 <code>META-INF\spring.fatories</code>文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件 ctrl+shift+n 搜索spring.factories</p></li><li><p>通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/11.png"></p></li></ul><h1 id="使用Profile配置多种开发环境"><a href="#使用Profile配置多种开发环境" class="headerlink" title="使用Profile配置多种开发环境"></a>使用Profile配置多种开发环境</h1><p>我们在开发Spring Boot应用时，通常同一套程序会被安装到不同环境，比如 开发、测试、生产等。其中数据库地址、服务器端口等等配置都不同，如果每次打包时，都要修改配置文件，那么非常麻烦。profile功能就是来进行动态配置切换的。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>profile是用来完成不同环境下，配置动态切换功能</p><h2 id="配置方式1"><a href="#配置方式1" class="headerlink" title="配置方式1"></a>配置方式1</h2><p>创建多个配置文件，在主配置文件中激活要使用的配置文件</p><p>​        application-dev.properties/yml 开发环境</p><p>​        application-test.properties/yml 测试环境</p><p>​        application-pro.properties/yml 生产环境</p><p><img src="/" alt="12" class="lazyload" data-src="./SpringBoot2.0/12.png"></p><p>​    </p><h2 id="配置方式2"><a href="#配置方式2" class="headerlink" title="配置方式2"></a>配置方式2</h2><p>将不同环境的配置同时配置到一个yml文档中，称为(yml多文档方式).不同环境的配置使用—分割</p><p><img src="/" alt="13" class="lazyload" data-src="./SpringBoot2.0/13.png"></p><h2 id="profile激活方式"><a href="#profile激活方式" class="headerlink" title="profile激活方式"></a>profile激活方式</h2><blockquote><p>方式1</p><p>配置文件： 再配置文件中配置：spring.profiles.active=dev</p></blockquote><p>请看配置方式1和配置方式2</p><blockquote><p>方式2</p><p>虚拟机参数：在VM options 指定：-Dspring.profiles.active=dev</p></blockquote><p><img src="/" alt="14" class="lazyload" data-src="./SpringBoot2.0/14.png"></p><blockquote><p>方式3</p><p>命令行参数：java –jar xxx.jar  –spring.profiles.active=dev</p></blockquote><p><img src="/" alt="15" class="lazyload" data-src="./SpringBoot2.0/15.png"></p><h1 id="SpringBoot与整合其他技术"><a href="#SpringBoot与整合其他技术" class="headerlink" title="SpringBoot与整合其他技术"></a>SpringBoot与整合其他技术</h1><h2 id="整合SpringMVC以及配置"><a href="#整合SpringMVC以及配置" class="headerlink" title="整合SpringMVC以及配置"></a>整合SpringMVC以及配置</h2><p>修改Tomcat端口号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tomcat端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>静态资源存放目录</p><h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><h3 id="添加Mybatis的起步依"><a href="#添加Mybatis的起步依" class="headerlink" title="添加Mybatis的起步依"></a>添加Mybatis的起步依</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis起步依赖--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加数据库驱动坐标"><a href="#添加数据库驱动坐标" class="headerlink" title="添加数据库驱动坐标"></a>添加数据库驱动坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加数据库连接信息"><a href="#添加数据库连接信息" class="headerlink" title="添加数据库连接信息"></a>添加数据库连接信息</h3><p>在application.properties中添加数据量的连接信息 </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration: </span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test? useUnicode=true&amp;characterEncoding=utf8 </span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="创建user表"><a href="#创建user表" class="headerlink" title="创建user表"></a>创建user表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------- Table structure for `user` -- ---------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- ----------------------------- Records of user -- ---------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'张三'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'lisi'</span>, <span class="string">'123'</span>, <span class="string">'李四'</span>);</span><br></pre></td></tr></table></figure><h3 id="创建实体Bean"><a href="#创建实体Bean" class="headerlink" title="创建实体Bean"></a>创建实体Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 主键    </span></span><br><span class="line">    <span class="keyword">private</span> Long id;    </span><br><span class="line">    <span class="comment">// 用户名    </span></span><br><span class="line">    <span class="keyword">private</span> String username;    </span><br><span class="line">    <span class="comment">// 密码    </span></span><br><span class="line">    <span class="keyword">private</span> String password;    </span><br><span class="line">    <span class="comment">// 姓名    </span></span><br><span class="line">    <span class="keyword">private</span> String name;      </span><br><span class="line">    <span class="comment">//此处省略getter和setter方法 .. ..    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Mapper"><a href="#编写Mapper" class="headerlink" title="编写Mapper"></a>编写Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中 </p><h3 id="配置Mapper映射文件"><a href="#配置Mapper映射文件" class="headerlink" title="配置Mapper映射文件"></a>配置Mapper映射文件</h3><p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserList"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">           select * from user    </span><br><span class="line">       <span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置包扫描和配置文件映射"><a href="#配置包扫描和配置文件映射" class="headerlink" title="配置包扫描和配置文件映射"></a>配置包扫描和配置文件映射</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#spring集成Mybatis环境 #pojo别名扫描包 </span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.itheima.domain </span></span><br><span class="line"><span class="comment">#加载Mybatis映射文件 </span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure><h3 id="编写测试Controller"><a href="#编写测试Controller" class="headerlink" title="编写测试Controller"></a>编写测试Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/queryUser"</span>)    </span><br><span class="line">    <span class="meta">@ResponseBody</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();        </span><br><span class="line">        <span class="keyword">return</span> users;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="/" alt="8" class="lazyload" data-src="SpringBoot2.0/08.png"></p><h3 id="集成MyBatis时遇到的问题"><a href="#集成MyBatis时遇到的问题" class="headerlink" title="集成MyBatis时遇到的问题"></a>集成MyBatis时遇到的问题</h3><p>1.每一个Mapper类都需要写@Mapper注解，比较麻烦</p><p>​    解决办法</p><p>​        在启动类上加@MapperScan(“cn.itcast.demo.mapper”)//新增 </p><p>​        表示启动的时候会扫描该包下面所有的mapper.java文件，这样就不需要在为每一个XXXMpaer.java文件添加注解@Mapper了</p><p>2.The server time zone异常</p><p>​    在配置文件的URL末尾追加参数&amp;serverTimezone=UTC </p><p>3.报错：user找不到</p><p>​    问题原因：程序启动的时候没有扫描到User类</p><p>​    解决方案：修改配置文件type-aliases-package: <strong>cn.itcast.demo.domain</strong></p><p>4.错误</p><p>​    maven错误</p><p>​    修改mavent的setting.xml 修改仓库的地址</p><h2 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a>整合Junit</h2><h3 id="添加Junit的起步依赖"><a href="#添加Junit的起步依赖" class="headerlink" title="添加Junit的起步依赖"></a>添加Junit的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试的起步依赖--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.itheima.MySpringBootApplication; </span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User; </span><br><span class="line"><span class="keyword">import</span> com.itheima.mapper.UserMapper; </span><br><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith; </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest; </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= MySpringBootApplication<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();        </span><br><span class="line">        System.out.println(users);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRunner</span> <span class="keyword">extends</span> <span class="title">SpringJUnit4ClassRunner</span></span></span><br></pre></td></tr></table></figure><p>@SpringBootTest的属性指定的是引导类的字节码对象</p><h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><h3 id="添加redis的起步依赖"><a href="#添加redis的起步依赖" class="headerlink" title="添加redis的起步依赖"></a>添加redis的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置使用redis启动器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置redis的连接信息"><a href="#配置redis的连接信息" class="headerlink" title="配置redis的连接信息"></a>配置redis的连接信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis </span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1 </span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h3 id="注入RedisTemplate测试redis操作"><a href="#注入RedisTemplate测试redis操作" class="headerlink" title="注入RedisTemplate测试redis操作"></a>注入RedisTemplate测试redis操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= SpringbootJpaApplication<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//从redis缓存中获得指定的数据</span></span><br><span class="line">String userListData = redisTemplate.boundValueOps(<span class="string">"user.findAll"</span>).get();        <span class="comment">//如果redis中没有数据的话        </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==userListData)&#123;            </span><br><span class="line">            <span class="comment">//查询数据库获得数据            </span></span><br><span class="line">            List&lt;User&gt; all = userRepository.findAll();            </span><br><span class="line">            <span class="comment">//转换成json格式字符串            </span></span><br><span class="line">            ObjectMapper om = <span class="keyword">new</span> ObjectMapper();            </span><br><span class="line">            userListData = om.writeValueAsString(all);            </span><br><span class="line">            <span class="comment">//将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库            </span></span><br><span class="line">            redisTemplate.boundValueOps(<span class="string">"user.findAll"</span>).set(userListData);            </span><br><span class="line">            System.out.println(<span class="string">"===============从数据库获得数据==============="</span>);        </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;            </span><br><span class="line">            System.out.println(<span class="string">"===============从redis缓存中获得数据==============="</span>);        </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(userListData);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合SpringDataJpa"><a href="#整合SpringDataJpa" class="headerlink" title="整合SpringDataJpa"></a>整合SpringDataJpa</h2><h3 id="添加Spring-Data-JPA的起步依赖"><a href="#添加Spring-Data-JPA的起步依赖" class="headerlink" title="添加Spring Data JPA的起步依赖"></a>添加Spring Data JPA的起步依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springBoot JPA的起步依赖 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加数据库驱动依赖"><a href="#添加数据库驱动依赖" class="headerlink" title="添加数据库驱动依赖"></a>添加数据库驱动依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在application-properties中配置数据库和jpa的相关属性"><a href="#在application-properties中配置数据库和jpa的相关属性" class="headerlink" title="在application.properties中配置数据库和jpa的相关属性"></a>在application.properties中配置数据库和jpa的相关属性</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DB Configuration: </span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver </span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test? useUnicode=true&amp;characterEncoding=utf8 </span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root </span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#JPA Configuration: </span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">MySQL </span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true </span></span><br><span class="line"><span class="meta">spring.jpa.generate-ddl</span>=<span class="string">true spring.jpa.hibernate.ddl-auto=update </span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.naming_strategy</span>=<span class="string">org.hibernate.cfg.ImprovedNamingStrategy</span></span><br></pre></td></tr></table></figure><h3 id="创建实体配置实体"><a href="#创建实体配置实体" class="headerlink" title="创建实体配置实体"></a>创建实体配置实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 主键    </span></span><br><span class="line">    <span class="meta">@Id</span>    </span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)    </span><br><span class="line">    <span class="keyword">private</span> Long id;   </span><br><span class="line">    <span class="comment">// 用户名    </span></span><br><span class="line">    <span class="keyword">private</span> String username;    </span><br><span class="line">    <span class="comment">// 密码    </span></span><br><span class="line">    <span class="keyword">private</span> String password;    </span><br><span class="line">    <span class="comment">// 姓名    </span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//此处省略setter和getter方法... ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写UserRepository"><a href="#编写UserRepository" class="headerlink" title="编写UserRepository"></a>编写UserRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt;</span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类-1"><a href="#编写测试类-1" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span></span>=MySpringBootApplication<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        List&lt;User&gt; users = userRepository.findAll();        </span><br><span class="line">        System.out.println(users);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台打印信息"><a href="#控制台打印信息" class="headerlink" title="控制台打印信息"></a>控制台打印信息</h3><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/09.png"></p><p>如果使用JDK1.9 会报异常ClassNotFoundException:javax.xml.bind.JAXBException</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot2.0/10.png"></p><p>原因缺少jar</p><p>解决办法导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdk9需要导入如下坐标--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a>SpringBoot启动流程</h1><blockquote><p>核心分为2个步骤</p></blockquote><p>第一步: 创建SpringApplication对象</p><p>第二步: 调用SpringApplication对象的run方法启动同时返回当前容器上下文</p><blockquote><p>分析流程</p></blockquote><p>1.创建SpringApplication对象时会初始化Springboot容器</p><p>2.获取当前应用启动类型。原理：判断当前classpath是否有加载我们的servlet类返回servlet web启动方式</p><p>​    WebApplicationType有三种类型</p><p>​        a) REACTIVE 响应式WEB启动(Spring5.0新特性，基于NETTY)</p><p>​        b) NONE 不会嵌入WEB容器启动，如果需要将springboot项目放入外部服务器，则使用该种方式启动</p><p>​        c) SERVLET 基于WEB容器启动</p><p>3.setInitializers()方法读取SpringBoot包下麦呢的META-INF/spring.factories,获取到对应ApplicationContextInitializer装配到集合</p><p>4.setListeners()方法读取SpringBoot包下麦呢的META-INF/spring.factories,获取到对应ApplicationListiner装配到集合</p><p>5.mainApplicationClass获取当前运行的主函数。</p><p>6.调用SpringApplication的run方法实现启动</p><p>7.StopWatch stopWatch = new StopWatch(); 记录SpringBoot项目启动时间</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJPA-详解查询(二)</title>
      <link href="/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa02/"/>
      <url>/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa02/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-JPA-概述"><a href="#Spring-Data-JPA-概述" class="headerlink" title="Spring-Data-JPA 概述"></a>Spring-Data-JPA 概述</h1><p>基于JPA再封装的一套框架，底层还是使用第三方ORM框架，默认使用Hibernate</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h2 id="引入依赖-配置pom-xml"><a href="#引入依赖-配置pom-xml" class="headerlink" title="引入依赖[配置pom.xml]"></a>引入依赖[配置pom.xml]</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpa-day2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c3p0.version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">c3p0.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring对orm框架的支持包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hibernate end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0 beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;c3p0.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0 end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring data jpa 的坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- el beg 使用spring data jpa 必须引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- el end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h2><p>cn.itcast.service</p><p>cn.itcast.dao</p><p>cn.itcast.domain</p><h2 id="创建applicationContext-xml"><a href="#创建applicationContext-xml" class="headerlink" title="创建applicationContext.xml"></a>创建applicationContext.xml</h2><blockquote><p>Spring整合Jpa就两步</p><p>​    1.由spring创建entityManagerFactory</p><p>​    2.使用标签jpa:repositories和spring进行整合</p></blockquote><blockquote><p>提示：该文件应该在java/main/resource目录下</p><p>注意修改数据库密码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--S Spring配置[之前课程里的旧东西]--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span> &gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///jpa"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里不需要配置</span></span><br><span class="line"><span class="comment">&lt;property name="dataSource" ref="dataSource" /&gt;</span></span><br><span class="line"><span class="comment">因为数据源已经配置在entityManagerFactory中了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactoty"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.service.*.*(..))"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--E Spring配置[之前课程里的旧东西]--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--S Spring整合JPA[今天讲的新配置]--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.创建entityManagerFactory对象交给spring容器管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactoty"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置的扫描的包（实体类所在的包） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.domain"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jpa的实现厂家 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jpa的供应商适配器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置是否自动创建数据库表 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定数据库类型 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库方言：支持的特有语法 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databasePlatform"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQLDialect"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否显示sql --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jpa的方言 ：高级的特性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaDialect"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaDialect"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaProperties"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.整合spring dataJpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast.dao"</span> <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactoty"</span> &gt;</span><span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--E Spring整合JPA[今天讲的新配置]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="创建表cst-customer"><a href="#创建表cst-customer" class="headerlink" title="创建表cst_customer"></a>创建表cst_customer</h2><blockquote><p>提示：day01已经创建过了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`jpa`</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_customer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_address`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系地址'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`cst_customer`</span>(<span class="string">`cust_id`</span>,<span class="string">`cust_name`</span>,<span class="string">`cust_source`</span>,<span class="string">`cust_industry`</span>,<span class="string">`cust_level`</span>,<span class="string">`cust_address`</span>,<span class="string">`cust_phone`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'黑马程序员'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">2</span>,<span class="string">'传智播客'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">3</span>,<span class="string">'酷丁鱼'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">4</span>,<span class="string">'传智汇'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">5</span>,<span class="string">'传智专修学院'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">6</span>,<span class="string">'谷歌'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="创建实体类Customer"><a href="#创建实体类Customer" class="headerlink" title="创建实体类Customer"></a>创建实体类Customer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过注解配置映射关系"><a href="#通过注解配置映射关系" class="headerlink" title="通过注解配置映射关系"></a>通过注解配置映射关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建CustomerDao接口"><a href="#创建CustomerDao接口" class="headerlink" title="创建CustomerDao接口"></a>创建CustomerDao接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  JpaRepository&lt;操作的实体类, 实体类中主键的类型&gt; 接口中提供了简单操作数据库的方法</span></span><br><span class="line"><span class="comment"> *  JpaSpecificationExecutorr&lt;操作的是实体类&gt;接口中提供了复杂方法，比如多条件和分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;,</span></span><br><span class="line"><span class="class"><span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写测试类对接口进行测试"><a href="#编写测试类对接口进行测试" class="headerlink" title="编写测试类对接口进行测试"></a>编写测试类对接口进行测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RunWith</span>注解： 就是一个运行器，SpringJUnit4ClassRunner.class意思是让测试运行于spring环境</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ContextConfiguration</span>注解： Spring整合junit4时需要引入的spring的配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerDao.findOne(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/01.png"></p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="问题1：javax-xml-bind-JAXBException"><a href="#问题1：javax-xml-bind-JAXBException" class="headerlink" title="问题1：javax.xml.bind.JAXBException"></a>问题1：javax.xml.bind.JAXBException</h3><p>原因是使用的JDK1.9需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="问题2：org-springframework-transaction-CannotCreateTransactionException"><a href="#问题2：org-springframework-transaction-CannotCreateTransactionException" class="headerlink" title="问题2：org.springframework.transaction.CannotCreateTransactionException"></a>问题2：org.springframework.transaction.CannotCreateTransactionException</h3><p>可能是applicationContext.xml中数据库账号密码配置错了</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意：不需要设置ID，是添加，如果设置了ID，则是更新，所以能设置主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCustName(<span class="string">"李四"</span>);<span class="comment">//设置顾客姓名</span></span><br><span class="line">    customer.setCustAddress(<span class="string">"山西太原"</span>);<span class="comment">//设置顾客的住址</span></span><br><span class="line">    customer.setCustPhone(<span class="string">"1390000000"</span>);<span class="comment">//设置顾客的电话</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加成功后会返回添加进去的那个对象，所以当前对象中包含ID</span></span><br><span class="line">    Customer cust = customerDao.save(customer);</span><br><span class="line">    System.out.println(cust);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/02.png"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    customerDao.delete(<span class="number">9L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/04.png"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       注意：不需要设置ID，是添加，如果设置了ID，则是更新，所以能设置主键</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">       customer.setCustId(<span class="number">8L</span>);</span><br><span class="line">       customer.setCustName(<span class="string">"李四"</span>);<span class="comment">//设置顾客姓名</span></span><br><span class="line">       customer.setCustAddress(<span class="string">"北京"</span>);<span class="comment">//设置顾客的住址</span></span><br><span class="line">       customer.setCustPhone(<span class="string">"1390000001"</span>);<span class="comment">//设置顾客的电话</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//添加成功后会返回添加进去的那个对象，所以当前对象中包含ID</span></span><br><span class="line">       Customer cust = customerDao.save(customer);</span><br><span class="line">       System.out.println(cust);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/03.png"></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Customer customer = customerDao.findOne(<span class="number">1L</span>);</span><br><span class="line">       System.out.println(customer);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/05.png"></p><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Customer&gt; customers = customerDao.findAll();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历查询结果</span></span><br><span class="line">       <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/06.png"></p><h3 id="查询总记录数"><a href="#查询总记录数" class="headerlink" title="查询总记录数"></a>查询总记录数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = customerDao.count();</span><br><span class="line">    System.out.println(<span class="string">"一共有"</span>+count+<span class="string">"条记录"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/07.png"></p><h3 id="根据ID查询是否有记录"><a href="#根据ID查询是否有记录" class="headerlink" title="根据ID查询是否有记录"></a>根据ID查询是否有记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> exists = customerDao.exists(<span class="number">1L</span>);</span><br><span class="line">       System.out.println(exists?<span class="string">"存在"</span>:<span class="string">"不存在"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/08.png"></p><h3 id="findOne和getOne的区别"><a href="#findOne和getOne的区别" class="headerlink" title="findOne和getOne的区别"></a>findOne和getOne的区别</h3><h4 id="立刻查询findOne"><a href="#立刻查询findOne" class="headerlink" title="立刻查询findOne"></a>立刻查询findOne</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer customer = customerDao.findOne(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//注意获取到对象以后并没有操作该对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/09.png"></p><h4 id="延迟查询-getOne"><a href="#延迟查询-getOne" class="headerlink" title="延迟查询 getOne"></a>延迟查询 getOne</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Customer one = customerDao.getOne(<span class="number">1L</span>);</span><br><span class="line">       <span class="comment">//注意获取到对象后并没有操作对象</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/10.png"></p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>立刻查询：无论是否操作对象都会执行SQL</p><p>延迟查询：如果不操作对象不会执行SQL</p><h1 id="使用JPQL语句操作数据库"><a href="#使用JPQL语句操作数据库" class="headerlink" title="使用JPQL语句操作数据库"></a>使用JPQL语句操作数据库</h1><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>可以使用类似SQL的语句进行自定义查询</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要注意的是查询的是实体类和属性，不是表名和字段</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="CustomDao接口代码"><a href="#CustomDao接口代码" class="headerlink" title="CustomDao接口代码"></a>CustomDao接口代码</h3><p>在接口的方法上使用@Query注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  JpaRepository&lt;操作的实体类, 实体类中主键的类型&gt; 接口中提供了简单操作数据库的方法</span></span><br><span class="line"><span class="comment"> *  JpaSpecificationExecutorr&lt;操作的是实体类&gt;接口中提供了复杂方法，比如多条件和分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过客户名查询客户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 客户姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"from Customer where custName = ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustomerName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Customer lisi = customerDao.findByCustomerName(<span class="string">"李四"</span>);</span><br><span class="line">       System.out.println(lisi);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="红线报错"><a href="#红线报错" class="headerlink" title="红线报错"></a>红线报错</h3><p>from和?那里可能会报 from unexpected错误，不用理会，这是因为我们的JPQL语句书写不标准,当然也可以书写标准的HPQL语句，后续会讲</p><h2 id="多占位符赋值-解决红线警告"><a href="#多占位符赋值-解决红线警告" class="headerlink" title="多占位符赋值(解决红线警告)"></a>多占位符赋值(解决红线警告)</h2><blockquote><p>需求: 根据Id和姓名赋值</p></blockquote><h3 id="占位符的第一中写法"><a href="#占位符的第一中写法" class="headerlink" title="占位符的第一中写法"></a>占位符的第一中写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"from Customer where custName=? and custId=?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerNameAndId</span><span class="params">(String name, Long id)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/12.png"></p><h3 id="占位符的第二种写法"><a href="#占位符的第二种写法" class="headerlink" title="占位符的第二种写法"></a>占位符的第二种写法</h3><blockquote><p>索引必须从1开始</p><p>?后面的数字表使用第几个形式参数的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Query</span>(value = <span class="string">"from Customer where custId=?2 and custName=?1 "</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerNameAndId</span><span class="params">(String name, Long id)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/13.png"></p><h3 id="占位符的第三种写法"><a href="#占位符的第三种写法" class="headerlink" title="占位符的第三种写法"></a>占位符的第三种写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"from Customer where custId=:custId and custName=:custName "</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerNameAndId</span><span class="params">(@Param(<span class="string">"custName"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"custId"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/14.png"></p><h3 id="完全符合规范的姿势"><a href="#完全符合规范的姿势" class="headerlink" title="完全符合规范的姿势"></a>完全符合规范的姿势</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select c from Customer c where c.custId=:custId and c.custName=:custName "</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerNameAndId</span><span class="params">(@Param(<span class="string">"custName"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"custId"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><h2 id="根据客户名查询"><a href="#根据客户名查询" class="headerlink" title="根据客户名查询"></a>根据客户名查询</h2><blockquote><p>接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"from Customer where custName = ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustomerName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustomerName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Customer lisi = customerDao.findByCustomerName(<span class="string">"李四"</span>);</span><br><span class="line">       System.out.println(lisi);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/11.png"></p><h2 id="更新或者删除"><a href="#更新或者删除" class="headerlink" title="更新或者删除"></a>更新或者删除</h2><h3 id="CustomDao接口中的代码"><a href="#CustomDao接口中的代码" class="headerlink" title="CustomDao接口中的代码"></a>CustomDao接口中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update Customer  set custPhone=:custPhone where custId=:custId"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePhoneById</span><span class="params">(@Param(<span class="string">"custId"</span>)</span> Long id,@<span class="title">Param</span><span class="params">(<span class="string">"custPhone"</span>)</span>String phone)</span>;</span><br></pre></td></tr></table></figure><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdatePhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">customerDao.updatePhoneById(<span class="number">7L</span>,<span class="string">"1388887777"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可能出现的问题-1"><a href="#可能出现的问题-1" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><h4 id="问题1：Not-supported-for-DML-operations"><a href="#问题1：Not-supported-for-DML-operations" class="headerlink" title="问题1：Not supported for DML operations"></a>问题1：Not supported for DML operations</h4><p>原因是因为接口上没有添加@Modifying 注解</p><h4 id="问题2：Executing-an-update-delete-query-nested-exception-is-javax-persistence"><a href="#问题2：Executing-an-update-delete-query-nested-exception-is-javax-persistence" class="headerlink" title="问题2：Executing an update/delete query; nested exception is javax.persistence"></a>问题2：Executing an update/delete query; nested exception is javax.persistence</h4><p>原因是测试类没有开启事务，需要加@org.springframework.transaction.annotation.Transactional 注解</p><h4 id="问题3：数据库没有更新成功"><a href="#问题3：数据库没有更新成功" class="headerlink" title="问题3：数据库没有更新成功"></a>问题3：数据库没有更新成功</h4><p>测试方法默认执行完后要事务回滚，修改为提交，在测试类添加@Rollback(false)注解</p><h1 id="使用原生SQL操作数据库"><a href="#使用原生SQL操作数据库" class="headerlink" title="使用原生SQL操作数据库"></a>使用原生SQL操作数据库</h1><h2 id="使用原生SQL查询全部"><a href="#使用原生SQL查询全部" class="headerlink" title="使用原生SQL查询全部"></a>使用原生SQL查询全部</h2><h3 id="接口代码"><a href="#接口代码" class="headerlink" title="接口代码"></a>接口代码</h3><blockquote><p>需要在@Query注解中指定属性navtiveQuery=true 表示使用的是原生SQL</p><p>这里SQL语句我没有写 select * … ，框架认为是不标准的写法要通过表的别名.*操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from cst_customer "</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>###测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllBySql</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List&lt;Customer&gt; customers = customerDao.selectAll();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/15.png"></p><h2 id="使用原生SQL模糊查询"><a href="#使用原生SQL模糊查询" class="headerlink" title="使用原生SQL模糊查询"></a>使用原生SQL模糊查询</h2><h3 id="接口代码-1"><a href="#接口代码-1" class="headerlink" title="接口代码"></a>接口代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这里如果占位符使用的是? 那么?两边不能使用%，如果使用的是?位置 或者 :变量名 这种占位符则可以使用%</span></span><br><span class="line"><span class="comment">    select * from cst_customer c where cust_name LIKE %?%           错误的写法</span></span><br><span class="line"><span class="comment">    select * from cst_customer c where cust_name LIKE %?1%          正确的写法</span></span><br><span class="line"><span class="comment">    select * from cst_customer c where cust_name LIKE %:cust_name%  正确的写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from cst_customer c where cust_name LIKE ?"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">selectByCustomerName</span><span class="params">( String name)</span></span>;<span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNameWithSQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果SQL语句中已经使用%，那么这里传参的时候就不要再添加%号了</span></span><br><span class="line">    List&lt;Customer&gt; customers = customerDao.selectByCustomerName(<span class="string">"传智"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/16.png"></p><h2 id="使用原生SQL修改或删除"><a href="#使用原生SQL修改或删除" class="headerlink" title="使用原生SQL修改或删除"></a>使用原生SQL修改或删除</h2><h3 id="接口代码-2"><a href="#接口代码-2" class="headerlink" title="接口代码"></a>接口代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过SQL语句更新客户名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"update cst_customer set cust_name = :cust_name where cust_id=:cust_id"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomerNameByIdWithSQL</span><span class="params">(@Param(<span class="string">"cust_name"</span>)</span> String name,@<span class="title">Param</span><span class="params">(<span class="string">"cust_id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithSQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">       customerDao.updateCustomerNameByIdWithSQL(<span class="string">"传智播客客"</span>,<span class="number">2L</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/17.png"></p><h1 id="自定义简单查询"><a href="#自定义简单查询" class="headerlink" title="自定义简单查询"></a>自定义简单查询</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>自定义的简单查询就是根据方法名来自动生成 SQL，主要的语法是 findXXBy、readAXXBy、queryXXBy、countXXBy、getXXBy 后面跟属性名称：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByUsername</span><span class="params">(String userName)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>也可以加一些关键字 And、Or：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findByUsernameOrAddress</span><span class="params">(String username, String address)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>修改、删除、统计也是类似语法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Long <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function">Long <span class="title">countByUsername</span><span class="params">(String userName)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>基本上 SQL 体系中的关键词都可以使用，如 LIKE、IgnoreCase、OrderBy。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByAddressLike</span><span class="params">(String address)</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findByAddressIgnoreCase</span><span class="params">(String address)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByAddressOrderByBalanceDesc</span><span class="params">(String address)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="方法命名规范"><a href="#方法命名规范" class="headerlink" title="方法命名规范"></a>方法命名规范</h2><table><thead><tr><th align="left">Keyword</th><th align="left">Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td align="left">And</td><td align="left">findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td align="left">Or</td><td align="left">findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td align="left">Is,Equals</td><td align="left">findByFirstnameIs,findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td align="left">Between</td><td align="left">findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td align="left">LessThan</td><td align="left">findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td align="left">LessThanEqual</td><td align="left">findByAgeLessThanEqual</td><td>… where x.age &lt;= ?1</td></tr><tr><td align="left">GreaterThan</td><td align="left">findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td align="left">GreaterThanEqual</td><td align="left">findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td align="left">After</td><td align="left">findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td align="left">Before</td><td align="left">findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td align="left">IsNull</td><td align="left">findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td align="left">IsNotNull,NotNull</td><td align="left">findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td align="left">Like</td><td align="left">findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td align="left">NotLike</td><td align="left">findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td align="left">StartingWith</td><td align="left">findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td align="left">EndingWith</td><td align="left">findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td align="left">Containing</td><td align="left">findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td align="left">OrderBy</td><td align="left">findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td align="left">Not</td><td align="left">findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td align="left">In</td><td align="left">findByAgeIn(Collection<Age> ages)</td><td>… where x.age in ?1</td></tr><tr><td align="left">NotIn</td><td align="left">findByAgeNotIn(Collection<Age> age)</td><td>… where x.age not in ?1</td></tr><tr><td align="left">TRUE</td><td align="left">findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td align="left">FALSE</td><td align="left">findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td align="left">IgnoreCase</td><td align="left">findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><p>##6.2基本查询 </p><h3 id="方法命名格式"><a href="#方法命名格式" class="headerlink" title="方法命名格式"></a>方法命名格式</h3><blockquote><p>属性名首字母要大写</p></blockquote><p>查询一个实体类：findBy<strong>属性名1</strong>And<strong>属性名2</strong></p><p>查询多个实体类：findAllBy<strong>属性名1</strong>And<strong>属性名2</strong></p><h3 id="接口代码-3"><a href="#接口代码-3" class="headerlink" title="接口代码"></a>接口代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生成的SQL select * from cst_customer where cust_name = ?</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> custName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustName</span><span class="params">(String custName)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Customer customer = customerDao.findByCustName(<span class="string">"传智汇"</span>);</span><br><span class="line">       System.out.println(customer);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/18.png"></p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="方法命名格式-1"><a href="#方法命名格式-1" class="headerlink" title="方法命名格式"></a>方法命名格式</h3><blockquote><p>属性名首字母要大写</p></blockquote><p>查询一个实体类：findBy<strong>属性名1</strong>And<strong>属性名2</strong>+Like</p><p>查询多个实体类：findAllBy<strong>属性名1</strong>And<strong>属性名2</strong>+Like</p><h3 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/20.png"></p><h3 id="接口代码-4"><a href="#接口代码-4" class="headerlink" title="接口代码"></a>接口代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个条件模糊查询</span></span><br><span class="line"><span class="comment">     * 格式 属性名后加Like， findAllBy属性名Like()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllByCustNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用多个条件模糊查询</span></span><br><span class="line"><span class="comment">     * 格式 属性名后加Like就好，findAllBy属性名1LikeAnd属性名2Like</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     select * from 表名 where custphone like ? or custName like</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//select * from 表名 where cust_industry like ? or cust_name liek ?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAllByCustIndustryLikeOrCustNameLike</span><span class="params">(String industry, String name)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Customer&gt; customers = customerDao.findAllByCustNameLike(<span class="string">"%传智%"</span>);</span><br><span class="line">    System.out.println(customers.size());</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; li = dao.findAllByCustIndustryLikeOrCustNameLike(<span class="string">"教%"</span>, <span class="string">"传智%"</span>);</span><br><span class="line">    System.out.println(li.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa02/19.png"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringDataJPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJPA-动态查询和多表查询(三)</title>
      <link href="/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa03/"/>
      <url>/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa03/</url>
      
        <content type="html"><![CDATA[<h1 id="Specification动态查询"><a href="#Specification动态查询" class="headerlink" title="Specification动态查询"></a>Specification动态查询</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>Dao接口必须继承JpaSpecificationExecutor<T>接口</p><h2 id="能够使用动态查询的方法"><a href="#能够使用动态查询的方法" class="headerlink" title="能够使用动态查询的方法"></a>能够使用动态查询的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="comment">//根据条件查询一个对象</span></span><br><span class="line"> <span class="function">T <span class="title">findOne</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">   <span class="comment">//根据条件查询集合</span></span><br><span class="line"> <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">   <span class="comment">//根据条件分页查询</span></span><br><span class="line"> <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Pageable pageable)</span></span>;</span><br><span class="line">   <span class="comment">//排序查询查询</span></span><br><span class="line"> <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Sort sort)</span></span>;</span><br><span class="line">   <span class="comment">//统计查询</span></span><br><span class="line"> <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h3 id="引入依赖-配置pom-xml"><a href="#引入依赖-配置pom-xml" class="headerlink" title="引入依赖[配置pom.xml]"></a>引入依赖[配置pom.xml]</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpa-day2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c3p0.version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">c3p0.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring对orm框架的支持包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hibernate end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0 beg --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;c3p0.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0 end --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring data jpa 的坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- el beg 使用spring data jpa 必须引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- el end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h3><p>cn.itcast.service</p><p>cn.itcast.dao</p><p>cn.itcast.domain</p><h3 id="创建applicationContext-xml"><a href="#创建applicationContext-xml" class="headerlink" title="创建applicationContext.xml"></a>创建applicationContext.xml</h3><blockquote><p>Spring整合Jpa就两步</p><p>​    1.由spring创建entityManagerFactory</p><p>​    2.使用标签jpa:repositories和spring进行整合</p></blockquote><blockquote><p>提示：该文件应该在java/main/resource目录下</p><p>注意修改数据库密码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">"http://www.springframework.org/schema/jdbc"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--S Spring配置[之前课程里的旧东西]--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span> &gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///jpa"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里不需要配置</span></span><br><span class="line"><span class="comment">&lt;property name="dataSource" ref="dataSource" /&gt; </span></span><br><span class="line"><span class="comment">因为数据源已经配置在entityManagerFactory中了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactoty"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.service.*.*(..))"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--E Spring配置[之前课程里的旧东西]--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--S Spring整合JPA[今天讲的新配置]--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.创建entityManagerFactory对象交给spring容器管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactoty"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置的扫描的包（实体类所在的包） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.domain"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jpa的实现厂家 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"persistenceProvider"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.hibernate.jpa.HibernatePersistenceProvider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jpa的供应商适配器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置是否自动创建数据库表 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"generateDdl"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--指定数据库类型 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"MYSQL"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库方言：支持的特有语法 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databasePlatform"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.dialect.MySQLDialect"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否显示sql --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"showSql"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jpa的方言 ：高级的特性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaDialect"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaDialect"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaProperties"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.整合spring dataJpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast.dao"</span> <span class="attr">transaction-manager-ref</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactoty"</span> &gt;</span><span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--E Spring整合JPA[今天讲的新配置]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建表cst-customer"><a href="#创建表cst-customer" class="headerlink" title="创建表cst_customer"></a>创建表cst_customer</h3><blockquote><p>提示：day01已经创建过了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`jpa`</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_customer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_address`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系地址'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`cst_customer`</span>(<span class="string">`cust_id`</span>,<span class="string">`cust_name`</span>,<span class="string">`cust_source`</span>,<span class="string">`cust_industry`</span>,<span class="string">`cust_level`</span>,<span class="string">`cust_address`</span>,<span class="string">`cust_phone`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'黑马程序员'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">2</span>,<span class="string">'传智播客'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">3</span>,<span class="string">'酷丁鱼'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">4</span>,<span class="string">'传智汇'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">5</span>,<span class="string">'传智专修学院'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">6</span>,<span class="string">'谷歌'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="创建实体类Customer"><a href="#创建实体类Customer" class="headerlink" title="创建实体类Customer"></a>创建实体类Customer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过注解配置映射关系"><a href="#通过注解配置映射关系" class="headerlink" title="通过注解配置映射关系"></a>通过注解配置映射关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建CustomerDao接口"><a href="#创建CustomerDao接口" class="headerlink" title="创建CustomerDao接口"></a>创建CustomerDao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  JpaRepository&lt;操作的实体类, 实体类中主键的类型&gt; 接口中提供了简单操作数据库的方法</span></span><br><span class="line"><span class="comment"> *  JpaSpecificationExecutorr&lt;操作的是实体类&gt;接口中提供了复杂方法，比如多条件和分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;,</span></span><br><span class="line"><span class="class"><span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><blockquote><p>需求：查询姓名=李四的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.domain.Specification;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.criteria.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对 CustomerDao 接口的多条件查询演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoSpecificationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据客户名进行查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByCustNameQueryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//生成的SQL select * forom cst_customer where cust_name = "李四"</span></span><br><span class="line">        Customer customer = customerDao.findOne(<span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * root : 可以获取要操作的属性</span></span><br><span class="line"><span class="comment">             * criteriaBuilder : 构建查询条件</span></span><br><span class="line"><span class="comment">             生成的SQL语句 select * from cst_customer where cust_name =  "李四"</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//custName是Customer实体类的属性的名字，不是表中的字段名</span></span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                <span class="comment">//添加查询条件 where custName="李四"</span></span><br><span class="line">                Predicate predicate = criteriaBuilder.equal(custName, <span class="string">"李四"</span>);</span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/01.png"></p><h2 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h2><p>请查看1.4内容</p><h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><blockquote><p>需求：查询姓名=李四，电话=1390000000的客户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manyConditionsQueryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer customer = customerDao.findOne(<span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * select * from cst_customer where cust_name ="李四" and  cust_phone = '139xxx'</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//条件1：客户名=李四</span></span><br><span class="line">            Predicate p1 = criteriaBuilder.equal(root.get(<span class="string">"custName"</span>), <span class="string">"李四"</span>);</span><br><span class="line">            <span class="comment">//条件2：电话=1390000000</span></span><br><span class="line">            Predicate p2 = criteriaBuilder.equal(root.get(<span class="string">"custPhone"</span>), <span class="string">"1390000000"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把两个查询条件连接到一起</span></span><br><span class="line">            <span class="comment">////custName="李四" or custPhone="1390000000"</span></span><br><span class="line">            <span class="comment">//Predicate p3 = criteriaBuilder.or(p1, p2);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">////custName="李四" and custPhone="1390000000"</span></span><br><span class="line">            Predicate p3 = criteriaBuilder.and(p1, p2);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> p3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/02.png"></p><h2 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h2><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p>模糊匹配有like，&gt;, &lt; ,&gt;=,&lt;=</p><p>对应的方法就是like , gt,lt,ge,le</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>1.从root中获取要操作的属性</p><p>2.调用模糊匹配方法，传入两个参数，第一个是path.as(属性的类型.class),第二个是属性值</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><blockquote><p>查询客户名包含传智播客，并且ID&gt;=2的用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dimQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer cus = customerDao.findOne(<span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断客户名包含传智播客 使用like方法</span></span><br><span class="line">            Predicate p1 = criteriaBuilder.like(root.get("custName").as(String.class), "%传智播客%");</span><br><span class="line">            <span class="comment">//判断ID&gt;=2 使用ge方法</span></span><br><span class="line">            Predicate p2 = criteriaBuilder.ge(root.get(<span class="string">"custId"</span>).as(Long<span class="class">.<span class="keyword">class</span>), 2<span class="title">L</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//custName like "%传智播客%" and custId&gt;=2</span></span><br><span class="line">            <span class="keyword">return</span> criteriaBuilder.and(p1, p2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(cus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/03.png"></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="一个排序条件"><a href="#一个排序条件" class="headerlink" title="一个排序条件"></a>一个排序条件</h3><blockquote><p>需求：按照ID降序查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据一个条件排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderByTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//根据ID降序排序</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"custId"</span>);</span><br><span class="line">    <span class="comment">//查询条件传入null 表示 查询全部</span></span><br><span class="line">    List&lt;Customer&gt; all = customerDao.findAll(<span class="keyword">null</span>, sort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : all) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/04.png"></p><h3 id="多个排序条件"><a href="#多个排序条件" class="headerlink" title="多个排序条件"></a>多个排序条件</h3><blockquote><p>按照电话降序排序，如果电话相同按照ID升序排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据多个条件排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderByTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置排序条件</span></span><br><span class="line">    Sort.Order o1 = <span class="keyword">new</span> Sort.Order(Sort.Direction.DESC, <span class="string">"custPhone"</span>);</span><br><span class="line">    Sort.Order o2 = <span class="keyword">new</span> Sort.Order(Sort.Direction.ASC, <span class="string">"custId"</span>);</span><br><span class="line"></span><br><span class="line">    ArrayList orders = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">//Order对象添加进去的顺序就是排序顺序</span></span><br><span class="line">    orders.add(o1);</span><br><span class="line">    orders.add(o2);</span><br><span class="line"></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(orders);<span class="comment">//把排序条件设置到Sort对象中</span></span><br><span class="line">    <span class="comment">//查询条件传入null 表示 查询全部</span></span><br><span class="line">    <span class="comment">//select * from cst_customer order by cust_Phone desc, cust_Id asc</span></span><br><span class="line">    List&lt;Customer&gt; all = customerDao.findAll(<span class="keyword">null</span>, sort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : all) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/05.png"></p><h3 id="使用CriteriaQuery完成排序"><a href="#使用CriteriaQuery完成排序" class="headerlink" title="使用CriteriaQuery完成排序"></a>使用CriteriaQuery完成排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderTest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Customer&gt; all = customerDao.findAll(<span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//设置查询条件,可以不写的</span></span><br><span class="line">            query.where(cb.like(root.get("custName").as(String.class),"%传%"));</span><br><span class="line">            query.orderBy(cb.desc(root.get(<span class="string">"custPhone"</span>)), cb.asc(root.get(<span class="string">"custId"</span>)));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> query.getRestriction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : all) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/06.png"></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><blockquote><p>需求 查询ID=4,5,6的数据</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/07.png"></p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一个参数表示查询哪页的数据，页码从0开始</span></span><br><span class="line">    <span class="comment">//第二个参数表示要查询几条记录</span></span><br><span class="line">    PageRequest pageRequest = <span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    Page&lt;Customer&gt; all = customerDao.findAll(<span class="keyword">null</span>, pageRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : all) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/08.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>需求，网页需要一个搜索功能，如果用输入客户名，则可以根据客户名搜索，如果输入电话，则可以根据电话搜索，如果都输入了就根据用户名和电话搜索，问，service层中的方法应该如何实现</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/09.png"></p><blockquote><p>代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">search</span><span class="params">(String custName, String custPhone)</span></span>&#123;</span><br><span class="line">    List&lt;Customer&gt; customers = customerDao.findAll(<span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">            List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//拼接客户名</span></span><br><span class="line">            <span class="keyword">if</span>(custName!=<span class="keyword">null</span> &amp;&amp; !custName.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                Predicate p = criteriaBuilder.like(root.get("custName").as(String.class), "%" + custName + "%");</span><br><span class="line">                list.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拼接电话</span></span><br><span class="line">            <span class="keyword">if</span>(custPhone!=<span class="keyword">null</span> &amp;&amp; !custPhone.trim().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                Predicate p = criteriaBuilder.like(root.get("custPhone").as(String.class), "%" + custPhone + "%");</span><br><span class="line">                list.add(p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把查询条件用and进行拼接</span></span><br><span class="line">            Predicate p = criteriaBuilder.and(list.toArray(<span class="keyword">new</span> Predicate[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> customers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Customer&gt; customers = search(<span class="string">"传"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/10.png"></p><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="一对多和多对一"><a href="#一对多和多对一" class="headerlink" title="一对多和多对一"></a>一对多和多对一</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>一个Customer[这里用户表示公司]对应多个联系人</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><blockquote><p>为了避免和之前的数据产生冲突，在讲多表查询的时候表名和实体类名后面都会加数字进行区分</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_customer2`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer2`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_address`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系地址'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">117</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_linkman2`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_linkman2`</span> (</span><br><span class="line">  <span class="string">`lkm_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'联系人编号(主键)'</span>,</span><br><span class="line">  <span class="string">`lkm_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人姓名'</span>,</span><br><span class="line">  <span class="string">`lkm_gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人性别'</span>,</span><br><span class="line">  <span class="string">`lkm_phone`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人办公电话'</span>,</span><br><span class="line">  <span class="string">`lkm_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人手机'</span>,</span><br><span class="line">  <span class="string">`lkm_email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人邮箱'</span>,</span><br><span class="line">  <span class="string">`lkm_position`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人职位'</span>,</span><br><span class="line">  <span class="string">`lkm_memo`</span> <span class="built_in">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人备注'</span>,</span><br><span class="line">  <span class="string">`lkm_cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户id(外键)'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`lkm_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> (<span class="string">`lkm_cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">23</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类及映射关系"><a href="#创建实体类及映射关系" class="headerlink" title="创建实体类及映射关系"></a>创建实体类及映射关系</h3><blockquote><p>客户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"cst_customer2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>联系人</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_linkman2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long lkmId; <span class="comment">//联系人编号(主键)</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmName;<span class="comment">//联系人姓名</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_gender"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmGender;<span class="comment">//联系人性别</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmPhone;<span class="comment">//联系人办公电话</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_mobile"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmMobile;<span class="comment">//联系人手机</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmEmail;<span class="comment">//联系人邮箱</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_position"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmPosition;<span class="comment">//联系人职位</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"lkm_memo"</span>)</span><br><span class="line">    <span class="keyword">private</span> String lkmMemo;<span class="comment">//联系人备注</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLkmId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmId</span><span class="params">(Long lkmId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmId = lkmId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmName</span><span class="params">(String lkmName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmName = lkmName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmGender</span><span class="params">(String lkmGender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmGender = lkmGender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPhone</span><span class="params">(String lkmPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmPhone = lkmPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMobile</span><span class="params">(String lkmMobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmMobile = lkmMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmEmail</span><span class="params">(String lkmEmail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmEmail = lkmEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmPosition</span><span class="params">(String lkmPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmPosition = lkmPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLkmMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lkmMemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkmMemo</span><span class="params">(String lkmMemo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lkmMemo = lkmMemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LinkMan&#123;"</span> +</span><br><span class="line">                <span class="string">"lkmId="</span> + lkmId +</span><br><span class="line">                <span class="string">", lkmName='"</span> + lkmName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmGender='"</span> + lkmGender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmPhone='"</span> + lkmPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmMobile='"</span> + lkmMobile + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmEmail='"</span> + lkmEmail + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmPosition='"</span> + lkmPosition + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lkmMemo='"</span> + lkmMemo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一对多关系配置及测试"><a href="#一对多关系配置及测试" class="headerlink" title="一对多关系配置及测试"></a>一对多关系配置及测试</h3><blockquote><p>使用一对多的好处：</p><p>​    通过一的一方可以直接获取多的一方</p><p>​    保存一的一方的时候多的一方也会被顺便保存</p><p>具体使用方式请查看测试类</p></blockquote><blockquote><p>1、说明</p></blockquote><p>客户是一的一方</p><p>联系人是多的一方</p><blockquote><p> 2.在客户实体类（Customer2）中添加集合属性，存储所有的联系人</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;LinkMan2&gt; linkMan2s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;LinkMan2&gt; <span class="title">getLinkMan2s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> linkMan2s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkMan2s</span><span class="params">(Set&lt;LinkMan2&gt; linkMan2s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.linkMan2s = linkMan2s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.配置映射关系·</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OneToMany</span> 说明是一对多关系</span></span><br><span class="line"><span class="comment"> *      targetEntity:关联指定的实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@JoinColumn</span> 配置外键</span></span><br><span class="line"><span class="comment"> *      name 副表的外键</span></span><br><span class="line"><span class="comment"> *      referencedColumnName 主表的主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@OneToMany</span>(targetEntity = LinkMan2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">JoinColumn</span>(<span class="title">name</span></span>=<span class="string">"lkm_cust_id"</span>,referencedColumnName = <span class="string">"cust_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan2&gt; linkMan2s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;LinkMan2&gt; <span class="title">getLinkMan2s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> linkMan2s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkMan2s</span><span class="params">(Set&lt;LinkMan2&gt; linkMan2s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.linkMan2s = linkMan2s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.创建Dao接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao2</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer2</span>,<span class="title">Long</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LinkManDao2</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">LinkMan2</span>,<span class="title">Long</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">LinkMan2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer2;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.LinkMan2;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One2ManyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao2 customerDao2 ;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkManDao2 linkManDao2;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkMan2 lm1 = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">        lm1.setLkmEmail(<span class="string">"kefuA@foxmail.com"</span>);</span><br><span class="line">        lm1.setLkmGender(<span class="string">"男"</span>);</span><br><span class="line">        lm1.setLkmMobile(<span class="string">"110"</span>);</span><br><span class="line">        lm1.setLkmName(<span class="string">"客服A"</span>);</span><br><span class="line"></span><br><span class="line">        LinkMan2 lm2 = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">        lm2.setLkmEmail(<span class="string">"kefuB@foxmail.com"</span>);</span><br><span class="line">        lm2.setLkmGender(<span class="string">"女"</span>);</span><br><span class="line">        lm2.setLkmMobile(<span class="string">"119"</span>);</span><br><span class="line">        lm2.setLkmName(<span class="string">"客服B"</span>);</span><br><span class="line"></span><br><span class="line">        Customer2 customer2 = <span class="keyword">new</span> Customer2();</span><br><span class="line">        customer2.setCustName(<span class="string">"JACK"</span>);</span><br><span class="line"></span><br><span class="line">        customer2.getLinkMan2s().add(lm1);<span class="comment">//通过客户实体类维护和联系人之间的关系</span></span><br><span class="line">        customer2.getLinkMan2s().add(lm2);<span class="comment">//通过客户实体类维护和联系人之间的关系</span></span><br><span class="line">        customerDao2.save(customer2);<span class="comment">//保存客户</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        linkManDao2.save(lm1);<span class="comment">//保存联系人</span></span><br><span class="line">        linkManDao2.save(lm2);<span class="comment">//保存联系人</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/12.png"></p><h3 id="多对一关系配置及测试"><a href="#多对一关系配置及测试" class="headerlink" title="多对一关系配置及测试"></a>多对一关系配置及测试</h3><blockquote><p>1.说明</p></blockquote><p>客户(Customer2)[主表]是一的一方</p><p>联系人(LinkMan2)[副表]是多的一方</p><p>我们需要在多的一方中配置关系</p><blockquote><p>2.在LinkMan2中添加属性CUstomer2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Customer2 customer2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer2 <span class="title">getCustomer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer2</span><span class="params">(Customer2 customer2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer2 = customer2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.添加映射关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">targetEntity 指定要关联的实体类</span></span><br><span class="line"><span class="comment"><span class="doctag">@JoinColumn</span> 配置外键 </span></span><br><span class="line"><span class="comment">name 副表中外键的名字</span></span><br><span class="line"><span class="comment">referencedColumnName 主表中主键的名字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ManyToOne</span>(targetEntity = Customer2<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">JoinColumn</span>(<span class="title">name</span></span>=<span class="string">"lkm_cust_id"</span>,referencedColumnName = <span class="string">"cust_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Customer2 customer2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer2 <span class="title">getCustomer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer2</span><span class="params">(Customer2 customer2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer2 = customer2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer2;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.LinkMan2;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Many2OneTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao2 customerDao2;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkManDao2 linkManDao2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LinkMan2&gt; all = linkManDao2.findAll();</span><br><span class="line">        <span class="keyword">for</span> (LinkMan2 linkMan2 : all) &#123;</span><br><span class="line">            Customer2 customer2 = linkMan2.getCustomer2();</span><br><span class="line">            System.out.println(customer2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkMan2 lm = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">        lm.setLkmEmail(<span class="string">"kefuB@foxmail.com"</span>);</span><br><span class="line">        lm.setLkmGender(<span class="string">"女"</span>);</span><br><span class="line">        lm.setLkmMobile(<span class="string">"119"</span>);</span><br><span class="line">        lm.setLkmName(<span class="string">"客服BBBB"</span>);</span><br><span class="line"></span><br><span class="line">        Customer2 customer2 = <span class="keyword">new</span> Customer2();</span><br><span class="line">        customer2.setCustName(<span class="string">"JACKBBB"</span>);</span><br><span class="line">        lm.setCustomer2(customer2);<span class="comment">//设置关系</span></span><br><span class="line">        customerDao2.save(customer2);</span><br><span class="line">        linkManDao2.save(lm);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/11.png"></p><h3 id="放弃关系维护"><a href="#放弃关系维护" class="headerlink" title="放弃关系维护"></a>放弃关系维护</h3><blockquote><p>为什么要放弃关系维护</p></blockquote><p>在多对一的情况下保存用户和客户只需要2条SQL，都是INSERT</p><p>在一对多的情况下保存用户和客户需要3条SQL语句，2条INSERT,1条UPDATE</p><p>如果双向一对多的情况下，可能会出现一下情况</p><blockquote><p>问题代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer2;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.LinkMan2;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManyToOne2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao2 customerDao2 ;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkManDao2 linkManDao2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LinkMan2 linkMan = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">        linkMan.setLkmEmail(<span class="string">"郝美丽@foxmail.com"</span>);</span><br><span class="line">        linkMan.setLkmGender(<span class="string">"女"</span>);</span><br><span class="line">        linkMan.setLkmMobile(<span class="string">"10086"</span>);</span><br><span class="line">        linkMan.setLkmName(<span class="string">"郝美丽"</span>);</span><br><span class="line"></span><br><span class="line">        Customer2 customer = <span class="keyword">new</span> Customer2();</span><br><span class="line">        customer.setCustName(<span class="string">"客户"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过联系人维护关系</span></span><br><span class="line">        linkMan.setCustomer2(customer);</span><br><span class="line">        <span class="comment">//通过客户维护关系</span></span><br><span class="line">        customer.getLinkMan2s().add(linkMan);</span><br><span class="line"></span><br><span class="line">        customerDao2.save(customer);</span><br><span class="line">        linkManDao2.save(linkMan);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/13.png"></p><blockquote><p>问题</p></blockquote><p>上面代码两个实体类都在维护关系，如果由联系人维护只需要执行2条SQL，如果有客户联系只需要执行3条SQL。运行后发现执行了3条SQL，说明是有客户实体类维护关系的，如果可以由联系人实体类维护关系岂不是更好。</p><blockquote><p>解决办法</p></blockquote><p>其中一个实体类放弃关系的维护，最好客户实体类放弃，因为联系人维护关系可以少执行一条SQL语句</p><p>修改客户实体类的OneToMany注解,并删除@JoinColumn注解，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mappedBy 关系由另一个实体类维护，值是另一个实体类中属性的名字</span></span><br><span class="line"><span class="meta">@OneToMany</span>(mappedBy = <span class="string">"customer2"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan2&gt; linkMan2s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><blockquote><p>概念</p></blockquote><p>操作一个实体类对象的同时会操作另一个实体类。</p><blockquote><p>注意事项</p></blockquote><p>1.级联操作一定明确操作主体</p><p>2.明确了操作主体后，需要在操作主体上指明允许级联操作</p><p>​    操作方式：在@OnetToMany、@ManyToOne、@ManyToMany注解中添加属性cascade = CascadeType.ALL</p><p>​    cascade 属性说明</p><p>​        定义<strong>源实体</strong>和关联的<strong>目标实体</strong>间的级联关系。当对<strong>源实体</strong>进行操作时，是否对关联的<strong>目标实体</strong>也做相同的操作。默认没有级联操作。该参数的可选值有：CascadeType.PERSIST（级联新建）CascadeType.REMOVE（级联删除）CascadeType.REFRESH（级联刷新）CascadeType.MERGE（级联更新）CascadeType.ALL（包含以上四项）</p><h4 id="级联保存"><a href="#级联保存" class="headerlink" title="级联保存"></a>级联保存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存一的一方的同时多的一方会自动被添加到数据库</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">      LinkMan2 lm1 = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">       lm1.setLkmEmail(<span class="string">"kefuA@foxmail.com"</span>);</span><br><span class="line">       lm1.setLkmGender(<span class="string">"男"</span>);</span><br><span class="line">       lm1.setLkmMobile(<span class="string">"110"</span>);</span><br><span class="line">       lm1.setLkmName(<span class="string">"客服A"</span>);</span><br><span class="line"></span><br><span class="line">       LinkMan2 lm2 = <span class="keyword">new</span> LinkMan2();</span><br><span class="line">       lm2.setLkmEmail(<span class="string">"kefuB@foxmail.com"</span>);</span><br><span class="line">       lm2.setLkmGender(<span class="string">"女"</span>);</span><br><span class="line">       lm2.setLkmMobile(<span class="string">"119"</span>);</span><br><span class="line">       lm2.setLkmName(<span class="string">"客服B"</span>);</span><br><span class="line"></span><br><span class="line">       Customer2 customer2 = <span class="keyword">new</span> Customer2();</span><br><span class="line">       customer2.setCustName(<span class="string">"JACK"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           用于关联联系人的，关联后在保存客户的同时就会顺便保存联系人</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       customer2.getLinkMan2s().add(lm1);</span><br><span class="line">       customer2.getLinkMan2s().add(lm2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">           关联外键的</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       lm1.setCustomer2(customer2);</span><br><span class="line">       lm2.setCustomer2(customer2);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//这里直接保存客户实体类就可以，联系人实体类会被自动保存</span></span><br><span class="line">       customer2Dao.save(customer2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer2 c = customerDao2.findOne(<span class="number">13L</span>);</span><br><span class="line">    <span class="comment">//与c用户相关联的联系人也会被删除</span></span><br><span class="line">    customerDao2.delete(c);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/14.png"></p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>一个用户(User)对应多个角色(Role)</p><p>一个角色(Role)可以对应多个用户(User)</p><h3 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h3><p>这里不手动创建了，直接由框架自己生成表</p><h3 id="编写实体类及映射关系"><a href="#编写实体类及映射关系" class="headerlink" title="编写实体类及映射关系"></a>编写实体类及映射关系</h3><blockquote><p>用户</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"role_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Long roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>角色</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多对多关系配置</p></blockquote><blockquote><p>1.给用户实体类(User)添加属性及映射关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span>(targetEntity = Role<span class="class">.<span class="keyword">class</span>,<span class="title">cascade</span> </span>= CascadeType.ALL)</span><br><span class="line"><span class="comment">//JoinTable会生成中间表，表名叫做sys_user_role</span></span><br><span class="line"><span class="meta">@JoinTable</span>(</span><br><span class="line">    name = <span class="string">"sys_user_role"</span>,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        joinColumns,配置外键(这里是配置中间表与当前用户表的关系)</span></span><br><span class="line"><span class="comment">        name:副表(中间表)中的外键的名字</span></span><br><span class="line"><span class="comment">        referencedColumnName主表(用户表)的主键</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        joinColumns = &#123;</span><br><span class="line">            <span class="meta">@JoinColumn</span>(name = <span class="string">"sys_user_id"</span>,referencedColumnName = <span class="string">"user_id"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        inverseJoinColumns,配置另一个表的外键(这里是配置中间与角色表的关系)</span></span><br><span class="line"><span class="comment">        name:副表(中间表)中的外键的名字</span></span><br><span class="line"><span class="comment">        referencedColumnName主表(用户表)的主键</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        inverseJoinColumns = &#123;</span><br><span class="line">            <span class="meta">@JoinColumn</span>(name = <span class="string">"sys_role_id"</span>,referencedColumnName = <span class="string">"role_id"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.roles = roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.角色(Role)实体类添加属性及映射关系</p><p>关系由用户维护就好了，所以在角色实体类中用mapppedBy</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置多对多</span></span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"roles"</span>)  <span class="comment">//配置多表关系</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.users = users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h3><blockquote><p>UserDao</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RoleDao</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Role;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Role</span>,<span class="title">Long</span>&gt; ,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Role</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联保存-1"><a href="#级联保存-1" class="headerlink" title="级联保存"></a>级联保存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Role;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Many2ManyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Role role = <span class="keyword">new</span> Role();</span><br><span class="line">        role.setRoleName(<span class="string">"管理员"</span>);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">13</span>);</span><br><span class="line">        user.setUserName(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置关系</span></span><br><span class="line">        user.getRoles().add(role);</span><br><span class="line"></span><br><span class="line">        userDao.save(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/15.png"></p><h3 id="级联删除-1"><a href="#级联删除-1" class="headerlink" title="级联删除"></a>级联删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userDao.findOne(<span class="number">1L</span>);</span><br><span class="line">    userDao.delete(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa03/16.png"></p><h3 id="级联查询-对象导航查询"><a href="#级联查询-对象导航查询" class="headerlink" title="级联查询(对象导航查询)"></a>级联查询(对象导航查询)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       User user = userDao.findOne(<span class="number">2L</span>);</span><br><span class="line">       Set&lt;Role&gt; roles = user.getRoles();</span><br><span class="line">       <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">           System.out.println(role.getRoleName());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>报错</p></blockquote><p>org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role:</p><blockquote><p>解决方案1：在User实体类的@ManyToMany注解中添加值fetch</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ManyToMany(targetEntity &#x3D; Role.class,cascade &#x3D; CascadeType.ALL,fetch &#x3D; FetchType.EAGER)</span><br></pre></td></tr></table></figure><blockquote><p>解决方案2：在junit测试方法findTest()上加@Transactional</p></blockquote><h2 id="一对多关系对象查询总结"><a href="#一对多关系对象查询总结" class="headerlink" title="一对多关系对象查询总结"></a>一对多关系对象查询总结</h2><p>通过一的一方查询多的一方默认是延迟查询，因为多的一方可能数据非常多，浪费时间，浪费内存</p><p>通过多的一方查询一的一方默认是立即查询，因为一的一方就一条数据，性能可以忽略不计</p><p>推荐：使用默认设置，如果使用默认设置，在进行对象查询的时候可能会报org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role:，原因是事务关闭了，我们需要加@Transactional</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringDataJPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJPA-入门(一)</title>
      <link href="/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa01/"/>
      <url>/2019/07/13/SpringBoot/SpringDataJpa/SpringDataJpa01/</url>
      
        <content type="html"><![CDATA[<h1 id="JPA概述"><a href="#JPA概述" class="headerlink" title="JPA概述"></a>JPA概述</h1><p>是一套规范，mybatis，hiberante是产品</p><p>mybatis SQL语句用户自己去写</p><p>hibernate 不需要手动写SQL，程序运行时会自动生成并执行，如果非要写SQL语句，HIbernate建议使用面向对象的查询语句来完成</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="创建空maven工程并导入依赖"><a href="#创建空maven工程并导入依赖" class="headerlink" title="创建空maven工程并导入依赖"></a>创建空maven工程并导入依赖</h2><blockquote><p>pom.xml文件如下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springDataJpaDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">project.hibernate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate对jpa的支持包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mysql and MariaDB --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><blockquote><p>在resource目录下创建文件夹META-INF,在里面创建persistence.xml文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要配置persistence-unit节点</span></span><br><span class="line"><span class="comment">        持久化单元：</span></span><br><span class="line"><span class="comment">            name：持久化单元名称</span></span><br><span class="line"><span class="comment">            transaction-type：事务管理的方式</span></span><br><span class="line"><span class="comment">                    JTA：分布式事务管理</span></span><br><span class="line"><span class="comment">                    RESOURCE_LOCAL：本地事务管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"hibernateConfig"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jpa的实现方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可选配置：配置jpa实现方的配置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库信息</span></span><br><span class="line"><span class="comment">                用户名，javax.persistence.jdbc.user</span></span><br><span class="line"><span class="comment">                密码，  javax.persistence.jdbc.password</span></span><br><span class="line"><span class="comment">                驱动，  javax.persistence.jdbc.driver</span></span><br><span class="line"><span class="comment">                数据库地址   javax.persistence.jdbc.url</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///jpa"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置jpa实现方(hibernate)的配置信息</span></span><br><span class="line"><span class="comment">                显示sql           ：   false|true</span></span><br><span class="line"><span class="comment">                自动创建数据库表    ：  hibernate.hbm2ddl.auto</span></span><br><span class="line"><span class="comment">                        create      : 程序运行时创建数据库表（如果有表，先删除表再创建）</span></span><br><span class="line"><span class="comment">                        update      ：程序运行时创建表（如果有表，不会创建表）</span></span><br><span class="line"><span class="comment">                        none        ：不会创建表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`jpa`</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`cst_customer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_address`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系地址'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户联系电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`cst_customer`</span>(<span class="string">`cust_id`</span>,<span class="string">`cust_name`</span>,<span class="string">`cust_source`</span>,<span class="string">`cust_industry`</span>,<span class="string">`cust_level`</span>,<span class="string">`cust_address`</span>,<span class="string">`cust_phone`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'黑马程序员'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">2</span>,<span class="string">'传智播客'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">3</span>,<span class="string">'酷丁鱼'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">4</span>,<span class="string">'传智汇'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">5</span>,<span class="string">'传智专修学院'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>),(<span class="number">6</span>,<span class="string">'谷歌'</span>,<span class="literal">NULL</span>,<span class="string">'教育'</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过注解配置映射关系"><a href="#通过注解配置映射关系" class="headerlink" title="通过注解配置映射关系"></a>通过注解配置映射关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户的实体类</span></span><br><span class="line"><span class="comment"> *      配置映射关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   1.实体类和表的映射关系</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Entity</span>:声明实体类</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Table</span> : 配置实体类和表的映射关系</span></span><br><span class="line"><span class="comment"> *          name : 配置数据库表的名称</span></span><br><span class="line"><span class="comment"> *   2.实体类中属性和表中字段的映射关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cst_customer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span>：声明主键的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span>:配置主键的生成策略</span></span><br><span class="line"><span class="comment">     *      strategy</span></span><br><span class="line"><span class="comment">     *          GenerationType.IDENTITY ：自增，mysql</span></span><br><span class="line"><span class="comment">     *                 * 底层数据库必须支持自动增长（底层数据库支持的自动增长方式，对id自增）</span></span><br><span class="line"><span class="comment">     *          GenerationType.SEQUENCE : 序列，oracle</span></span><br><span class="line"><span class="comment">     *                  * 底层数据库必须支持序列</span></span><br><span class="line"><span class="comment">     *          GenerationType.TABLE : jpa提供的一种机制，通过一张数据库表的形式帮助我们完成主键自增</span></span><br><span class="line"><span class="comment">     *          GenerationType.AUTO ： 由程序自动的帮助我们选择主键生成策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>:配置属性和字段的映射关系</span></span><br><span class="line"><span class="comment">     *      name：数据库表中字段的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户的联系方式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCustId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustId</span><span class="params">(Long custId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustName</span><span class="params">(String custName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustSource</span><span class="params">(String custSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custSource = custSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustLevel</span><span class="params">(String custLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custLevel = custLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustIndustry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustIndustry</span><span class="params">(String custIndustry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custIndustry = custIndustry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustPhone</span><span class="params">(String custPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custPhone = custPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustAddress</span><span class="params">(String custAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">                <span class="string">"custId="</span> + custId +</span><br><span class="line">                <span class="string">", custName='"</span> + custName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custSource='"</span> + custSource + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custLevel='"</span> + custLevel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custIndustry='"</span> + custIndustry + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custPhone='"</span> + custPhone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", custAddress='"</span> + custAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JpaUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试jpa的保存</span></span><br><span class="line"><span class="comment">     *      案例：保存一个客户到数据库中</span></span><br><span class="line"><span class="comment">     *  Jpa的操作步骤</span></span><br><span class="line"><span class="comment">     *     1.加载配置文件创建工厂（实体管理器工厂）对象</span></span><br><span class="line"><span class="comment">     *     2.通过实体管理器工厂获取实体管理器</span></span><br><span class="line"><span class="comment">     *     3.获取事务对象，开启事务</span></span><br><span class="line"><span class="comment">     *     4.完成增删改查操作</span></span><br><span class="line"><span class="comment">     *     5.提交事务（回滚事务）</span></span><br><span class="line"><span class="comment">     *     6.释放资源</span></span><br><span class="line"><span class="comment">*/</span>     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件创建工厂（实体管理器工厂）对象</span></span><br><span class="line">        EntityManagerFactory factory = Persistence.createEntityManagerFactory(<span class="string">"myJpa"</span>);</span><br><span class="line">        <span class="comment">//2.通过实体管理器工厂获取实体管理器</span></span><br><span class="line">        EntityManager em = factory.createEntityManager();</span><br><span class="line">        <span class="comment">//3.获取事务对象，开启事务</span></span><br><span class="line">        EntityTransaction tx = em.getTransaction(); <span class="comment">//获取事务对象</span></span><br><span class="line">        tx.begin();<span class="comment">//开启事务</span></span><br><span class="line">        <span class="comment">//4.完成增删改查操作：保存一个客户到数据库中</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"传智播客"</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">"教育"</span>);</span><br><span class="line">        <span class="comment">//保存，</span></span><br><span class="line">        em.persist(customer); <span class="comment">//保存操作</span></span><br><span class="line">        <span class="comment">//5.提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        em.close();</span><br><span class="line">        factory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可能出现的错误信息"><a href="#可能出现的错误信息" class="headerlink" title="可能出现的错误信息"></a>可能出现的错误信息</h2><h3 id="问题1：Cannot-resolve-xxx"><a href="#问题1：Cannot-resolve-xxx" class="headerlink" title="问题1：Cannot resolve xxx"></a>问题1：Cannot resolve xxx</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/01.png"></p><p>解决办法</p><p>​    1.alt+enter 选择数据源 assign data source </p><p><img src="/" alt="" class="lazyload" data-src="K:/%E8%AF%BE%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%89%88/%E5%B0%B1%E4%B8%9A%E7%8F%AD/%E6%A1%86%E6%9E%B6/SpringData%E4%BA%A7%E5%93%81/day01/01-%E8%A7%86%E9%A2%91/%E7%AC%94%E8%AE%B0/img/02.png"></p><p>​    2.选择数据库连接(如果没有数据源请先添加，教程地址：<a href="https://www.jianshu.com/p/d7db42636e63" target="_blank" rel="noopener">https://www.jianshu.com/p/d7db42636e63</a>)</p><p><img src="/" alt="" class="lazyload" data-src="K:/%E8%AF%BE%E7%A8%8B/%E7%AC%AC%E4%BA%94%E7%89%88/%E5%B0%B1%E4%B8%9A%E7%8F%AD/%E6%A1%86%E6%9E%B6/SpringData%E4%BA%A7%E5%93%81/day01/01-%E8%A7%86%E9%A2%91/%E7%AC%94%E8%AE%B0/img/03.png"></p><h3 id="问题2：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException"><a href="#问题2：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException" class="headerlink" title="问题2：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException"></a>问题2：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/05.png"></p><p>解决办法</p><p>​    该问题是因为jdk1.9没有JAXB相关API的jar包，添加依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="工具类抽取"><a href="#工具类抽取" class="headerlink" title="工具类抽取"></a>工具类抽取</h1><h2 id="抽取理由"><a href="#抽取理由" class="headerlink" title="抽取理由"></a>抽取理由</h2><p>理由1：EntityManagerFactory对象每次创建都需要读取配置文件，比较耗时</p><p>理由2：该对象是线程安全的在多线程环境中不会出现线程安全问题</p><h2 id="工具类代码"><a href="#工具类代码" class="headerlink" title="工具类代码"></a>工具类代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EntityManagerFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件，创建entityManagerFactory</span></span><br><span class="line">        factory = Persistence.createEntityManagerFactory(<span class="string">"myJpa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取EntityManager对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityManager <span class="title">getEntityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> factory.createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用工具类改进测试代码"><a href="#使用工具类改进测试代码" class="headerlink" title="使用工具类改进测试代码"></a>使用工具类改进测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JpaUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建EntityManager</span></span><br><span class="line">        EntityManager em = JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//2.获取事务对象，开启事务</span></span><br><span class="line">        EntityTransaction tx = em.getTransaction(); <span class="comment">//获取事务对象</span></span><br><span class="line">        tx.begin();<span class="comment">//开启事务</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.完成增删改查操作：保存一个客户到数据库中</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"传智播客"</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">"教育"</span>);</span><br><span class="line">        <span class="comment">//保存，</span></span><br><span class="line">        em.persist(customer); <span class="comment">//保存操作</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="升级Junit测试代码"><a href="#升级Junit测试代码" class="headerlink" title="升级Junit测试代码"></a>升级Junit测试代码</h1><h2 id="观察以下代码思考问题"><a href="#观察以下代码思考问题" class="headerlink" title="观察以下代码思考问题"></a>观察以下代码思考问题</h2><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/06.png"></p><h2 id="After-Before-Test回顾"><a href="#After-Before-Test回顾" class="headerlink" title="@After @Before @Test回顾"></a>@After @Before @Test回顾</h2><blockquote><p>执行顺序 @Before &gt; @Test &gt; @After</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/07.png"></p><h2 id="改造思路"><a href="#改造思路" class="headerlink" title="改造思路"></a>改造思路</h2><p>将初始化EntityManager和EntityTransaction，包括开启事务的操作放到@Before中</p><p>将提交事务和释放资源的代码放到@after中</p><p>让其他测试类继承该BaseTest类</p><h2 id="BaseTest代码"><a href="#BaseTest代码" class="headerlink" title="BaseTest代码"></a>BaseTest代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JpaUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> EntityManager entityManager;</span><br><span class="line">    <span class="keyword">public</span> EntityTransaction tx;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        entityManager = JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//3.获取事务对象，开启事务</span></span><br><span class="line">        tx = entityManager.getTransaction(); <span class="comment">//获取事务对象</span></span><br><span class="line">        tx.begin();</span><br><span class="line">        System.out.println(<span class="string">"1.初始化EntityManager和EntityTransaction对象完毕"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2.开启事务,开始执行自定义(CRUD)操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tx.commit();</span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"3.提交事务"</span>);</span><br><span class="line">        System.out.println(<span class="string">"4.释放资源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//4.完成增删改查操作：保存一个客户到数据库中</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"传智播客"</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">"教育"</span>);</span><br><span class="line">        <span class="comment">//保存，</span></span><br><span class="line">        entityManager.persist(customer); <span class="comment">//保存操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/09.png"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 3<span class="title">L</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(customer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            entityManager.remove(customer);<span class="comment">//删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/12.png"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(customer != <span class="keyword">null</span>)&#123;</span><br><span class="line">            customer.setCustName(<span class="string">"黑马程序员"</span>);</span><br><span class="line">            entityManager.merge(customer);<span class="comment">//更新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest2</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这里因为主键是Long类型，所以要传入Long类型的数据</span></span><br><span class="line">        Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/08.png"></p><h3 id="延迟查询"><a href="#延迟查询" class="headerlink" title="延迟查询"></a>延迟查询</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest3</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLazyFindById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = entityManager.getReference(Customer<span class="class">.<span class="keyword">class</span>, 1<span class="title">L</span>)</span>;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延迟查询和立即查询的区别"><a href="#延迟查询和立即查询的区别" class="headerlink" title="延迟查询和立即查询的区别"></a>延迟查询和立即查询的区别</h4><p> 延迟加载（懒加载）</p><p>​    得到的是一个动态代理对象</p><p>​    什么时候用，什么使用才会查询</p><p>立即查询</p><p>​    调用查询方法就会马上执行SQL语句</p><h4 id="使用延迟查询在控制台的结果"><a href="#使用延迟查询在控制台的结果" class="headerlink" title="使用延迟查询在控制台的结果"></a>使用延迟查询在控制台的结果</h4><blockquote><p>使用的是getRerence延迟加载方法,并且没有获取结果对象，所以不会执行SQL语句</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/10.png"></p><h4 id="立即查询在控制台的结果"><a href="#立即查询在控制台的结果" class="headerlink" title="立即查询在控制台的结果"></a>立即查询在控制台的结果</h4><blockquote><p> 使用的是find方法,虽然没有获取结果对象，但是会执行SQL语句，只要调用方法就会执行</p></blockquote><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/11.png"></p><h1 id="面向对象语句-JPQL-查询数据库"><a href="#面向对象语句-JPQL-查询数据库" class="headerlink" title="面向对象语句(JPQL)查询数据库"></a>面向对象语句(JPQL)查询数据库</h1><blockquote><p>语法</p><p>SQL ： select * from 表名</p><p>​        select  * from 表名 order  by 字段名 desc</p><p>JPQL/HQL： from 实体类名 </p></blockquote><p>##7.1 查询全部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test6</span> <span class="keyword">extends</span>  <span class="title">BaseTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//String jpql = "from cn.itcast.domain.Customer";</span></span><br><span class="line">        <span class="comment">//简写 这里的Customer是类名</span></span><br><span class="line">        String jpql = <span class="string">"from Customer ordery by custId asc"</span>;</span><br><span class="line">        Query query = entityManager.createQuery(jpql);</span><br><span class="line">        List&lt;Customer&gt; customers = query.getResultList();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历结果</span></span><br><span class="line">        <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/13.png"></p><h2 id="倒叙查询"><a href="#倒叙查询" class="headerlink" title="倒叙查询"></a>倒叙查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test7</span> <span class="keyword">extends</span>  <span class="title">BaseTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllDesc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简写 这里的Customer是类名,根据ID倒叙查询</span></span><br><span class="line">        Query query = entityManager.createQuery(<span class="string">"from Customer order by custId desc "</span>);</span><br><span class="line">        List&lt;Customer&gt; customers = query.getResultList();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历结果</span></span><br><span class="line">        <span class="keyword">for</span> (Customer customer : customers) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计查询"><a href="#统计查询" class="headerlink" title="统计查询"></a>统计查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//简写 这里的Customer是类名</span></span><br><span class="line">       Query query = entityManager.createQuery(<span class="string">"select  count(*) from  Customer "</span>);</span><br><span class="line">       Long cnt = (Long)query.getSingleResult();<span class="comment">//只能装成Long类型</span></span><br><span class="line">       System.out.println(cnt);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>控制台打印</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.初始化EntityManager和EntityTransaction对象完毕</span><br><span class="line">2.开启事务,开始执行自定义(CRUD)操作</span><br><span class="line">Hibernate: select count(*) as col_0_0_ from cst_customer customer0_</span><br><span class="line">3</span><br><span class="line">3.提交事务</span><br><span class="line">4.释放资源</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/14.png"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><blockquote><p>注意这里不能使用limit语句！！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//简写 这里的Customer是类名</span></span><br><span class="line">       Query query = entityManager.createQuery(<span class="string">"from  Customer"</span>);</span><br><span class="line">       query.setFirstResult(<span class="number">2</span>);<span class="comment">//从索引为2的位置开始查询</span></span><br><span class="line">       query.setMaxResults(<span class="number">2</span>);<span class="comment">//查询2条记录</span></span><br><span class="line">       List&lt;Customer&gt; list = query.getResultList();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/15.png"></p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><blockquote><p>提示:方式1比较老，建议使用方式2和方式3</p></blockquote><h3 id="方式1使用-占位符-旧"><a href="#方式1使用-占位符-旧" class="headerlink" title="方式1使用?占位符(旧)"></a>方式1使用?占位符(旧)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Query query = entityManager.createQuery(<span class="string">"from Customer  where custName = ?"</span>);</span><br><span class="line">    query.setParameter(<span class="number">1</span>,<span class="string">"传智播客"</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.getResultList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 1那里会报红线，忽略就好了</p><p><img src="/" alt="" class="lazyload" data-src="SpringDataJpa01/16.png"></p><h3 id="方式2使用命名参数占位符"><a href="#方式2使用命名参数占位符" class="headerlink" title="方式2使用命名参数占位符"></a>方式2使用命名参数占位符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Query query = entityManager.createQuery(<span class="string">"from Customer  where custName = :custName"</span>);</span><br><span class="line">       query.setParameter(<span class="string">"custName"</span>,<span class="string">"传智播客"</span>);</span><br><span class="line">       List&lt;Customer&gt; list = query.getResultList();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="方式3-使用JPA占位符"><a href="#方式3-使用JPA占位符" class="headerlink" title="方式3 使用JPA占位符"></a>方式3 使用JPA占位符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//这里索引从0开始计数，但是在书写的时候这个数字随便写，就写个9都没问题</span></span><br><span class="line">       Query query = entityManager.createQuery(<span class="string">"from Customer  where custName = ?"</span>);</span><br><span class="line">       query.setParameter(<span class="string">"1"</span>,<span class="string">"传智播客"</span>);</span><br><span class="line">       List&lt;Customer&gt; list = query.getResultList();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringDataJPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.mysql优化-建表的原则</title>
      <link href="/2019/07/11/mysql/01-mysql%E4%BC%98%E5%8C%96-%E5%BB%BA%E8%A1%A8%E7%9A%84%E5%8E%9F%E5%88%99/"/>
      <url>/2019/07/11/mysql/01-mysql%E4%BC%98%E5%8C%96-%E5%BB%BA%E8%A1%A8%E7%9A%84%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>DDL 的英文全称是 Data Definition Language。定义了数据库的结构和数据表的结构。DDL 是 DBMS 的核心组件，也是 SQL 的重要组成部，DDL的正确性和稳定性是整个SQL运行的重要基础。所以首先应该从建表上优化数据库</p><h1 id="数据库对库的定义"><a href="#数据库对库的定义" class="headerlink" title="数据库对库的定义"></a>数据库对库的定义</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建的基本格式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库，判断不存在，再创建：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库，并指定字符集。字符集常用UTF8</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名称 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有数据库的名称:</span><br><span class="line">show databases;</span><br><span class="line">-- 查询某个数据库的字符集:查询某个数据库的创建语句</span><br><span class="line">show create database 数据库名称;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库的字符集</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名称 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名称;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断数据库存在，存在再删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> 数据库名称;</span><br></pre></td></tr></table></figure><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名称;</span><br></pre></td></tr></table></figure><h2 id="查询当前正在使用的库名"><a href="#查询当前正在使用的库名" class="headerlink" title="查询当前正在使用的库名"></a>查询当前正在使用的库名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><h1 id="数据库对表的定义"><a href="#数据库对表的定义" class="headerlink" title="数据库对表的定义"></a>数据库对表的定义</h1><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span> 约束,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span> 约束,</span><br><span class="line">    ....</span><br><span class="line">    列名n 数据类型n 约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>最后一列不加,</p><p>建表最后加;</p><p>表名如何和保留字冲突，加s，比如表名user则应该创建为users</p><p>mysql默认不区分大小写，列明如果要区分大小写就用_分隔单词</p><p>如果设置的字符集是UTF8,那么排序规则是utf8_general_ci，代表对大小写不敏感，如果设置为utf8_bin,代表对大小写敏感</p><h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><p><strong>整数</strong> int</p><p><strong>小数</strong> double(小数的最大长度,小数点后保留几位)。比如分数score(5,2)  分数100.00</p><p><strong>日期</strong> </p><p>​    date:日期，只包含年月日，yyyy-MM-dd</p><p>​    datetime:日期，包含年月日时分秒,yyyy-MM-dd HH:mm:ss</p><p>​    timestamp:时间错类型,包含年月日时分秒,yyyy-MM-dd HH:mm:ss。如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</p><p><strong>字符串</strong></p><p>​    varchar 长度会随着实际存储数据的变化而改变</p><p>​    char 长度固定。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>比如我们想创建一个球员表，表名为 player，里面有两个字段，一个是 player_id，它是 int 类型，另一个 player_name 字段是varchar(255)类型。这两个字段都不为空，且 player_id 是递增的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> player  (</span><br><span class="line">  player_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  player_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需要注意的是，语句最后以分号（;）作为结束符，最后一个字段的定义结束后没有逗号。数据类型中 int(11) 代表整数类型，显示长度为 11 位，括号中的参数 11 代表的是最大有效显示长度，与类型包含的数值范围大小无关。varchar(255)代表的是最大长度为 255 的可变字符串类型。NOT NULL表明整个字段不能是空值，是一种数据约束。AUTO_INCREMENT代表主键自动增长。</p><h2 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></table></figure><h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新的表名;</span><br></pre></td></tr></table></figure><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名称;</span><br></pre></td></tr></table></figure><h3 id="添加一列"><a href="#添加一列" class="headerlink" title="添加一列"></a>添加一列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型;</span><br></pre></td></tr></table></figure><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 列名 新列别 新数据类型;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 新数据类型;</span><br></pre></td></tr></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br></pre></td></tr></table></figure><pre><code>3. U(Update):修改    1. 修改表名        alter table 表名 rename to 新的表名;    2. 修改表的字符集        alter table 表名 character set 字符集名称;    3. 添加一列        alter table 表名 add 列名 数据类型;    4. 修改列名称 类型        alter table 表名 change 列名 新列别 新数据类型;        alter table 表名 modify 列名 新数据类型;    5. 删除列</code></pre><h2 id="表中常见的约束类型"><a href="#表中常见的约束类型" class="headerlink" title="表中常见的约束类型"></a>表中常见的约束类型</h2><p>当我们创建数据表的时候，还会对字段进行约束，约束的目的在于保证 RDBMS 里面数据的准确性和一致性。下面，我们来看下常见的约束有哪些。  </p><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>​     主键起的作用是唯一标识一条记录，不能重复，不能为空，即 UNIQUE+NOT NULL。一个数据表的主键只能有一个。主键可以是一个字段，也可以由多个字段复合组成。在上面的例子中，我们就把 player_id 设置为了主键。  </p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>​    外键确保了表与表之间引用的完整性。一个表中的外键对应另一张表的主键。外键可以是重复的，也可以为空。比如 player_id 在 player 表中是主键，如果你想设置一个球员比分表即 player_score，就可以在 player_score 中设置 player_id 为外键，关联到 player 表中。 </p><h3 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h3><h4 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h4><p>​    唯一性约束表明了字段在表中的数值是唯一的，即使我们已经有了主键，还可以对其他字段进行唯一性约束。比如我们在 player 表中给 player_name 设置唯一性约束，就表明任何两个球员的姓名不能相同。需要注意的是，唯一性约束和普通索引（NORMAL INDEX）之间是有区别的。唯一性约束相当于创建了一个约束和普通索引，目的是保证字段的正确性，而普通索引只是提升数据检索的速度，并不对字段的唯一性进行约束。  </p><h4 id="NOT-NULL-约束"><a href="#NOT-NULL-约束" class="headerlink" title="NOT NULL 约束"></a>NOT NULL 约束</h4><p>​    对字段定义了 NOT NULL，即表明该字段不应为空，必须有取值。  </p><h4 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h4><p>​    表明了字段的默认值。如果在插入数据的时候，这个字段没有取值，就设置为默认值。比如我们将身高 height 字段的取值默认设置为 0.00，即DEFAULT 0.00。  </p><h4 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h4><p>​    用来检查特定字段取值范围的有效性，比如我们可以对身高 height 的数值进行 CHECK 约束，必须≥0，且＜3，即CHECK(height&gt;=0 AND height&lt;3)。</p><h1 id="设计数据表的原则"><a href="#设计数据表的原则" class="headerlink" title="设计数据表的原则"></a>设计数据表的原则</h1><p>​    我们在设计数据表的时候，经常会考虑到各种问题，比如：用户都需要什么数据？需要在数据表中保存哪些数据？哪些数据是经常访问的数据？如何提升检索效率？  如何保证数据表中数据的正确性，当插入、删除、更新的时候该进行怎样的约束检查？  如何降低数据表的数据冗余度，保证数据表不会因为用户量的增长而迅速扩张？  如何让负责数据库维护的人员更方便地使用数据库？  除此以外，我们使用数据库的应用场景也各不相同，可以说针对不同的情况，设计出来的数据表可能千差万别。那么有没有一种设计原则可以让我们来借鉴呢？这里我整理了一个“三少一多”原则：</p><h2 id="数据表的个数越少越好"><a href="#数据表的个数越少越好" class="headerlink" title="数据表的个数越少越好"></a>数据表的个数越少越好</h2><p>​    RDBMS 的核心在于对实体和联系的定义，也就是 E-R 图（Entity Relationship Diagram），数据表越少，证明实体和联系设计得越简洁，既方便理解又方便操作。  </p><h2 id="数据表中的字段个数越少越好"><a href="#数据表中的字段个数越少越好" class="headerlink" title="数据表中的字段个数越少越好"></a>数据表中的字段个数越少越好</h2><p>​    字段个数越多，数据冗余的可能性越大。设置字段个数少的前提是各个字段相互独立，而不是某个字段的取值可以由其他字段计算出来。当然字段个数少是相对的，我们通常会在数据冗余和检索效率中进行平衡。 </p><h2 id="数据表中联合主键的字段个数越少越好"><a href="#数据表中联合主键的字段个数越少越好" class="headerlink" title="数据表中联合主键的字段个数越少越好"></a>数据表中联合主键的字段个数越少越好</h2><p>​    设置主键是为了确定唯一性，当一个字段无法确定唯一性的时候，就需要采用联合主键的方式（也就是用多个字段来定义一个主键）。联合主键中的字段越多，占用的索引空间越大，不仅会加大理解难度，还会增加运行时间和索引空间，因此联合主键的字段个数越少越好。  </p><h2 id="使用主键和外键越多越好"><a href="#使用主键和外键越多越好" class="headerlink" title="使用主键和外键越多越好"></a>使用主键和外键越多越好</h2><p>​    数据库的设计实际上就是定义各种表，以及各种字段之间的关系。这些关系越多，证明这些实体之间的冗余度越低，利用度越高。这样做的好处在于不仅保证了数据表之间的独立性，还能提升相互之间的关联使用率。  你应该能看出来“三少一多”原则的核心就是简单可复用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    建表的优化思路就是指用更少的表、更少的字段、更少的联合主键字段来完成数据表的设计。可复用则是通过主键、外键的使用来增强数据表之间的复用率。因为一个主键可以理解是一张表的代表。键设计得越多，证明它们之间的利用率越高。</p><p>​    很多互联网的公司，尤其是超大型的数据应用场景，大量的插入，更新和删除在外键的约束下会降低性能，同时数据库在水平拆分和分库的情况下，数据库端也做不到执行外键约束。另外，在高并发的情况下，外键的存在也会造成额外的开销。因为每次更新数据，都需要检查另外一张表的数据，也容易造成死锁。<br>所以在这种情况下，尤其是大型项目中后期，可以采用业务层来实现，取消外键提高效率</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器</title>
      <link href="/2019/07/09/javaSE/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2019/07/09/javaSE/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类加载器的概述"><a href="#1-类加载器的概述" class="headerlink" title="1.类加载器的概述"></a>1.类加载器的概述</h2><p>负责将.class文件加载到内存中，并为之生成对应的Class对象。我们的最终目标是学习类加载器的加载机制，了解这个机制我们就能更好的理解程序的运行。</p><h2 id="2-类加载器的分类"><a href="#2-类加载器的分类" class="headerlink" title="2.类加载器的分类"></a>2.类加载器的分类</h2><p>Bootstrap ClassLoader 根类加载器</p><p>Extension ClassLoader 扩展类加载器</p><p>Sysetm ClassLoader 系统类加载器</p><h2 id="3-类加载器的作用"><a href="#3-类加载器的作用" class="headerlink" title="3.类加载器的作用"></a>3.类加载器的作用</h2><p>1.Bootstrap ClassLoader 根类加载器，也被称为引导类加载器，负责Java核心类的加载，比如System,String等。在JDK中jre的lib目录下rt.jar文件中</p><p>2.Extension ClassLoader 扩展类加载器负责JRE的扩展目录中jar包的加载。在JDK中JRE的lib目录下ext目录</p><p>3.Sysetm ClassLoader 系统类加载器(又叫做Application ClassLoader)负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径</p><p><img src="/" alt="1" class="lazyload" data-src="%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></p><h2 id="4-类加载器原理"><a href="#4-类加载器原理" class="headerlink" title="4.类加载器原理"></a>4.类加载器原理</h2><p>父类委托机制：先让父类加载器寻找，只有在父类加载器找不到的情况下才从自己的类路径中去寻找 </p><p>举例</p><p>​    比如当我们执行java Dog的时候，肯定要先加载Dog.class,本来这个类应该由System Classloader加载，但是这个类加载有父亲，所以就交给Extension Classloader类加载器加载，这个类加载器还有爸爸最后就交给BootStrap Classloader去加载。但是BootStrap 类加载器加载的rt.jar包中并没有这个Dog类，无法加载，就又返回给Extension 类加器加载，这个类加载器在ext目录也找不到Dog类，就又返回给System类加器加载器，如果从classpath目录找到了Dog类就加载，找不到就报错ClassNotFoundException</p><p><img src="/" alt="2" class="lazyload" data-src="%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%9C%BA%E5%88%B6.png"></p><h2 id="5-自定义类加载器"><a href="#5-自定义类加载器" class="headerlink" title="5.自定义类加载器"></a>5.自定义类加载器</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>第一步:编写类继承ClassLoader</p><p>第二步:编写方法(功能把指定位置的class文件转换成Class对象)</p><p>第三步:生成构造方法</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String name, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能：传入一个.class文件的绝对路径，然后生成对应的Class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">load</span><span class="params">(String file)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.先把xxx.class文件读取到一个字节数组中</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = fis.read(data);</span><br><span class="line">        <span class="comment">//2.调用defineClass将字节数组转换成Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">super</span>.defineClass(<span class="keyword">null</span>, data, <span class="number">0</span>, len);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class clazz = <span class="keyword">new</span> MyClassLoader().load(<span class="string">"C:\\Users\\haoyongliang\\Desktop\\Student.class"</span>);</span><br><span class="line">        System.out.println(clazz.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java核心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的事物</title>
      <link href="/2019/07/08/mysql/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E7%89%A9/"/>
      <url>/2019/07/08/mysql/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是事物"><a href="#什么是事物" class="headerlink" title="什么是事物"></a>什么是事物</h1><p>​    在实际的开发过程中，一个业务操作如：转账，往往是要多次访问数据库才能完成的。转 账是一个用户扣钱，另一个用户加钱。如果其中有一条 SQL 语句出现异常，这条 SQL 就可能执行失败。 事务执行是一个整体，所有的 SQL 语句都必须执行成功。如果其中有 1 条 SQL 语句出现异常，则所有的 SQL 语句都要回滚，整个业务执行失败</p><p>​    MySQL默认开启事物，ORACLE默认关闭事物</p><h1 id="事物的四大特性"><a href="#事物的四大特性" class="headerlink" title="事物的四大特性"></a>事物的四大特性</h1><ul><li><p>原子性（Atomicity）<br>每个事务都是一个整体，不可再拆分，事务中所有的 SQL 语句要么都执行成功， 要么都失败。 </p></li><li><p>一致性（Consistency）<br>事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前2个人的 总金额是 2000，转账后 2 个人总金额也是 2000 </p></li><li><p>隔离性（Isolation） 事务与事务之间不应该相互影响，执行时保持隔离的状态。 </p></li><li><p>持久性（Durability） 一旦事务执行成功，对数据库的修改是持久的。就算关机，也是保存下来的。 </p></li></ul><h1 id="事物的四个隔离级别"><a href="#事物的四个隔离级别" class="headerlink" title="事物的四个隔离级别"></a>事物的四个隔离级别</h1><ul><li><p>read uncommited</p><pre><code>会读到其他事物没有提交的数据，换句话说读的是内存中的临时数据，不是持久化到硬盘的数据。这种现象我们成为脏读。一个用户在读取数据的时候允许其他用户对表数据进行任何操作</code></pre></li><li><p>read commited（oracle默认隔离级别）</p><pre><code>读取到的时候持久化到硬盘的数据，一个用户在读取数据的时候如果其他用户对表数据进行操作，则再次读取到的数据会不一致。</code></pre></li><li><p>repeatable read（mysql默认隔离级别）</p><pre><code>一个用户在读取数据的时候如果其他用户对表数据进行删除和添加操作，再次读取到的记录条数会不一致。</code></pre></li><li><p>serializable</p><pre><code>在读取的时候不允许别人任何操作</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中DCL相关语句的使用</title>
      <link href="/2019/07/08/mysql/MySQL%E4%B8%ADDCL%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/08/mysql/MySQL%E4%B8%ADDCL%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>​    我们现在默认使用的都是 root 用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面 可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管 理和维护数据库</p><h1 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure><p>演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建帐号hyl,密码123456的用户，该用户只能在当前电脑登陆数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'hyl'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">-- 创建帐号hyl,密码123456的用户，该用户可以在任意电脑登陆数据库,%表示任意电脑</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'hyl'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'用户名'</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'abc'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><h2 id="mysql中忘记了root用户的密码"><a href="#mysql中忘记了root用户的密码" class="headerlink" title="mysql中忘记了root用户的密码"></a>mysql中忘记了root用户的密码</h2><ol><li><p>cmd – &gt; net stop mysql 停止mysql服务[需要管理员运行该cmd]</p></li><li><p>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</p></li><li><p>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</p></li><li><p>use mysql;</p></li><li><p>update user set password = password(‘你的新密码’) where user = ‘root’;</p></li><li><p>关闭两个窗口</p></li><li><p>打开任务管理器，手动结束mysqld.exe 的进程</p></li><li><p>启动mysql服务</p></li><li><p>使用新密码登录。</p></li><li><p>查询用户：<br> – 1. 切换到mysql数据库<br> USE myql;<br> – 2. 查询user表<br> SELECT * FROM USER;</p><ul><li>通配符： % 表示可以在任意主机使用用户登录数据库</li></ul></li></ol><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="查询权限："><a href="#查询权限：" class="headerlink" title="查询权限："></a>查询权限：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h2 id="授予权限："><a href="#授予权限：" class="headerlink" title="授予权限："></a>授予权限：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给张三用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'zhangsan'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><h2 id="撤销权限："><a href="#撤销权限：" class="headerlink" title="撤销权限："></a>撤销权限：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> db3.<span class="string">`account`</span> <span class="keyword">FROM</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitee搭建个人博客</title>
      <link href="/2019/07/06/gitee/hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/06/gitee/hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Windows用户访问<a href="https://nodejs.org/en" target="_blank" rel="noopener">Node.js</a>下载Node.js安装包后，直接运行安装即可(node.js下载也很慢，最好翻墙)。安装后，更换下npm的源，否则下载速度着实让人着急。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Hexo的基本使用请查看hello-world文中所写。</p><h3 id="本地运行Hexo"><a href="#本地运行Hexo" class="headerlink" title="本地运行Hexo"></a>本地运行Hexo</h3><p>在本地选中一个空文件夹（一定要是空文件夹！！），在空文件中执行如下命令，生成Hexo运行所需要的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>初始化后，文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">├── .deploy       #需要部署的文件</span><br><span class="line">├── node_modules  #Hexo插件</span><br><span class="line">├── public        #生成的静态网页文件</span><br><span class="line">├── scaffolds     #模板</span><br><span class="line">├── source        #博客正文和其他源文件等都应该放在这里</span><br><span class="line">|   ├── _drafts   #草稿</span><br><span class="line">|   └── _posts    #文章</span><br><span class="line">├── themes        #主题</span><br><span class="line">├── _config.yml   #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>之后在本地执行如下命令后，即可访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 访问Hexo页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git安装包地址</a>,根据操作系统选择安装包下载后安装即可。</p><h3 id="注册码云账号，并创建一个项目"><a href="#注册码云账号，并创建一个项目" class="headerlink" title="注册码云账号，并创建一个项目"></a>注册码云账号，并创建一个项目</h3><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01.png"></p><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02.png"></p><h3 id="获取项目地址"><a href="#获取项目地址" class="headerlink" title="获取项目地址"></a>获取项目地址</h3><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03.png"></p><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><h3 id="修改Hexo配置文件-config-yml"><a href="#修改Hexo配置文件-config-yml" class="headerlink" title="修改Hexo配置文件_config.yml"></a>修改Hexo配置文件_config.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 码云的项目地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save </span><br><span class="line">$ hexo g #编译 一键部署可能失败，先编译</span><br><span class="line">$ hexo g --d  #一键部署</span><br><span class="line"></span><br><span class="line">#本地测试环境</span><br><span class="line">$ hexo g #编译到本地</span><br><span class="line">$ hexo s #启动服务器</span><br></pre></td></tr></table></figure><p>此时会弹出一个对话框，提示输入码云的账号密码。部署成功后，登陆码云。此时本地文件夹中出现有一个public文件夹，代表部署成功。</p><h3 id="开启Page功能"><a href="#开启Page功能" class="headerlink" title="开启Page功能"></a>开启Page功能</h3><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04.png"></p><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05.png"></p><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06.png"></p><h3 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h3><p>在浏览器地址栏输入上图中的博客地址，即可访问，效果图如下：</p><p><img src="/" alt="" class="lazyload" data-src="hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/07.png"></p><h2 id="博客使用的主题"><a href="#博客使用的主题" class="headerlink" title="博客使用的主题"></a>博客使用的主题</h2><p><a href="https://jerryc.me/archives/" target="_blank" rel="noopener">https://jerryc.me/archives/</a></p><h2 id="博客内容编写"><a href="#博客内容编写" class="headerlink" title="博客内容编写"></a>博客内容编写</h2><p>在博客目录的source文件中的_post文件夹中添加你要写的博客文件，文件命名为<code>file_name.md</code><br><code>file_name.md</code>的文件开头如下:</p><p>缩略图可以先发布博客，在从博客上复制链接，然后重新部署即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo+gitee搭建个人博客</span><br><span class="line">date: 2019-07-06 13:26:55</span><br><span class="line">tags: [博客搭建,gitee]</span><br><span class="line">categories: gitee</span><br><span class="line">author: 郝永亮</span><br><span class="line">top_img: https:&#x2F;&#x2F;haoyongliang.gitee.io&#x2F;2019&#x2F;07&#x2F;06&#x2F;hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2&#x2F;01.jpg</span><br><span class="line">cover:  https:&#x2F;&#x2F;haoyongliang.gitee.io&#x2F;2019&#x2F;07&#x2F;06&#x2F;hexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2&#x2F;01.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式RPC框架Apache Dubbo</title>
      <link href="/2019/07/05/dubble/ApacheDubbo/"/>
      <url>/2019/07/05/dubble/ApacheDubbo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>资料下载地址<a href="https://download.csdn.net/download/haoyongliang8888/11368711" target="_blank" rel="noopener">https://download.csdn.net/download/haoyongliang8888/11368711</a></p></blockquote><h2 id="1-软件架构的演进过程"><a href="#1-软件架构的演进过程" class="headerlink" title="1. 软件架构的演进过程"></a>1. 软件架构的演进过程</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。</p><h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="/" alt="" class="lazyload" data-src="./ApacheDubbo/1.png"></p><p>架构说明：</p><p>​      全部功能集中在一个项目内（All in one）。</p><p>架构优点：</p><p>​      架构简单，前期开发成本低、开发周期短，适合小型项目。</p><p>架构缺点：</p><p>​       全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p><p>​       技术栈受限，只能使用一种语言开发。</p><p>​       系统性能扩展只能通过扩展集群节点，成本高。</p><h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><p><img src="/" alt="18" class="lazyload" data-src="ApacheDubbo/18.png"></p><p>架构说明：       </p><p>​      按照业务进行切割，形成小的单体项目。</p><p>架构优点：</p><p>​      技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p><p>架构缺点：</p><p>​       功能集中在一个项目中，不利于开发、扩展、维护。</p><p>​       系统扩张只能通过集群的方式。</p><p>​       项目之间功能冗余、数据冗余、耦合性强。</p><h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><p>SOA全称为Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p><p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p><p><img src="/" alt="19" class="lazyload" data-src="ApacheDubbo/19.png"></p><p>架构说明：</p><p>​      将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p><p>架构优点：</p><p>​       重复功能或模块抽取为服务，提高开发效率。</p><p>​       可重用性高。</p><p>​       可维护性高。</p><p>架构缺点：</p><p>​       各系统之间业务不同，很难确认功能或模块是重复的。</p><p>​       抽取服务的粒度大。</p><p>​       系统和服务之间耦合度高。</p><h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="/" alt="20" class="lazyload" data-src="ApacheDubbo/20.png"></p><p>架构说明：</p><p>​       将系统服务层完全独立出来，抽取为一个一个的微服务。</p><p>​       抽取的粒度更细，遵循单一原则。</p><p>​       采用轻量级框架协议传输。</p><p>架构优点：</p><p>​       服务拆分粒度更细，有利于提高开发效率。 </p><p>​       可以针对不同服务制定对应的优化方案。</p><p>​       适用于互联网时代，产品迭代周期更短。</p><p>架构缺点：</p><p>​      粒度太细导致服务太多，维护成本高。</p><p>​      分布式系统开发的技术成本高，对团队的挑战大。</p><h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p><p><strong>什么是RPC？</strong></p><p>RPC全称为remote procedure call，即<strong>远程过程调用</strong>。比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p><p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p><p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p><p>Dubbo官网地址：<a href="http://dubbo.apache.org" target="_blank" rel="noopener">http://dubbo.apache.org</a></p><p>Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>Dubbo架构图（Dubbo官方提供）如下：</p><p><img src="/" alt="2" class="lazyload" data-src="ApacheDubbo/2.png"></p><p>节点角色说明：</p><table><thead><tr><th>节点</th><th>角色名称</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><p>虚线都是异步访问，实线都是同步访问<br>蓝色虚线:在启动时完成的功能<br>红色虚线(实线)都是程序运行过程中执行的功能</p><p>调用关系说明:</p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p><h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p><p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p><p><img src="/" alt="4" class="lazyload" data-src="ApacheDubbo/4.png"></p><p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径，例如：C:\Windows\itcast\hello.txt。</p><p>Zookeeper树型目录服务：</p><p><img src="/" alt="3" class="lazyload" data-src="ApacheDubbo/3.png"></p><p>流程说明：</p><ul><li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li><li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li><li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li></ul><h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">http://archive.apache.org/dist/zookeeper/</a></p><p>本课程使用的Zookeeper版本为3.4.6，下载完成后可以获得名称为zookeeper-3.4.6.tar.gz的压缩文件。</p><p>安装步骤：</p><p>第一步：安装 jdk（略）<br>第二步：把 zookeeper 的压缩包（zookeeper-3.4.6.tar.gz）上传到 linux 系统<br>第三步：解压缩压缩包<br>​    tar -zxvf zookeeper-3.4.6.tar.gz<br>第四步：进入zookeeper-3.4.6目录，创建data目录<br>​    mkdir data<br>第五步：进入conf目录 ，把zoo_sample.cfg 改名为zoo.cfg<br>​    cd conf<br>​    mv zoo_sample.cfg zoo.cfg<br>第六步：打开zoo.cfg文件,  修改data属性：dataDir=/root/zookeeper-3.4.6/data</p><h3 id="3-3-启动、停止Zookeeper"><a href="#3-3-启动、停止Zookeeper" class="headerlink" title="3.3 启动、停止Zookeeper"></a>3.3 启动、停止Zookeeper</h3><p>进入Zookeeper的bin目录，启动服务命令<br> ./zkServer.sh start</p><p>启动报错使用命令查看错误信息： ./zkServer.sh start-foreground</p><p>停止服务命令<br>./zkServer.sh stop</p><p>查看服务状态：<br>./zkServer.sh status</p><h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p><h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p>开发步骤：</p><p>（1）创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）创建服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）创建服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：服务实现类上使用的Service注解是Dubbo提供的，用于对外发布服务</p><p>（5）在src/main/resources下创建applicationContext-service.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbodemo_provider"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.134.129:2181"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.service.impl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（6）启动服务</p><p>tomcat7:run</p><h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p><p>（1）创建maven工程（打包方式为war）dubbodemo_consumer，pom.xml配置和上面服务提供者相同，只需要将Tomcat插件的端口号改为8082即可</p><p>（2）配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p><p>（4）编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</p><p>（5）在src/main/resources下创建applicationContext-web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbodemo-consumer"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.134.129:2181"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（6）运行测试</p><p>tomcat7:run启动</p><p>在浏览器输入<a href="http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果" target="_blank" rel="noopener">http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果</a></p><p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p><p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p><p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p><p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。可以通过开发工具的debug功能查看此代理对象的内部结构。另外，Dubbo实现网络传输底层是基于Netty框架完成的。</p><p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p><p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p><h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p><p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p><p>（2）启动tomcat，此war文件会自动解压</p><p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p><p>​    dubbo.registry.address=zookeeper://192.168.134.129:2181<br>​    dubbo.admin.root.password=root<br>​    dubbo.admin.guest.password=guest</p><p>（4）重启tomcat</p><h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p><p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)" target="_blank" rel="noopener">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p><p><img src="/" alt="5" class="lazyload" data-src="ApacheDubbo/5.png"></p><p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p><p><img src="/" alt="6" class="lazyload" data-src="ApacheDubbo/6.png"></p><p><img src="/" alt="7" class="lazyload" data-src="ApacheDubbo/7.png"></p><p><img src="/" alt="8" class="lazyload" data-src="ApacheDubbo/8.png"></p><p><img src="/" alt="9" class="lazyload" data-src="ApacheDubbo/9.png"></p><h2 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6. Dubbo相关配置说明"></a>6. Dubbo相关配置说明</h2><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.service"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p><p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.HelloServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.itheima.api.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloService"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>作为服务消费者，可以通过如下配置来引用服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">interface</span>=<span class="string">"com.itheima.api.HelloService"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p><h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p><p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p><p>推荐使用的是dubbo协议。</p><p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p><p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"rmi"</span> <span class="attr">port</span>=<span class="string">"1099"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.itheima.api.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.itheima.api.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">protocol</span>=<span class="string">"rmi"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p><p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p><h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p><p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p><p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference</span>(check = <span class="keyword">false</span>,loadbalance = <span class="string">"random"</span>)</span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service</span>(loadbalance = <span class="string">"random"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p><p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p><p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p><h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p><p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p><h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p><p>操作步骤：</p><p>（1）在pom.xml文件中增加maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面连接的数据库可以自行创建</p><p>（3）在HelloServiceImpl类上加入@Transactional注解</p><p>（4）启动服务提供者和服务消费者，并访问</p><p><img src="/" alt="12" class="lazyload" data-src="ApacheDubbo/12.png"></p><p>上面的错误为没有可用的服务提供者</p><p>查看dubbo管理控制台发现服务并没有发布，如下：</p><p><img src="/" alt="13" class="lazyload" data-src="ApacheDubbo/13.png"></p><p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p><p><img src="/" alt="14" class="lazyload" data-src="ApacheDubbo/14.png"></p><p><img src="/" alt="15" class="lazyload" data-src="ApacheDubbo/15.png"></p><h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.itheima.service），所以后面真正发布服务的代码没有执行。</p><p>解决方式操作步骤：</p><p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="17" class="lazyload" data-src="ApacheDubbo/17.png"></p><p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(interfaceClass = HelloService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p><p><img src="/" alt="16" class="lazyload" data-src="ApacheDubbo/16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubble </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.Spring Boot技术栈1.X(集成RabbitMQ)</title>
      <link href="/2018/06/10/SpringBoot/06SpringBoot%E9%9B%86%E6%88%90RabbitMQ/SpringBoot%E9%9B%86%E6%88%90RabbitMQ/"/>
      <url>/2018/06/10/SpringBoot/06SpringBoot%E9%9B%86%E6%88%90RabbitMQ/SpringBoot%E9%9B%86%E6%88%90RabbitMQ/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇介绍 Spring Boot中spring-boot-starter-amqp对RabbitMQ 开发的支持,包括了RabbitMQ工具的安装，SprintBoot集成RabbitMQ。最终完成生产者和消费者案例。</p></blockquote><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>​    消息是指在应用之间的传送的数据。队列（Queue）是一种操作受限的线性表，遵循“先进先出”原则。<br>消息队列（Message Queue）是一种应用间的通信方式。其中消息生成者负责生产和发送消息，消息消费者负责接收获取消息并进行相应的处理，消息处理中心负责消息存储、确认、重试并保证消息的可靠传输。消息队列利用先进先出的特性，可以保证消息的顺序性。</p><h1 id="2-RabbitMQ简介"><a href="#2-RabbitMQ简介" class="headerlink" title="2. RabbitMQ简介"></a>2. RabbitMQ简介</h1><h2 id="2-1-什么是RabbitMQ"><a href="#2-1-什么是RabbitMQ" class="headerlink" title="2.1 什么是RabbitMQ"></a>2.1 什么是RabbitMQ</h2><p>RabbitMQ是一个由Erlang语言开发的AMQP协议的开源实现。最初起源于金融系统，用于分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><p>支持主流操作系统：Linux、Windows，MacOX等</p><p>支持多种客户端开发语言：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX</p><h2 id="2-2-RabbitMQ应用场景"><a href="#2-2-RabbitMQ应用场景" class="headerlink" title="2.2 RabbitMQ应用场景"></a>2.2 RabbitMQ应用场景</h2><p>在高并发的环境下，由于来不及同时处理，请求往往会发生堵塞，甚至可能导致系统崩溃。通过使用消息队列，我们可以异步处理请求，从而缓解系统的压力。具体的应用场景：</p><ul><li>异步请求：短信通知、app推送….</li><li>数据同步</li><li>系统解耦：终端设备监控…</li><li>高并发缓冲：日志服务、监控上报</li><li>流量消峰： 秒杀</li></ul><h2 id="2-3-专业术语解释"><a href="#2-3-专业术语解释" class="headerlink" title="2.3 专业术语解释"></a>2.3 专业术语解释</h2><p><img src="/" alt="image" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90RabbitMQ/hello-world-example-routing.png"></p><ul><li><strong>Message</strong>：消息，由Header和Body组成，Header是由生产者添加到各种属性的集合，包括Message是否被持久化，是由哪个Message Queue接收优先级是多少等，而Body是真正需要传输的APP数据</li><li><strong>Producer：</strong>消息生产者，就是投递消息的程序。</li><li><strong>Broker</strong>：接收客户端连接，实现AMQP消息队列的路由功能的进程.简单来说就是消息队列服务器实体。</li><li><strong>Virtual Host</strong>：虚拟主机，一个broker里可以开设多个Virtual Host，用作不同用户的权限分离。权限控制组，用户只能关联到一个Virtual Host上，一个Virtual Host中可以有若干个Exchange和Queue，默认的Virtual Host是”/“</li><li><strong>Exchange</strong>：接收生产者发送的消息，并根据Binding规则将消息路由给服务器中的队列 Exchange Type决定了Exchange路由消息额行为，例如，在RabbitMQ中，ExchangeType有Direct、Fanout和Topic三种，不同类型的Exchange路由得到行为是不一样的</li></ul><blockquote><ul><li>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 <strong>routing_key</strong>, 消息的<strong>routing_key</strong> 匹配时, 才会被交换器投送到绑定的队列中去。RabbitMQ默认的是Direct类型的交换机。</li><li>Topic：按规则转发消息（最灵活）</li><li>Fanout：转发消息到所有绑定队列</li><li>Headers：设置header attribute参数类型的交换机</li></ul></blockquote><ul><li><strong>Queue</strong>：用于存储还未消费的消息。消息队列载体，每个消息都会被投入到一个或多个队列。</li><li><strong>BindingKey：</strong>指定当前Exchange下，什么样的RoutingKey会被下派到当前绑定的Queue中</li><li><strong>RoutingKey</strong>：指定当前消息被谁接受</li><li><strong>Consumer：</strong>消息消费者，就是接受消息的程序。</li></ul><blockquote><p>真实情况下参数名都是RoutingKey，没有BindingKey这个参数，为了区别用户发送的和我们绑定的概念，我们才说RoutingKey和BindingKey</p></blockquote><h1 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h1><h2 id="3-1-linux安装RabbitMQ"><a href="#3-1-linux安装RabbitMQ" class="headerlink" title="3.1 linux安装RabbitMQ"></a>3.1 linux安装RabbitMQ</h2><h3 id="第一步-安装erlang"><a href="#第一步-安装erlang" class="headerlink" title="第一步:安装erlang"></a>第一步:安装erlang</h3><ul><li>从官网下载erlang的安装包。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.erlang.org/download/otp_src_20.1.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>如果下载比较慢可以直接去官网下载好传送linux服务器中。</p></blockquote><ul><li>安装依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mcurses-devel</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  -zxvf otp_src_20.1.tar.gz</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;erlang20 --without-javac</span><br><span class="line">make -j 4   </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>make -j 4  表示的是使用4个CPU进行编译， 这样会提高编译速度（针对centos是4核的）</p></blockquote><ul><li>配置环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;erlang20&#x2F;bin</span><br></pre></td></tr></table></figure><blockquote><p>注意执行：source /etc/profile使配置文件生效</p></blockquote><ul><li>使用erl命令检查是否安装成功，出现</li></ul><p><img src="/" alt="SpringBoot集成RabbitMQ" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90RabbitMQ/erlang.png"></p><h3 id="第二步-安装RabbitMQ"><a href="#第二步-安装RabbitMQ" class="headerlink" title="第二步:安装RabbitMQ"></a>第二步:安装RabbitMQ</h3><ul><li>下载安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.7.9/rabbitmq-server-generic-unix-3.7.9.tar.xz</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d rabbitmq-server-generic-unix-3.7.9.tar.xz</span><br><span class="line">tar xf rabbitmq-server-generic-unix-3.7.9.tar</span><br></pre></td></tr></table></figure><ul><li>安装依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install python -y</span><br><span class="line">yum install xmlto -y </span><br><span class="line">yum install python&#x3D;simplejson -y</span><br></pre></td></tr></table></figure><h3 id="第三步-开启管理页面"><a href="#第三步-开启管理页面" class="headerlink" title="第三步:开启管理页面"></a>第三步:开启管理页面</h3><ul><li>初次使用RabbitMQ网页控制台页面默认是关闭的，需要执行以下命令来开启：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><ul><li>在执行完命令之后，可以登录到rabbitmq的管理页面查看。 在浏览器输入<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a> 即可。</li></ul><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>进入RabbitMQ安装目录的sbin文件夹下面：</p><ul><li><code>rabbitmq-server</code> //启动 rabbitmq服务</li><li><code>rabbitmqctl stop</code> //停止RabbitMQ服务</li><li><code>rabbitmqctl status</code> //查看状态</li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>   在3.3.1和之后的版本中，出于安全的考虑，guest这个默认的用户只能通过<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> 来登录，其他的IP无法直接使用这个账号。 这对于服务器上没有安装桌面的情况是无法管理维护的，可以通过添加用户的方式来解决。</p><ul><li><p>添加用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  add_user admin admin</span><br></pre></td></tr></table></figure></li><li><p>添加授权</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p &#x2F; admin &#39;.*&#39; &#39;.*&#39; &#39;.*&#39;</span><br></pre></td></tr></table></figure><ul><li>修改配置文件 /etc/rabbitmq/rabbitmq.config 文件，添加以下配置就可以了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;rabbit, [&#123;tcp_listeners, [5672]&#125;, &#123;loopback_users, [&quot;admin&quot;]&#125;]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>停止：service rabbitmq-server stop ,启动：service rabbitmq-server start</li></ul><h1 id="4-SpringBoot集成RabbitMQ"><a href="#4-SpringBoot集成RabbitMQ" class="headerlink" title="4. SpringBoot集成RabbitMQ"></a>4. SpringBoot集成RabbitMQ</h1><p>结合下图描述的TopicExchange类型的交换机，看一下在具体的java应用中如何使用RabbitMQ。</p><p><img src="/" alt="SpringBoot集成RabbitMQ" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90RabbitMQ/2014-2-21-9-57-37.png"></p><blockquote><p>这里routingKey中可以存在两种特殊字符“*”与“#”，用于做模糊匹配。其中” * “用于匹配一个单词，“ # ”用于匹配多个单词（可以是零个）</p></blockquote><h2 id="4-1-添加依赖和配置"><a href="#4-1-添加依赖和配置" class="headerlink" title="4.1 添加依赖和配置"></a>4.1 添加依赖和配置</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在pom.xml中引入rabbitmq的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--RabbitMQ使用 start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--RabbitMQ使用 end--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在application.yml中添加相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h2 id="4-2-生产者和消费者案例"><a href="#4-2-生产者和消费者案例" class="headerlink" title="4.2 生产者和消费者案例"></a>4.2 生产者和消费者案例</h2><h3 id="第一步-添加配置类"><a href="#第一步-添加配置类" class="headerlink" title="第一步:添加配置类"></a>第一步:添加配置类</h3><p>创建Q1，Q2，Topic类型的交换机，并把交换机和队列进行绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MQ配置类</span></span><br><span class="line"><span class="comment"> * 创建队列，交换机并对交换机和队列通过routing key进行绑定。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue  <span class="title">topicQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topicQueue1"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topicQueue2"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"topicExchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">// 在topicExchange下，符合”*.orange.*“的RoutingKey会被下派到topicQueue1中</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">"*.orange.*"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//在topicExchange下，符合”*.*.rabbit“的RoutingKey会被下派到topicQueue2中</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">"*.*.rabbit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//在topicExchange下，符合“lazy.#“的RoutingKey会被下派到topicQueue2中</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">"lazy.#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步-创建生产者"><a href="#第二步-创建生产者" class="headerlink" title="第二步:创建生产者"></a>第二步:创建生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQSender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(MQSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopic</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置消息的routingKey 为a.orange</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"a.orange"</span>,message+<span class="string">":a.orange"</span>);</span><br><span class="line">         <span class="comment">//设置消息的routingKey 为orange.b</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"orange.b"</span>,message+<span class="string">":orange.b"</span>);</span><br><span class="line">        <span class="comment">//设置消息的routingKey 为a.b.rabbi</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"a.b.rabbit"</span>,message+<span class="string">":a.b.rabbit"</span>);</span><br><span class="line">        <span class="comment">//设置消息的routingKey 为lazy.a.test</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"lazy.a.test"</span>,message+<span class="string">":lazy.a"</span>);</span><br><span class="line">        <span class="comment">//设置消息的routingKey 为lazy.orange.rabbit</span></span><br><span class="line">                        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"lazy.orange.rabbit"</span>,message+<span class="string">":lazy.orange.rabbit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四步-创建消费者"><a href="#第四步-创建消费者" class="headerlink" title="第四步:创建消费者"></a>第四步:创建消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(MQReceiver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"topicQueue1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMsg1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"Q1 receiveMsg:"</span>+message + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"topicQueue2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopicMsg2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"Q2 receiveMsg:"</span>+message + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五步-测试"><a href="#第五步-测试" class="headerlink" title="第五步:测试"></a>第五步:测试</h3><ul><li>创建测试类进行测试。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MQTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            mqSender.sendTopic(<span class="string">"hello world"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q2 receiveMsg:hello world:a.b.rabbit 2018-12-14 17:25:45</span><br><span class="line">Q1 receiveMsg:hello world:lazy.orange.rabbit 2018-12-14 17:25:45</span><br><span class="line">Q2 receiveMsg:hello world:lazy.a 2018-12-14 17:25:45</span><br><span class="line">Q2 receiveMsg:hello world:lazy.orange.rabbit 2018-12-14 17:25:45</span><br></pre></td></tr></table></figure><blockquote><p>从上述的日志文件中可以看出：</p><p>消息 “hello world:a.b.rabbit” 符合Q2的匹配规则不符合Q1的匹配规则，所以只有Q2接收到了。</p><p>消息”hello world:lazy.orange.rabbit”同时符合Q1和Q2的匹配规则，所以Q1和Q2都接收到了。</p><p>消息“hello world:a.orange” 和消息”hello world:orange.b” 因为和Q1和Q2的routingKey 都不匹配，所以直接被丢弃了。</p></blockquote></li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p> SpringBoot集成RabbitMQ一共分为5大步：第一步：引入依赖，第二步：引入yml配置信息，第三步创建配置类，第四步创建生产者，第五步创建消费者。RabbitMQ在很多大型项目中大量使用。结合现在主流的spring boot，极大简化了开发过程中所涉及到的消息通信问题。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.Spring Boot技术栈1.X(Mybatis )</title>
      <link href="/2018/06/09/SpringBoot/05SpringBoot%E9%9B%86%E6%88%90MyBatis/SpringBoot%E9%9B%86%E6%88%90MyBatis/"/>
      <url>/2018/06/09/SpringBoot/05SpringBoot%E9%9B%86%E6%88%90MyBatis/SpringBoot%E9%9B%86%E6%88%90MyBatis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要介绍 SpringBoot集成MyBatis框架，以及使用mybatis框架进行简单的增删改查</p></blockquote><h1 id="1-ORM介绍"><a href="#1-ORM介绍" class="headerlink" title="1.ORM介绍"></a>1.ORM介绍</h1><p>​    通俗点说”ORM思想”就是将关系数据库中表中的记录映射成为对象，以对象的形式展现，程序员可以把对数据库的操作转化为对对象的操作,因此ORM的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作。目前最常用的ORM框架是Hibernate和Mybatis,SpringBoot默认集成Hibernate，如果需要集成Mybatis需要额外配置。</p><h1 id="2-Mybatis介绍"><a href="#2-Mybatis介绍" class="headerlink" title="2.Mybatis介绍"></a>2.Mybatis介绍</h1><p>##简介    </p><p>​    MyBatis是一款优秀的支持自定义SQL查询、存储过程和高级映射的持久层框架，消除了几乎所有的JDBC代码和参数的手动设置以及结果集的检索。MyBatis可以使用XML或者注解进行配置和映射，MyBatis通过将参数映射到配置的SQL形式最终执行的SQL语句，最后将执行的SQL的结果映射成Java对象放回。</p><p>​    与其他的ORM框架不同，MyBatis并没有将Java对象与数据库表关联起来，而是将Java方法与SQL语句关联。MyBatis允许用户充分利用数据库的各种功能，例如存储过程、视图、各种复杂的查询以及某数据库的专有特性。如果要对遗留数据库、不规范的数据库进行操作，或者要完全控制SQL的执行，MyBatis将会是一个不错的选择。</p><p>##MyBatis优点</p><p>​    1.SQL被统一提取出来，便于统一惯例和优化</p><p>​    2.SQL 和代码解耦，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试</p><p>​    3.提供映射标签，支持对象与数据库的 ORM 字段关系映射</p><p>​    4.提供对象关系映射标签，支持对象关系组件维护</p><p>​    5.灵活书写动态 SQL，支持各种条件来动态生成不同的 SQL</p><h2 id="MyBatis缺点"><a href="#MyBatis缺点" class="headerlink" title="MyBatis缺点"></a>MyBatis缺点</h2><p>​    1.编写 SQL 语句时工作量很大，尤其是字段多、关联表多时，更是如此</p><p>​    2.SQL 语句依赖于数据库，导致数据库移植性差</p><h1 id="3-快速上手"><a href="#3-快速上手" class="headerlink" title="3.快速上手"></a>3.快速上手</h1><h2 id="3-1创建实体类User"><a href="#3-1创建实体类User" class="headerlink" title="3.1创建实体类User"></a>3.1创建实体类User</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class User  &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String address;</span><br><span class="line">    private String sex;</span><br><span class="line"> ..省略方法   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2创建数据库"><a href="#3-2创建数据库" class="headerlink" title="3.2创建数据库"></a>3.2创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`test`</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`address`</span>,<span class="string">`sex`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'jack'</span>,<span class="string">'BeiJing'</span>,<span class="string">'nv'</span>),(<span class="number">2</span>,<span class="string">'tom'</span>,<span class="string">'Xi\'</span>an<span class="string">','</span>na<span class="string">');</span></span><br></pre></td></tr></table></figure><h2 id="3-3引入相关包"><a href="#3-3引入相关包" class="headerlink" title="3.3引入相关包"></a>3.3引入相关包</h2><p>1.MyBatis-Spring-Boot-Starter (依赖上面两个包)</p><p>​    <code>mybatis-spring-boot-starter</code>主要提供了两种解决方案，一种是简化后的 XML 配置版，一种是使用注解解决一切问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line">mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.commons-lang3(提供了很多工具类具体可参照文章<a href="https://blog.csdn.net/u012240455/article/details/79014224" target="_blank" rel="noopener">https://blog.csdn.net/u012240455/article/details/79014224</a>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-4修改application-xml配置"><a href="#3-4修改application-xml配置" class="headerlink" title="3.4修改application.xml配置"></a>3.4修改application.xml配置</h2><p>添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis.config-locations&#x3D;classpath:mybatis&#x2F;mybatis-config.xml</span><br><span class="line">mybatis.mapper-locations&#x3D;classpath:mybatis&#x2F;mapper&#x2F;*.xml</span><br><span class="line">mybatis.type-aliases-package&#x3D;com.neo.entity</span><br></pre></td></tr></table></figure><p>mybatis.config-locations：配置 mybatis-config.xml 路径，mybatis-config.xml 中配置 MyBatis 基础属性。</p><p>mybatis.mapper-locations：配置 Mapper 对应的 XML 文件路径</p><p>mybatis.type-aliases-package：配置项目中实体类包路径</p><p>##3.5配置启动类</p><p>Spring Boot 启动时数据源会自动注入到 SqlSessionFactory 中，使用 SqlSessionFactory 构建 SqlSessionFactory，再自动注入到 Mapper 中，最后我们直接使用 Mapper 即可。</p><p>配置方式：</p><p>添加注解@MapperScan</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EntityScan</span>(basePackages=<span class="string">"cn.itcast.sprintBootDemo.domain"</span>)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"cn.itcast.sprintBootDemo.repository"</span>&#125;)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.sprintBootDemo.mapper"</span>)<span class="comment">//新增</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprintBootDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(SprintBootDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 或者直接在 Mapper 类上面添加注解<code>@Mapper</code>，建议使用上面那种，不然每个 Mapper 加个注解会很麻烦。 </p><h2 id="3-6在resource目录添加Mybatis-xml"><a href="#3-6在resource目录添加Mybatis-xml" class="headerlink" title="3.6在resource目录添加Mybatis.xml"></a>3.6在resource目录添加Mybatis.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Integer"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Long"</span> <span class="attr">type</span>=<span class="string">"java.lang.Long"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"HashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedHashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedHashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ArrayList"</span> <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedList"</span> <span class="attr">type</span>=<span class="string">"java.util.LinkedList"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7在mapper包下创建UserMapper接口"><a href="#3-7在mapper包下创建UserMapper接口" class="headerlink" title="3.7在mapper包下创建UserMapper接口"></a>3.7在mapper包下创建UserMapper接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8创建UserMapper-xml"><a href="#3-8创建UserMapper-xml" class="headerlink" title="3.8创建UserMapper.xml"></a>3.8创建UserMapper.xml</h2><p>该文件的路径必须和对应的UserMapper.java文件在同一目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--namesspace中写对应的mapper接口的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.sprintBootDemo.mapper.UserMapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.itcast.sprintBootDemo.domain.User"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">      SELECT  *  FROM `user`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        SELECT  *  from `user` where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-查询全部"><a href="#4-查询全部" class="headerlink" title="4.查询全部"></a>4.查询全部</h1><p>刚才快速上手中的UserMapper接口中定义了两个查询功能，直接测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EntityScan</span>(<span class="title">basePackages</span></span>=<span class="string">"cn.itcast.sprintBootDemo.domain"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.sprintBootDemo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line">        System.out.println(users.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块的注解经常会报“could not autowire”，Eclipse 却没有问题，其实代码是正确的，这是 Idea 的误报。可以选择降低 Autowired 检测的级别，不要提示就好。</p><p>单击 File | Settings | Editor | Inspections 命令，使用搜索功能找到 Autowiring for Bean Class 选项，将 Severity 的级别由之前的 error 改成 warning 即可。</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90MyBatis/idea.png"></p><p>#5.根据条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EntityScan</span>(<span class="title">basePackages</span></span>=<span class="string">"cn.itcast.sprintBootDemo.domain"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.sprintBootDemo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        User user = userMapper.findUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#6.添加/删除/修改</p><p>添加接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>添加配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.sprintBootDemo.domain.User"</span> &gt;</span></span><br><span class="line">    INSERT INTO `user`</span><br><span class="line"></span><br><span class="line">    (name, address, sex)</span><br><span class="line">    VALUES</span><br><span class="line">    (#&#123;name&#125;, #&#123;address&#125;, #&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EntityScan</span>(<span class="title">basePackages</span></span>=<span class="string">"cn.itcast.sprintBootDemo.domain"</span>)</span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.sprintBootDemo.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setAddress(<span class="string">"河北"</span>);</span><br><span class="line">        u.setSex(<span class="string">"nan"</span>);</span><br><span class="line">        u.setName(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        userMapper.save(u);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7.注意事项"></a>7.注意事项</h1><p>1.UserMapper.xml和UserMapper.java必须在同一目录中</p><p>2.UserMaper.xml的namespace的值是UserMapper接口的全路径</p><p>3.UserMapper.xml中的id值必须和UserMapper的接口中的方法对应</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.Spring Boot技术栈1.X(Thymeleaf )</title>
      <link href="/2018/06/08/SpringBoot/04SpringBoot%E9%9B%86%E6%88%90Thymeleaf/SpringBoot%E9%9B%86%E6%88%90Thymeleaf/"/>
      <url>/2018/06/08/SpringBoot/04SpringBoot%E9%9B%86%E6%88%90Thymeleaf/SpringBoot%E9%9B%86%E6%88%90Thymeleaf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇介绍 SpringBoot集成模板引擎Thymeleaf以及Thymeleaf模板引擎的相关语法</p></blockquote><h1 id="1-Thymeleaf模板引擎介绍"><a href="#1-Thymeleaf模板引擎介绍" class="headerlink" title="1.Thymeleaf模板引擎介绍"></a>1.Thymeleaf模板引擎介绍</h1><blockquote><p>提示:Spring Boot 推荐使用 Thymeleaf 来代替 JSP ，</p></blockquote><p>Thymeleaf 是一款用于渲染 XML/XHTML/HTML 5 内容的模板引擎。类似 JSP、Velocity、FreeMaker  等，它也可以轻易的与 Spring MVC 等 Web 框架进行集成作为 Web 应用的模板引擎。与其他模板引擎相比，Thymeleaf  最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个 Web 应用。 </p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Velocity: &lt;p&gt;$message&lt;&#x2F;p&gt;</span><br><span class="line">FreeMarker: &lt;p&gt;$&#123;message&#125;&lt;&#x2F;p&gt;</span><br><span class="line">Thymeleaf: &lt;p th:text&#x3D;&quot;$&#123;message&#125;&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>如果将上面三句话插入到一个静态页面，直接打开该静态页面，Velocity显示<strong>$message</strong>,FreeMarker显示<strong>${message}</strong>,Thymeleaf显示 <strong>Hello World!</strong>。能够友好显示数据的只有Thymeleaf</p><p>Thymeleaf 的作用域在 html 标签内，类似标签的一个属性来使用，这就是它的特点 </p><h1 id="2-开发环境搭建"><a href="#2-开发环境搭建" class="headerlink" title="2.开发环境搭建"></a>2.开发环境搭建</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h2><blockquote><p>小技巧</p><p>​    net.sourceforge.nekohtml 这个依赖对于开发很有用，因为thymeleaf的语法严格要求html5语法，必须有结束标签，配置该依赖后可以忽略这些问题，该依赖要和spring.thymeleaf.mode=LEGACYHTML5这个配置一起使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--兼容不严谨的html5语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-编写页面"><a href="#2-编写页面" class="headerlink" title="2.编写页面"></a>2.编写页面</h2><blockquote><p>注意：</p><p>​    templates目录不存在,需要手动创建</p><p>​    引入thymeleaf 的约束一定要在html标签中引入</p></blockquote><p>spring-boot项目静态文件目录：/src/java/resources/static<br>spring-boot项目模板文件目录：/src/java/resources/templates<br>所以新建立的.html文件应该放在/src/java/resources/templates下。</p><p>文章这里在/src/java/resources/templates 目录下新建index.html,内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-修改application-properties"><a href="#3-修改application-properties" class="headerlink" title="3.修改application.properties"></a>3.修改application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#thymelea模板配置</span></span><br><span class="line"><span class="comment">#关闭thymeleaf缓存 开发时使用 否则没有实时画面</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 构建URL时附加查看名称的后缀.</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br><span class="line"><span class="comment">#模板编码</span></span><br><span class="line"><span class="meta">spring.thymeleaf.mode</span>=<span class="string">LEGACYHTML5</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#Content-Type值</span></span><br><span class="line"><span class="meta">spring.thymeleaf.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="comment">## 静态文件请求匹配方式</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/**</span></span><br><span class="line"><span class="comment"># 修改默认的静态寻址资源目录</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span> = <span class="string">classpath:/templates/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</span></span><br><span class="line"><span class="comment">## 检查模板是否存在，然后再呈现</span></span><br><span class="line"><span class="meta">spring.thymeleaf.check-template-location</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#启用MVC Thymeleaf视图分辨率</span></span><br><span class="line"><span class="meta">spring.thymeleaf.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="4-创建控制器"><a href="#4-创建控制器" class="headerlink" title="4.创建控制器"></a>4.创建控制器</h2><blockquote><p>注意：</p><p>​    这里必须使用@Controller注解，不要使用@RestController</p><p>​    方法返回值中的页面不能带有.html后缀</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafDemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/thymeleafDemo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;<span class="comment">//跳转到static/templates/index.html页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>访问<a href="http://localhost:8080/thymeleafDemo" target="_blank" rel="noopener">http://localhost:8080/thymeleafDemo</a></p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90Thymeleaf%5C01.png"></p><h1 id="3-引入外部JS和CSS"><a href="#3-引入外部JS和CSS" class="headerlink" title="3.引入外部JS和CSS"></a>3.引入外部JS和CSS</h1><blockquote><p>这里以引入bootsstrap为例</p></blockquote><p>##1.导入bootstrap所需相关文件</p><p>首先在resource/static目录下引入以下文件</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90Thymeleaf/02.png"></p><h2 id="2-在模板页面引入资源文件"><a href="#2-在模板页面引入资源文件" class="headerlink" title="2.在模板页面引入资源文件"></a>2.在模板页面引入资源文件</h2><p>语法说明</p><p>​    <strong>@{/js/jquery.js}</strong>相对于项目上下文（Context，亦即项目部署时的路径名）的相对路径，例如，假设部署的项目Context为 app  ,则thymeleaf的写法和实际效果如下图。点击该链接时，访问的地址是http://{serverName}:{port}/app/js/jquery.js </p><p>打开resource/templates/index.html</p><p>修改head标签，在其中引入相关文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入bootstrap相关JS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入bootstrap相关样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-使用bootstrap相关样式"><a href="#3-使用bootstrap相关样式" class="headerlink" title="3.使用bootstrap相关样式"></a>3.使用bootstrap相关样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-th-模板语法"><a href="#4-th-模板语法" class="headerlink" title="4.th:模板语法"></a>4.th:模板语法</h1><blockquote><p>在模板语法中所有的表达式都应该用 <code>${表达式}</code> 包裹起来</p></blockquote><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,userStat:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>th:each属性用于迭代循环，语法：th:each=”obj,iterStat:${objList}”</p><p>迭代对象可以是java.util.List,java.util.Map,数组等;</p><p>iterStat称作状态变量，属性有：<br>     index:当前迭代对象的index（从0开始计算）<br>     count: 当前迭代对象的index(从1开始计算)<br>     size:被迭代对象的大小<br>     current:当前迭代变量<br>     even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）<br>     first:布尔值，当前循环是否是第一个<br>     last:布尔值，当前循环是否是最后一个</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;'1' == flag&#125;"</span> &gt;</span></span><br></pre></td></tr></table></figure><h2 id="综合小案例"><a href="#综合小案例" class="headerlink" title="综合小案例"></a>综合小案例</h2><blockquote><p>需求：在页面显示所有的姓名，隔行换色，如果是奇数行最后一个单元格则显示奇数，否则显示偶数</p><p>使用到的标签 th:text, th:if, th:each,th:class</p></blockquote><p>控制器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/thymeleafDemo"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">       List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">       names.add(<span class="string">"风清扬"</span>);</span><br><span class="line">       names.add(<span class="string">"路人甲"</span>);</span><br><span class="line">       names.add(<span class="string">"东方不败"</span>);</span><br><span class="line">       names.add(<span class="string">"独孤求败"</span>);</span><br><span class="line">       names.add(<span class="string">"鬼脚七"</span>);</span><br><span class="line">       names.add(<span class="string">"孙悟空"</span>);</span><br><span class="line">       model.addAttribute(<span class="string">"names"</span>,names);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"index"</span>;<span class="comment">//跳转到index.html页面</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>页面代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>   <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入bootstrap相关JS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入bootstrap相关样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table "</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>索引<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>奇/偶<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"name,state:$&#123;names&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;state.index%2==0?'success':'info'&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;state.index&#125;"</span>&gt;</span>从0开始<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;state.count&#125;"</span>&gt;</span>从1开始<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">"$&#123;state.index%2==0&#125;"</span>&gt;</span>偶数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">"$&#123;state.index%2!=0&#125;"</span>&gt;</span>奇数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果</p><p><img src="/" alt="" class="lazyload" data-src="SpringBoot%E9%9B%86%E6%88%90Thymeleaf/03.png"></p><h2 id="附-th标签库"><a href="#附-th标签库" class="headerlink" title="附:th标签库"></a>附:th标签库</h2><table><thead><tr><th>关键字</th><th>功能介绍</th><th>案例</th></tr></thead><tbody><tr><td>th:id</td><td>替换id</td><td><code>&lt;input th:id=&quot;&#39;xxx&#39; + ${collect.id}&quot;/&gt;</code></td></tr><tr><td>th:text</td><td>文本替换</td><td><code>&lt;p th:text=&quot;${collect.description}&quot;&gt;description&lt;/p&gt;</code></td></tr><tr><td>th:utext</td><td>支持html的文本替换</td><td><code>&lt;p th:utext=&quot;${htmlcontent}&quot;&gt;conten&lt;/p&gt;</code></td></tr><tr><td>th:object</td><td>替换对象</td><td><code>&lt;div th:object=&quot;${session.user}&quot;&gt;</code></td></tr><tr><td>th:value</td><td>属性赋值</td><td><code>&lt;input th:value=&quot;${user.name}&quot; /&gt;</code></td></tr><tr><td>th:with</td><td>变量赋值运算</td><td><code>&lt;div th:with=&quot;isEven=${prodStat.count}%2==0&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>th:style</td><td>设置样式</td><td><code>th:style=&quot;&#39;display:&#39; + @{(${sitrue} ? &#39;none&#39; : &#39;inline-block&#39;)} + &#39;&#39;&quot;</code></td></tr><tr><td>th:onclick</td><td>点击事件</td><td><code>th:onclick=&quot;&#39;getCollect()&#39;&quot;</code></td></tr><tr><td>th:each</td><td>属性赋值</td><td><code>tr th:each=&quot;user,userStat:${users}&quot;&gt;</code></td></tr><tr><td>th:if</td><td>判断条件</td><td><code>&lt;a th:if=&quot;${userId == collect.userId}&quot; &gt;</code></td></tr><tr><td>th:href</td><td>链接地址</td><td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt; /&gt;</code></td></tr><tr><td>th:switch</td><td>多路选择 配合th:case 使用</td><td><code>&lt;div th:switch=&quot;${user.role}&quot;&gt;</code></td></tr><tr><td>th:case</td><td>th:switch的一个分支</td><td><code>&lt;p th:case=&quot;&#39;admin&#39;&quot;&gt;User is an administrator&lt;/p&gt;</code></td></tr><tr><td>th:fragment</td><td>布局标签，定义一个代码片段，方便其它地方引用</td><td><code>&lt;div th:fragment=&quot;alert&quot;&gt;</code></td></tr><tr><td>th:include</td><td>布局标签，替换内容到引入的文件</td><td><code>&lt;head th:include=&quot;layout :: htmlhead&quot; th:with=&quot;title=&#39;xx&#39;&quot;&gt;&lt;/head&gt; /&gt;</code></td></tr><tr><td>th:replace</td><td>布局标签，替换整个标签到引入的文件</td><td><code>&lt;div th:replace=&quot;fragments/header :: title&quot;&gt;&lt;/div&gt;</code></td></tr><tr><td>th:selected</td><td>selected选择框 选中</td><td><code>th:selected=&quot;(${xxx.id} == ${configObj.dd})&quot;</code></td></tr><tr><td>th:src</td><td>图片类地址引入</td><td><code>&lt;img class=&quot;img-responsive&quot; alt=&quot;App Logo&quot; th:src=&quot;@{/img/logo.png}&quot; /&gt;</code></td></tr><tr><td>th:inline</td><td>定义js脚本可以使用变量</td><td><code>&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;</code></td></tr><tr><td>th:action</td><td>表单提交的地址</td><td><code>&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@{/subscribe}&quot;&gt;</code></td></tr><tr><td>th:remove</td><td>删除某个属性</td><td><code>&lt;tr th:remove=&quot;all&quot;&gt; 1.all:删除包含标签和所有的孩子。</code></td></tr><tr><td>th:attr</td><td>设置标签属性，多个属性可以用逗号分隔</td><td>比如 <code>th:attr=&quot;src=@{/image/aa.jpg},title=#{logo}&quot;</code>，此标签不太优雅，一般用的比较少。</td></tr><tr><td>th:unless</td><td>和th:if判断相反</td><td><code>&lt;a th:href=&quot;@{/login}&quot; th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.Spring Boot技术栈1.X(Spring Data JPA)</title>
      <link href="/2018/06/07/SpringBoot/03SpringDataJPA%E4%BD%BF%E7%94%A8/SpringDataJPA%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/07/SpringBoot/03SpringDataJPA%E4%BD%BF%E7%94%A8/SpringDataJPA%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot技术栈-Spring-Data-JPA"><a href="#Spring-Boot技术栈-Spring-Data-JPA" class="headerlink" title="Spring Boot技术栈(Spring Data JPA)"></a>Spring Boot技术栈(Spring Data JPA)</h1><blockquote><p>本篇介绍 通过Spring Data JPA对数据库进行常见的操作:删除、修改、添加、条件查询、分页查询、单表查询、多表查询。</p></blockquote><h1 id="1-Spring-Data-JPA介绍"><a href="#1-Spring-Data-JPA介绍" class="headerlink" title="1.Spring Data JPA介绍"></a>1.Spring Data JPA介绍</h1><ul><li>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</li><li>Spring Data JPA 让我们解脱了 DAO 层的操作，基本上所有 CRUD 都可以依赖于它来实现。</li></ul><h1 id="2-开发环境搭建"><a href="#2-开发环境搭建" class="headerlink" title="2.开发环境搭建"></a>2.开发环境搭建</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.Springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-修改application-properties"><a href="#2-修改application-properties" class="headerlink" title="2.修改application.properties"></a>2.修改application.properties</h2><p>添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#数据库连接URL</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;heima</span><br><span class="line">#数据库帐号</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">#数据库密码</span><br><span class="line">spring.datasource.password&#x3D;root</span><br><span class="line">#驱动名 </span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">#每次hibernate 时根据 model 类自动更新表结构</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;update</span><br><span class="line">#告诉Hibernate，将HQL翻译成哪种数据库的SQL</span><br><span class="line">spring.jpa.properties.hibernate.dialect&#x3D;org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">#是否在控制台打印SQL语句,测试时设置为true</span><br><span class="line">spring.jpa.show-sql&#x3D; true</span><br></pre></td></tr></table></figure><p>配置文件说明</p><blockquote><ol><li>spring.jpa.properties.hibernate.hbm2ddl.auto : 自动创建 | 更新 | 验证数据库表结构<ul><li>create : 每次加载hibernate，如果数据库中存在表，将所有表删除，然后重新生成表</li><li>update 每次hibernate 时根据 model 类自动更新表结构，如果是第一次则创建表结构。之前表数据不会删除</li><li>validate : 设置为validate:加载hibernate时，验证创建数据库表结构，这样 spring在加载之初，如果model层和数据库表结构不同，就会报错，这样有助于技术运维预先发现问题。例如：ProductInfoEntity这个实体有property1这个属性，而对应的数据库表product没有property1这个字段，就会在tomcat启动的时候报错：错误可能如下：Missing column: property1 in wjs.product</li><li>create-drop : 如果一开始数据库没有表，启动tomcat的时候会生成表，当把tomcat关闭之后生成的表又会消除</li></ul></li><li>spring.jpa.properties.hibernate.dialect ： 告诉Hibernate，将HQL翻译成哪种数据库的SQL,常见的有<ul><li>mysql : org.hibernate.dialect.MySQLDialect</li><li>oracle : org.hibernate.dialect.OracleDialect</li><li>sqlserver : org.hibernate.dialect.SQLServerDialect</li></ul></li></ol></blockquote><h2 id="3-创建实体类"><a href="#3-创建实体类" class="headerlink" title="3.创建实体类"></a>3.创建实体类</h2><ul><li>注意：<ul><li>实体类在命名时候不要用数据库中的关键字比如Order,可以定义成Orders<ul><li>Entity 中不映射成列的字段得加 @Transient 注解，不加注解也会映射成列</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">账户</span><br><span class="line">*&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">public class Account implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;&#x2F;&#x2F;ID主键</span><br><span class="line">    @Column(nullable &#x3D; false,unique &#x3D; true)</span><br><span class="line">    private String username;&#x2F;&#x2F;用户名,不能为空，不能重复</span><br><span class="line">    @Column(nullable &#x3D; false)</span><br><span class="line">    private String password;&#x2F;&#x2F;密码，不能为空</span><br><span class="line">    @Column(nullable &#x3D; false)</span><br><span class="line">    private String gender;  &#x2F;&#x2F;性别，不能为空</span><br><span class="line">    @Column()</span><br><span class="line">    private String address; &#x2F;&#x2F;地址</span><br><span class="line">    @Column()</span><br><span class="line">    private double balance;&#x2F;&#x2F;账户余额</span><br><span class="line">    </span><br><span class="line">    public Account(String username, String password, String gender, String address, double balance) &#123;</span><br><span class="line">        this.username &#x3D; username;</span><br><span class="line">        this.password &#x3D; password;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">        this.address &#x3D; address;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;省略无参构造,getter,setter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-创建DAO"><a href="#4-创建DAO" class="headerlink" title="4.创建DAO"></a>4.创建DAO</h2><p> Dao 只要继承 JpaRepository 类就可以，几乎可以不用写方法，还有一个特别有个性的功能非常赞，就是可以根据方法名来自动的生产 SQL，如 findByUserName 会自动生产一个以 userName 为参数的查询方法，如 findAll 自动会查询表里面的所有数据，如自动分页等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface AccountRepository extends JpaRepositoryAccount,Long &#123;</span><br><span class="line">    Account findAccountByUsername(String username);</span><br><span class="line">    List&lt;Account&gt; findAllByAddressLike(String address);&#x2F;&#x2F;比如查询地址包含&quot;西&quot;的 address的值&#x3D;&quot;%西%&quot;</span><br><span class="line">    List&lt;Account&gt; findAllByBalanceGreaterThanEqual(double balance);&#x2F;&#x2F;余额大于等于指定金额</span><br><span class="line">    List&lt;Account&gt; findAllByBalanceGreaterThan(double balance);&#x2F;&#x2F;余额大于指定金额</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明：JpaRepository&lt;T,ID&gt;这个接口只是一个空的接口，目的是为了统一所有Repository的类型，其接口类型使用了泛型，泛型参数中T代表实体类型，ID则是实体中id的类型</li></ul><h2 id="5-编写测试代码"><a href="#5-编写测试代码" class="headerlink" title="5.编写测试代码"></a>5.编写测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class AccountRepositoryTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository accountRepository;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()  &#123;</span><br><span class="line">    accountRepository.deleteAll();</span><br><span class="line">    accountRepository.save(new Account(&quot;张三丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西太原&quot;,5000.5));</span><br><span class="line">    accountRepository.save(new Account(&quot;张四丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西临汾&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;张五丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西忻州&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;小明&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北承德&quot;,3000));</span><br><span class="line">    accountRepository.save(new Account(&quot;小丽&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北保定&quot;,9000.5));</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(5,accountRepository.findAll().size());&#x2F;&#x2F;如果查询结果等于5</span><br><span class="line">    Assert.assertEquals(3,accountRepository.findAllByAddressLike(&quot;%西%&quot;).size());&#x2F;&#x2F;地址中包含西的记录</span><br><span class="line">    Assert.assertEquals(3,accountRepository.findAllByBalanceGreaterThanEqual(3000).size());&#x2F;&#x2F;大于等于3000的余额的记录</span><br><span class="line">    Assert.assertEquals(2,accountRepository.findAllByBalanceGreaterThan(3000).size());&#x2F;&#x2F;大于3000的余额的记录</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-运行时报错及解决方案"><a href="#6-运行时报错及解决方案" class="headerlink" title="6.运行时报错及解决方案"></a>6.运行时报错及解决方案</h2><p>可能出现异常：</p><ol><li>Caused by: java.lang.IllegalArgumentException: Not a managed type: class com.nsun.study.dao.model.UserInfo<br> at org.hibernate.jpa.internal.metamodel.MetamodelImpl.managedType(MetamodelImpl.java:210)</li><li>Consider defining a bean of type ‘*Repository’ in your configuration. </li></ol><p>原因：启动时没有扫描实体类和DAO,导致没有注入</p><p>解决方案：在Application 增加注解(测试类也添加)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EntityScan(basePackages&#x3D;&quot;cn.itcast.sprintBootDemo.domain&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages &#x3D; &#123;&quot;cn.itcast.sprintBootDemo.repository&quot;&#125;)</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class SprintBootDemoApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SprintBootDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-常见数据库操作"><a href="#3-常见数据库操作" class="headerlink" title="3.常见数据库操作"></a>3.常见数据库操作</h1><blockquote><p>基本查询也分为两种，一种是 Spring Data 默认已经实现，一种是根据查询的方法来自动解析成 SQL。</p></blockquote><h2 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="1.基本查询"></a>1.基本查询</h2><blockquote><p>Spring Data JPA 默认预先生成了一些基本的 CURD 的方法，如增加，删除，修改，查询</p></blockquote><p> 继承 JpaRepository：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AccountRepository extends JpaRepository&lt;Account,Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class AccountRepositoryTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testBaseQuery()&#123;</span><br><span class="line">        &#x2F;*添加测试数据数据*&#x2F;</span><br><span class="line">        accountRepository.deleteAll();</span><br><span class="line">        accountRepository.save(new Account(&quot;张三丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西太原&quot;,5000.5));</span><br><span class="line">        accountRepository.save(new Account(&quot;张四丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西临汾&quot;,1000));</span><br><span class="line">        </span><br><span class="line">        &#x2F;*通过findAll方法查询所有记录*&#x2F;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; accountRepository.findAll();</span><br><span class="line">        for(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;*通过findOne查询一条记录,传入ID*&#x2F;</span><br><span class="line">        Account one &#x3D; accountRepository.findOne(accountRepository.findAll().get(0).getId());</span><br><span class="line">        System.out.println(one.getUsername());</span><br><span class="line">        </span><br><span class="line">        &#x2F;*查询总记录条数*&#x2F;</span><br><span class="line">        long count &#x3D; accountRepository.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        </span><br><span class="line">        &#x2F;*查询某条记录是否存在*&#x2F;</span><br><span class="line">        boolean exists &#x3D; accountRepository.exists(accountRepository.findAll().get(0).getId());</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">        </span><br><span class="line">        &#x2F;*更新记录,应该先查询到旧的记录在调用save方法，save方法的功能有两个：更新和添加*&#x2F;</span><br><span class="line">        Account account &#x3D; accountRepository.findAll().get(0);</span><br><span class="line">        account.setBalance(10000.4);</span><br><span class="line">        accountRepository.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-自定义简单查询"><a href="#2-自定义简单查询" class="headerlink" title="2.自定义简单查询"></a>2.自定义简单查询</h2><blockquote><p>自定义的简单查询就是根据方法名来自动生成 SQL，主要的语法是 findXXBy、readAXXBy、queryXXBy、countXXBy、getXXBy 后面跟属性名称：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User findByUsername(String userName);</span><br></pre></td></tr></table></figure><blockquote><p>也可以加一些关键字 And、Or：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User findByUsernameOrAddress(String username, String address);</span><br></pre></td></tr></table></figure><blockquote><p>修改、删除、统计也是类似语法：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Long deleteById(Long id);</span><br><span class="line">Long countByUsername(String userName)</span><br></pre></td></tr></table></figure><blockquote><p>基本上 SQL 体系中的关键词都可以使用，如 LIKE、IgnoreCase、OrderBy。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findByAddressLike(String address);</span><br><span class="line">User findByAddressIgnoreCase(String address);</span><br><span class="line">List&lt;User&gt; findByAddressOrderByBalanceDesc(String address);</span><br></pre></td></tr></table></figure><blockquote><p>具体的关键字，使用方法和生产成 SQL 如下表所示：</p></blockquote><table><thead><tr><th align="left">Keyword</th><th align="left">Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td align="left">And</td><td align="left">findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td align="left">Or</td><td align="left">findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td align="left">Is,Equals</td><td align="left">findByFirstnameIs,findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td align="left">Between</td><td align="left">findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td align="left">LessThan</td><td align="left">findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td align="left">LessThanEqual</td><td align="left">findByAgeLessThanEqual</td><td>… where x.age ⇐ ?1</td></tr><tr><td align="left">GreaterThan</td><td align="left">findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td align="left">GreaterThanEqual</td><td align="left">findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td align="left">After</td><td align="left">findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td align="left">Before</td><td align="left">findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td align="left">IsNull</td><td align="left">findByAgeIsNull</td><td>… where x.age is null</td></tr><tr><td align="left">IsNotNull,NotNull</td><td align="left">findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td align="left">Like</td><td align="left">findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td align="left">NotLike</td><td align="left">findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td align="left">StartingWith</td><td align="left">findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td align="left">EndingWith</td><td align="left">findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td align="left">Containing</td><td align="left">findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td align="left">OrderBy</td><td align="left">findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td align="left">Not</td><td align="left">findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td align="left">In</td><td align="left">findByAgeIn(Collection<Age> ages)</td><td>… where x.age in ?1</td></tr><tr><td align="left">NotIn</td><td align="left">findByAgeNotIn(Collection<Age> age)</td><td>… where x.age not in ?1</td></tr><tr><td align="left">TRUE</td><td align="left">findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td align="left">FALSE</td><td align="left">findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td align="left">IgnoreCase</td><td align="left">findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><h2 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3.分页查询"></a>3.分页查询</h2><blockquote><p>分页查询在实际使用中非常普遍了，Spring Data JPA 已经帮我们实现了分页的功能，在查询的方法中，需要传入参数 Pageable，当查询中有多个参数的时候 Pageable 建议做为最后一个参数传入：</p></blockquote><p> 在AccountRepository类中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageAccount findAllByAddressLike(String address, Pageable pageable);</span><br></pre></td></tr></table></figure><p> 测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void pageTest()&#123;</span><br><span class="line">    accountRepository.deleteAll();</span><br><span class="line">    accountRepository.save(new Account(&quot;张三丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西太原&quot;,5000.5));</span><br><span class="line">    accountRepository.save(new Account(&quot;张四丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西临汾&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;张五丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西忻州&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;张六丰&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;山西taiyuan&quot;,3000));</span><br><span class="line">    accountRepository.save(new Account(&quot;张七丰&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;山西linfen&quot;,9000.5));</span><br><span class="line">    accountRepository.save(new Account(&quot;张八丰&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;山西xinzhou&quot;,9000.5));</span><br><span class="line">    </span><br><span class="line">    int currentPage &#x3D; 0;&#x2F;&#x2F;第几页,从0开始</span><br><span class="line">    int size &#x3D; 4;&#x2F;&#x2F;每页多少条数据</span><br><span class="line">    Sort sort &#x3D; new Sort(Sort.Direction.DESC, &quot;address&quot;);&#x2F;&#x2F;按照address降序排序</span><br><span class="line">    Pageable pageable &#x3D; new PageRequest(currentPage, size, sort);</span><br><span class="line">    </span><br><span class="line">    Page&lt;Account&gt; page &#x3D; accountRepository.findAllByAddressLike(&quot;%西%&quot;,pageable);</span><br><span class="line">    System.out.println(&quot;一共有&quot;+page.getTotalPages()+&quot;页&quot;);</span><br><span class="line">    System.out.println(&quot;一共有&quot;+page.getTotalElements()+&quot;条记录&quot;);</span><br><span class="line">    System.out.println(&quot;本页的数据是有&quot;);</span><br><span class="line">    for(Account account : page)&#123;</span><br><span class="line">        System.out.println(account.getUsername()+&quot;\t&quot;+account.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一共有2页</span><br><span class="line">一共有6条记录</span><br><span class="line">本页的数据是有</span><br><span class="line">张五丰山西忻州</span><br><span class="line">张三丰山西太原</span><br><span class="line">张四丰山西临汾</span><br><span class="line">张八丰山西xinzhou</span><br></pre></td></tr></table></figure><h2 id="4-查询前N条数据"><a href="#4-查询前N条数据" class="headerlink" title="4.查询前N条数据"></a>4.查询前N条数据</h2><blockquote><p>有时候我们只需要查询前 N 个元素，或者只取前一个实体。可以在定义接口的时候使用firstBy,topBy,first4By,top4By</p></blockquote><p>1.在AccountRepository接口中添加新方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**查询前三个*&#x2F;</span><br><span class="line">List&lt;Account&gt; findTop3ByOrderByBalanceDesc();</span><br><span class="line">&#x2F;**查询余额最高的*&#x2F;</span><br><span class="line">Account findFirstByOrderByBalanceDesc();</span><br><span class="line">&#x2F;**查询余额最高的*&#x2F;</span><br><span class="line">Account findTopByOrderByBalanceDesc();</span><br></pre></td></tr></table></figure><p>2.测试代码</p><pre><code>@Testpublic void testTop(){    accountRepository.deleteAll();    accountRepository.save(new Account(&quot;张三丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西太原&quot;,5000.5));    accountRepository.save(new Account(&quot;张四丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西临汾&quot;,1000));    accountRepository.save(new Account(&quot;张五丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西忻州&quot;,1000));    accountRepository.save(new Account(&quot;小明&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北承德&quot;,3000));    accountRepository.save(new Account(&quot;小丽&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北保定&quot;,9000.5));    //查询前3条记录    List&lt;Account&gt; accounts = accountRepository.findTop3ByOrderByBalanceDesc();    for (Account account: accounts) {        System.out.println(account.getBalance());    }    /**查询余额最高的*/    Account firstAccount = accountRepository.findFirstByOrderByBalanceDesc();    System.out.println(firstAccount);    /**查询余额最高的*/    Account topAccount = accountRepository.findTopByOrderByBalanceDesc();    System.out.println(topAccount);}</code></pre><h2 id="5-自定义-SQL-查询"><a href="#5-自定义-SQL-查询" class="headerlink" title="5.自定义 SQL 查询"></a>5.自定义 SQL 查询</h2><blockquote><p>Spring Data JPA 也可以完美支持自定义SQL语句操作：</p><p>1.在 SQL 的查询方法上面使用 @Query 注解。</p><p>2.1如果需要传参可以在SQL中通过”:变量名”设置占位符，然后配合注解@Param(“变量名”)一起使用</p><p>2.2也可以使用？占位符，但是后面要跟1表示第一个参数如果多个问号只需要在每个?后面跟对应的数字就行了，从1开始</p><p>3.特别注意这里的 SQL 是 HQL，需要写类的名和属性，这块很容易出错。</p></blockquote><p>1.在AccountRepository接口中添加新方法(使用 “:变量名” 的方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;select a from Account a where a.username &#x3D; :name&quot;)</span><br><span class="line">Account selectByUsername(@Param(&quot;name&quot;) String username);</span><br><span class="line"></span><br><span class="line">@Query(&quot;select a from Account a where a.address like %:address%&quot;)</span><br><span class="line">ListAccount selectByAddressLike(@Param(&quot;address&quot;) String address);</span><br></pre></td></tr></table></figure><p>2.在AccountRepository接口中添加新方法(使用 “?” 的方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;select a from Account a where a.address like ?1&quot;)</span><br><span class="line">ListAccount selectByAddressLike(String address);</span><br></pre></td></tr></table></figure><p>3.测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void userQuery()&#123;</span><br><span class="line">    &#x2F;&#x2F;通过username查找对应的账户</span><br><span class="line">    Account zsf &#x3D; accountRepository.selectByUsername(&quot;张三丰&quot;);</span><br><span class="line">    System.out.println(zsf.getUsername()+&quot;-&quot;+zsf.getGender());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查找地址中包含&quot;西&quot;的账户</span><br><span class="line">    List&lt;Account&gt; accounts &#x3D; accountRepository.selectByAddressLike(&quot;西&quot;);</span><br><span class="line">    for (Account account: accounts) &#123;</span><br><span class="line">    System.out.println(account.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-自定义SQL-更新或删除数据"><a href="#6-自定义SQL-更新或删除数据" class="headerlink" title="6.自定义SQL 更新或删除数据"></a>6.自定义SQL 更新或删除数据</h2><blockquote><p>提示：更新或者删除的时候需要添加@Modifying否则报 Not supported for DML operations 异常，也需要添加@Transactional事物注解，否则报InvalidDataAccessApiUsageException异常</p></blockquote><p>1.在AccountRepository接口中添加方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;update Account a set password &#x3D; :password where username&#x3D;:username&quot;)</span><br><span class="line">@Modifying</span><br><span class="line">@Transactional</span><br><span class="line">int updatePassswordByUsername(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);</span><br></pre></td></tr></table></figure><p>2.测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void userUpdateOrDelete()&#123;</span><br><span class="line">    accountRepository.deleteAll();</span><br><span class="line">    accountRepository.save(new Account(&quot;张三丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西太原&quot;,5000.5));</span><br><span class="line">    accountRepository.save(new Account(&quot;张四丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西临汾&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;张五丰&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;山西忻州&quot;,1000));</span><br><span class="line">    accountRepository.save(new Account(&quot;小明&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北承德&quot;,3000));</span><br><span class="line">    accountRepository.save(new Account(&quot;小丽&quot;,&quot;123456&quot;,&quot;女&quot;,&quot;河北保定&quot;,9000.5));</span><br><span class="line"></span><br><span class="line">    int rows &#x3D; accountRepository.updatePassswordByUsername(&quot;张三丰&quot;,&quot;88888888&quot;);</span><br><span class="line">    System.out.println(&quot;更新了&quot;+rows+&quot;行数据&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.控制台结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更新了1行数据</span><br></pre></td></tr></table></figure><h2 id="7-一对多关系-oneToMany"><a href="#7-一对多关系-oneToMany" class="headerlink" title="7.一对多关系(oneToMany)"></a>7.一对多关系(oneToMany)</h2><p>以班级和学生为例</p><p>​    班级和学生，一个个班级对应多个学生，班级就是一的一方，学生就是多的一方</p><p>需要在代表一的地方添加@OneToMany和@JoinColumn来标注(原理是在多的一方的表中增加一个外键列来保存关系)。代表多的实体不需要使用任何映射标注。</p><p>###班级类(Classes)</p><blockquote><p>班级代码 代表一的一方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Classes &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;</span><br><span class="line">    @Column(nullable &#x3D; false,unique &#x3D; true)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @OneToMany(cascade &#x3D; CascadeType.ALL)</span><br><span class="line">    @JoinColumn(name &#x3D; &quot;classes_id&quot;)&#x2F;&#x2F;表示Student表中指向本表外键名</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###学生类(Student)</p><blockquote><p>学生代码 代表多的一方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;</span><br><span class="line">    @Column(nullable &#x3D; false,unique &#x3D; true)</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><blockquote><p> 测试代码：保存班级的同时保存学生ClassesRepository和StudentRepository此处省略..直接继承JpaRepository即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void saveTest()&#123;</span><br><span class="line">&#x2F;*创建班级*&#x2F;</span><br><span class="line">    Classes bj &#x3D; new Classes();</span><br><span class="line">    bj.setName(&quot;一年级二班&quot;);</span><br><span class="line">    &#x2F;*创建学生*&#x2F;</span><br><span class="line">    Student stu1 &#x3D; new Student();</span><br><span class="line">    stu1.setName(&quot;小明&quot;);</span><br><span class="line">    Student stu2 &#x3D; new Student();</span><br><span class="line">    stu2.setName(&quot;小红&quot;);</span><br><span class="line">    </span><br><span class="line">&#x2F;*将学生添加到班级中*&#x2F;</span><br><span class="line">    ArrayList&lt;Student&gt; students &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    students.add(stu1);</span><br><span class="line">    students.add(stu2);</span><br><span class="line">    bj.setStudents(students);</span><br><span class="line">    </span><br><span class="line"> &#x2F;&#x2F;保存班级,同时会级联保存学生</span><br><span class="line">    classesRepository.save(bj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成表的SQL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: create table classes (id integer not null auto_increment, name varchar(255), primary key (id))</span><br><span class="line">Hibernate: create table student (id integer not null auto_increment, name varchar(255), class_id integer, primary key (id))</span><br><span class="line">Hibernate: alter table student add constraint FK5v50ed2bjh60n1gc7ifuxmgf4 foreign key (class_id) references classes (id)</span><br></pre></td></tr></table></figure><blockquote><p>插入数据的SQL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: insert into classes (name) values (?)</span><br><span class="line">Hibernate: insert into student (name) values (?)</span><br><span class="line">Hibernate: insert into student (name) values (?)</span><br><span class="line">Hibernate: update student set class_id&#x3D;? where id&#x3D;?</span><br><span class="line">Hibernate: update student set class_id&#x3D;? where id&#x3D;?</span><br></pre></td></tr></table></figure><h2 id="8-多对一关系-ManyToOne"><a href="#8-多对一关系-ManyToOne" class="headerlink" title="8.多对一关系(ManyToOne)"></a>8.多对一关系(ManyToOne)</h2><p>继续修改刚才的代码，在多的一方添加@ManyToOne</p><p>这里只需要在Student类中添加属性private Classes classes;生成get/set方法即可,并且在该属性上添加@ManyToOne(cascade={CascadeType.ALL})</p><blockquote><p>CascadeType.ALL表示级联删除，级联更新，级联新建，级联新建，比如删除主表，则从表也随之删除，详情见附录</p></blockquote><p>###学生类(Student)</p><blockquote><p>修改学生代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;</span><br><span class="line">    @Column(nullable &#x3D; false,unique &#x3D; true)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @ManyToOne(cascade&#x3D;&#123;CascadeType.ALL&#125;)</span><br><span class="line">    private Classes classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###测试代码</p><blockquote><p>测试代码:查询所有学生对应的班级</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testQuery()&#123;</span><br><span class="line">    List&lt;Student&gt; students &#x3D; studentRepository.findAll();</span><br><span class="line">    for(Student student: students)&#123;</span><br><span class="line">        System.out.println(student.getClasses().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###可能遇到的异常</p><p>​    在controller返回数据到统一json转换的时候，出现了json infinite recursion stackoverflowerror的错误</p><p>​    具体的情况如下：</p><p>​    Classes类中，有个属性：private List<Student> students;， Classes与Student的关系为 OneToMany；在Student类中，有属性private Classes classes;,引用到Classes中的字段id，并作为外键。hibernate查询结果正常，可以看到返回的Classes对象中，有Student参数值，但在json转换的时候就出现了无限递归的情况。原因是json在序列化Classes中的students属性的时候，找到了Student类，然后序列化Student类，而Student类中有classes属性，因此，为了序列化classes属性，json又得去序列化Classes类，如此递归反复，造成该问题。</p><p><strong>解决方法：</strong></p><p>​    在Student类中classes的setter方法上加注解@JsonBackReference</p><h2 id="9-多对多关系-ManyToMany"><a href="#9-多对多关系-ManyToMany" class="headerlink" title="9.多对多关系(ManyToMany)"></a>9.多对多关系(ManyToMany)</h2><p>以书和作者为例：</p><p>​    书(book)和作者(publisher)的可以看作多对多的关系，多对多关系需要一张中间表(book_publisher)来维护关系</p><p>关系图：</p><p><img src="/" alt="0" class="lazyload" data-src="./SpringDataJPA%E4%BD%BF%E7%94%A8/many-to-many.png"></p><p>###书类(Book)</p><blockquote><p>@JoinTable会生成第三张中间表,表名叫book_publisher,joinColumns表示当前实体(Book)的主键,inverseJoinColumns表示另一个实体(Publisher)的主键</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author:haoyongliang</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Date: created in 14:34 2018&#x2F;5&#x2F;22</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">public class Book&#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">    private int id;</span><br><span class="line">    @Column</span><br><span class="line">    private String name;</span><br><span class="line">    @ManyToMany(cascade &#x3D; CascadeType.ALL)</span><br><span class="line">    @JoinTable(</span><br><span class="line">            name &#x3D; &quot;book_publisher&quot;,</span><br><span class="line">            joinColumns &#x3D; @JoinColumn(name &#x3D; &quot;book_id&quot;,referencedColumnName &#x3D; &quot;id&quot;),</span><br><span class="line">            inverseJoinColumns &#x3D; @JoinColumn(name &#x3D; &quot;publisher_id&quot;, referencedColumnName &#x3D; &quot;id&quot;))</span><br><span class="line">    private Set&lt;Publisher&gt; publishers &#x3D; new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Book() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Book(String name, Set&lt;Publisher&gt; publishers)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.publishers &#x3D; publishers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;TODO 省略GETTER&#x2F;SETTER</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        String result &#x3D; String.format(</span><br><span class="line">                &quot;Book [id&#x3D;%d, name&#x3D;&#39;%s&#39;]%n&quot;,</span><br><span class="line">                id, name);</span><br><span class="line">        if (publishers !&#x3D; null) &#123;</span><br><span class="line">            for(Publisher publisher : publishers) &#123;</span><br><span class="line">                result +&#x3D; String.format(</span><br><span class="line">                        &quot;Publisher[id&#x3D;%d, name&#x3D;&#39;%s&#39;]%n&quot;,</span><br><span class="line">                        publisher.getId(), publisher.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###作者类(Publisher)</p><blockquote><p>mappedBy = “publishers”表示关系由另一个实体(Book)维护，mappedBy 的值是Book类中的Set<Book>属性的名字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author:haoyongliang</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Date: created in 14:35 2018&#x2F;5&#x2F;22</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">public class Publisher &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">    private int id;</span><br><span class="line">    @Column</span><br><span class="line">    private String name;</span><br><span class="line">    @ManyToMany(mappedBy &#x3D; &quot;publishers&quot;)</span><br><span class="line">    private Set&lt;Book&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Publisher()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Publisher(String name)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Publisher(String name, Set&lt;Book&gt; books)&#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.books &#x3D; books;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;TODO 省略GETTER&#x2F;SETTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><blockquote><p>BookRepository和PublisherRepository直接继承JpaRepository即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author:haoyongliang</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Date: created in 15:08 2018&#x2F;5&#x2F;22</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@EntityScan(basePackages&#x3D;&quot;cn.itcast.sprintBootDemo.domain&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages &#x3D; &#123;&quot;cn.itcast.sprintBootDemo.repository&quot;&#125;)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class BookRepositoryTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private BookRepository bookRepository;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PublisherRepository publisherRepository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @Transactional</span><br><span class="line">    public void findAll() throws Exception &#123;</span><br><span class="line">        Publisher luxun &#x3D; new Publisher(&quot;鲁迅&quot;);</span><br><span class="line">        Publisher chenduxiu &#x3D; new Publisher(&quot;陈独秀&quot;);</span><br><span class="line">        Publisher libai &#x3D; new Publisher(&quot;李白&quot;);</span><br><span class="line"></span><br><span class="line">        Book book1 &#x3D; new Book(&quot;SpringDataJpa&quot;);</span><br><span class="line">        book1.getPublishers().add(luxun);</span><br><span class="line"></span><br><span class="line">        Book book2 &#x3D; new Book(&quot;基因传&quot;);</span><br><span class="line">        book2.getPublishers().add(chenduxiu);</span><br><span class="line">        book2.getPublishers().add(libai);</span><br><span class="line"></span><br><span class="line">        bookRepository.save(book1);</span><br><span class="line">        bookRepository.save(book2);</span><br><span class="line">        List&lt;Book&gt; books &#x3D; bookRepository.findAll();</span><br><span class="line">        for (Iterator&lt;Book&gt; iterator &#x3D; books.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            Book book &#x3D;  iterator.next();</span><br><span class="line">            System.out.println(book.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##10.一对一关系</p><p>以人和身份证为例,一个人(Person)对应一个(IDCard)，关系由人(Person)来维护</p><h3 id="人类-Person"><a href="#人类-Person" class="headerlink" title="人类(Person)"></a>人类(Person)</h3><p>因为关系由Person维护，所以这里使用@JoinColumn声明person表中外键的名字(外建名=另一个表的表名+”_”+另一个表的主键名)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author:haoyongliang</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Date: created in 17:49 2018&#x2F;5&#x2F;22</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">public class Person &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">    private int id;</span><br><span class="line">    @Column</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    @OneToOne(cascade &#x3D; CascadeType.ALL)</span><br><span class="line">    @JoinColumn(name &#x3D; &quot;idCard_id&quot;)</span><br><span class="line">    private IDCard idCard;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;TODO 省略GETTER和SETTER</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###身份证类(IDCard)</p><blockquote><p>mappedBy = “idCard”表示关系由另一个实体(Person)维护，mappedBy 的值是Person类中的IDCard属性的名字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Author:haoyongliang</span><br><span class="line"> * @Description:</span><br><span class="line"> * @Date: created in 17:51 2018&#x2F;5&#x2F;22</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">public class IDCard &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">    private int id;</span><br><span class="line">    @Column(unique &#x3D; true)</span><br><span class="line">    &#x2F;**身份证号*&#x2F;</span><br><span class="line">    private String no;</span><br><span class="line">    @Column</span><br><span class="line">    @Temporal(TemporalType.DATE)</span><br><span class="line">    &#x2F;**有效期*&#x2F;</span><br><span class="line">    private Date expiryDate;</span><br><span class="line">   </span><br><span class="line">    @OneToOne(mappedBy &#x3D; &quot;idCard&quot;)</span><br><span class="line">    private Person person;</span><br><span class="line"></span><br><span class="line">    public IDCard() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IDCard(String no, Date expiryDate) &#123;</span><br><span class="line">        this.no &#x3D; no;</span><br><span class="line">        this.expiryDate &#x3D; expiryDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;TODO 省略GETTER和SETTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><blockquote><p>PersonRepository和IDCardRepository直接继承JpaRepository</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@EntityScan(basePackages&#x3D;&quot;cn.itcast.sprintBootDemo.domain&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages &#x3D; &#123;&quot;cn.itcast.sprintBootDemo.repository&quot;&#125;)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class PersonRepositoryTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PersonRepository personRepository;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;**测试保存*&#x2F;</span><br><span class="line">    public void add() throws Exception&#123;</span><br><span class="line">        IDCard idCard &#x3D; new IDCard(&quot;14240xxxxxxxxxxx&quot;,new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2030-09-09&quot;));</span><br><span class="line"></span><br><span class="line">        Person jack &#x3D; new Person(&quot;Jack&quot;);</span><br><span class="line">        jack.setIdCard(idCard);</span><br><span class="line"></span><br><span class="line">        personRepository.save(jack);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;**测试查询*&#x2F;</span><br><span class="line">    public void query() &#123;</span><br><span class="line">        List&lt;Person&gt; all &#x3D; personRepository.findAll();</span><br><span class="line">        for (Iterator&lt;Person&gt; iterator &#x3D; all.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            Person p &#x3D;  iterator.next();</span><br><span class="line">            System.out.println(p.getIdCard().getNo());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><blockquote><p>为方便阅读,下面是本文涉及到的注解的相关说明,在阅读文章时对注解如有问题可以查阅此附录</p></blockquote><p>##@ManyToMany注解</p><p>BookRepository extends JpaRepository是属性或方法级别的注解，用于定义源实体与目标实体是多对多的关系。</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>targetEntity</td><td>Class</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>类型，默认是该成员属性对应的集合类型的泛型的参数化类型。</td></tr><tr><td>mappedBy</td><td>String</td><td>用在双向关联中。如果关系是双向的，则需定义此参数（与 @JoinColumn互斥，如果标注了 @JoinColumn注解，不需要再定义此参数）。</td></tr><tr><td>cascade</td><td>CascadeType[]</td><td>定义<strong>源实体</strong>和关联的<strong>目标实体</strong>间的级联关系。当对<strong>源实体</strong>进行操作时，是否对关联的<strong>目标实体</strong>也做相同的操作。默认没有级联操作。该参数的可选值有：CascadeType.PERSIST（级联新建）CascadeType.REMOVE（级联删除）CascadeType.REFRESH（级联刷新）CascadeType.MERGE（级联更新）CascadeType.ALL（包含以上四项）</td></tr><tr><td>fetch</td><td>FetchType</td><td>定义关联的<strong>目标实体</strong>的数据的加载方式。可选值：FetchType.LAZY（延迟加载，默认）FetchType.EAGER（立即加载）延迟加载：只有在第一次访问<strong>源实体</strong>关联的<strong>目标实体</strong>的时候才去加载。立即加载：在加载<strong>源实体</strong>数据的时候同时去加载好关联的<strong>目标实体</strong>的数据。</td></tr></tbody></table><h2 id="OneToOne注解"><a href="#OneToOne注解" class="headerlink" title="@OneToOne注解"></a>@OneToOne注解</h2><p>是属性或方法级别的注解，用于定义源实体与目标实体是一对一的关系。</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>targetEntity</td><td>Class</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>类型，默认是该成员属性对应的类型，因此该参数通常可以缺省。</td></tr><tr><td>mappedBy</td><td>String</td><td>用在双向关联中。如果关系是双向的，只能有一方作为主体端，另一方则需声明此参数以表明将表间的这种关联关系转交给对方来维护。</td></tr><tr><td>cascade</td><td>CascadeType[]</td><td>定义<strong>源实体</strong>和关联的<strong>目标实体</strong>间的级联关系。当对<strong>源实体</strong>进行操作时，是否对关联的<strong>目标实体</strong>也做相同的操作。默认没有级联操作。该参数的可选值有：CascadeType.PERSIST（级联新建）CascadeType.REMOVE（级联删除）CascadeType.REFRESH（级联刷新）CascadeType.MERGE（级联更新）CascadeType.ALL（包含以上四项）</td></tr><tr><td>fetch</td><td>FetchType</td><td>定义关联的<strong>目标实体</strong>的数据的加载方式。可选值：FetchType.LAZY（延迟加载）FetchType.EAGER（立即加载，默认）延迟加载：只有在第一次访问<strong>源实体</strong>关联的<strong>目标实体</strong>的时候才去加载。立即加载：在加载<strong>源实体</strong>数据的时候同时去加载好关联的<strong>目标实体</strong>的数据。</td></tr><tr><td>optional</td><td>boolean</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>是否允许为 null，默认为 true。</td></tr><tr><td>orphanRemoval</td><td>boolean</td><td>当<strong>源实体</strong>关联的<strong>目标实体</strong>被断开（如给该属性赋予另外一个实例，或该属性的值被设为 null。被断开的实例称为孤值，因为已经找不到任何一个实例与之发生关联）时，是否自动删除断开的实例（在数据库中表现为删除表示该实例的行记录），默认为 false。</td></tr></tbody></table><h2 id="OneToMany注解"><a href="#OneToMany注解" class="headerlink" title="@OneToMany注解"></a>@OneToMany注解</h2><p>@OneToMany 是属性或方法级别的注解，用于定义源实体与目标实体是一对多的关系。</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>targetEntity</td><td>Class</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>类型，默认是该成员属性对应的集合类型的泛型的参数化类型。</td></tr><tr><td>mappedBy</td><td>String</td><td>用在双向关联中。如果关系是双向的，则需定义此参数（与 @JoinColumn 互斥，如果标注了 @JoinColumn注解，不需要再定义此参数）。</td></tr><tr><td>cascade</td><td>CascadeType[]</td><td>定义<strong>源实体</strong>和关联的<strong>目标实体</strong>间的级联关系。当对<strong>源实体</strong>进行操作时，是否对关联的<strong>目标实体</strong>也做相同的操作。默认没有级联操作。该参数的可选值有：CascadeType.PERSIST（级联新建）CascadeType.REMOVE（级联删除）CascadeType.REFRESH（级联刷新）CascadeType.MERGE（级联更新）CascadeType.ALL（包含以上四项）</td></tr><tr><td>fetch</td><td>FetchType</td><td>定义关联的<strong>目标实体</strong>的数据的加载方式。可选值：FetchType.LAZY（延迟加载，默认）FetchType.EAGER（立即加载）延迟加载：只有在第一次访问<strong>源实体</strong>关联的<strong>目标实体</strong>的时候才去加载。立即加载：在加载<strong>源实体</strong>数据的时候同时去加载好关联的<strong>目标实体</strong>的数据。</td></tr><tr><td>orphanRemoval</td><td>boolean</td><td>当<strong>源实体</strong>关联的<strong>目标实体</strong>被断开（如给该属性赋予另外一个实例，或该属性的值被设为 null。被断开的实例称为孤值，因为已经找不到任何一个实例与之发生关联）时，是否自动删除断开的实例（在数据库中表现为删除表示该实例的行记录），默认为 false。(如果用CascadeType.REMOVE设置则必须要调用delete()方法才会删除)</td></tr></tbody></table><h2 id="ManyToOne注解"><a href="#ManyToOne注解" class="headerlink" title="@ManyToOne注解"></a>@ManyToOne注解</h2><p>@ManyToOne 是属性或方法级别的注解，用于定义源实体与目标实体是多对一的关系。</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>targetEntity</td><td>Class</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>类型，默认是该成员属性对应的类型，因此该参数通常可以缺省。</td></tr><tr><td>cascade</td><td>CascadeType[]</td><td>定义<strong>源实体</strong>和关联的<strong>目标实体</strong>间的级联关系。当对<strong>源实体</strong>进行操作时，是否对关联的<strong>目标实体</strong>也做相同的操作。默认没有级联操作。该参数的可选值有：CascadeType.PERSIST（级联新建）CascadeType.REMOVE（级联删除）CascadeType.REFRESH（级联刷新）CascadeType.MERGE（级联更新）CascadeType.ALL（包含以上四项）</td></tr><tr><td>fetch</td><td>FetchType</td><td>定义关联的<strong>目标实体</strong>的数据的加载方式。可选值：FetchType.LAZY（延迟加载）FetchType.EAGER（立即加载，默认）延迟加载：只有在第一次访问<strong>源实体</strong>关联的<strong>目标实体</strong>的时候才去加载。立即加载：在加载<strong>源实体</strong>数据的时候同时去加载好关联的<strong>目标实体</strong>的数据。</td></tr><tr><td>optional</td><td>boolean</td><td><strong>源实体</strong>关联的<strong>目标实体</strong>是否允许为 null，默认为 true。</td></tr></tbody></table><h2 id="JoinTable注解"><a href="#JoinTable注解" class="headerlink" title="@JoinTable注解"></a>@JoinTable注解</h2><p>与 @Table 注解相类似，不同的是，@JoinTable 注解是用于定义关联表，它只能标注在实体类型的成员属性或方法上，常用于多对多或多对一的关联映射。如果没有声明，则使用该注解的默认值。</p><p>多对一时慎用，因为会生成第三张表</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>连接表的名称。</td></tr><tr><td>catalog</td><td>String</td><td>默认为数据库系统缺省的 catalog。</td></tr><tr><td>schema</td><td>String</td><td>默认为用户缺省的 schema。</td></tr><tr><td>joinColumns</td><td>JoinColumn[]</td><td>连接表中的外键列，通过使用 @JoinColumn 注解来声明，该外键参照<strong>源实体</strong>的主键。</td></tr><tr><td>inverseJoinColumns</td><td>JoinColumn[]</td><td>与 <code>joinColumns</code> 参数作用类似，只不过该外键参照的是<strong>目标实体</strong>的主键。</td></tr><tr><td>uniqueConstraints</td><td>UniqueConstraint[]</td><td>表的唯一约束（除了由 @Column 和 @JoinColumn注解指定的约束以及主键的约束之外的约束），通过使用 @UniqueConstraint注解来声明，仅在允许自动更新数据库表结构的场景中起到作用，默认没有其他额外的约束条件。</td></tr><tr><td>indexes</td><td>Index[]</td><td>表的索引，通过使用 @Index注解来声明，仅在允许自动更新数据库表结构的场景中起到作用，默认没有其他额外的索引。</td></tr><tr><td>foreignKey</td><td>ForeignKey</td><td>用于生成表时定义 <code>joinColumns</code> 参数的外键约束。</td></tr><tr><td>inverseForeignKey</td><td>ForeignKey</td><td>用于生成表时定义 <code>inverseJoinColumns</code> 参数的外键约束。</td></tr></tbody></table><p>##@JoinColumn注解</p><p>与 @Column 注解相类似，不同的是，@JoinColumn 注解是用于定义外键列，它只能标注在实体类型的成员属性或方法上，如果没有声明，则使用该注解的默认值。与 @Column 注解相类似，不同的是，@JoinColumn 注解是用于定义外键列，它只能标注在实体类型的成员属性或方法上，如果没有声明，则使用该注解的默认值。</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>外键列的名称，默认为：<code>属性的名称</code> + <code>_</code> + <code>属性对应的实体的主键列的名称</code>（Hibernate 映射列时，若遇到驼峰拼写，会自动添加 <code>_</code> 连接并将大写字母改成小写）。</td></tr><tr><td>unique</td><td>boolean</td><td>外键列的值是否是唯一的。这是 @UniqueConstraint 注解的一个快捷方式，实质上是在声明唯一约束。默认值为 false。</td></tr><tr><td>nullable</td><td>boolean</td><td>外键列的值是否允许为 null。默认为 true。</td></tr><tr><td>insertable</td><td>boolean</td><td>外键列是否包含在 <code>INSERT</code> 语句中，默认为 true。</td></tr><tr><td>updatable</td><td>boolean</td><td>外键列是否包含在 <code>UPDATE</code> 语句中，默认为 true。</td></tr><tr><td>columnDefinition</td><td>String</td><td>生成外键列的 DDL 时使用的 SQL 片段。默认使用推断的类型来生成 SQL 片段以创建此列。</td></tr><tr><td>table</td><td>String</td><td>外键列所属的表的名称。默认值：如果是外键 <code>@OneToOne</code> 或 <code>@ManyToOne</code> 关联，则为<strong>源实体</strong>的表的名称；如果是单向外键 <code>@OneToMany</code> 关系，则为<strong>目标实体</strong>的表的名称；如果是 <code>@ManyToMany</code>、<code>@OneToOne</code>、双向 <code>@ManyToOne</code>、双向 <code>@OneToMany</code> 关联，则为连接表的名称；</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.Spring Boot技术栈1.X(Spring Boot 对 Web 开发的支持)</title>
      <link href="/2018/06/06/SpringBoot/02web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
      <url>/2018/06/06/SpringBoot/02web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot技术栈-Spring-Boot-对-Web-开发的支持"><a href="#Spring-Boot技术栈-Spring-Boot-对-Web-开发的支持" class="headerlink" title="Spring Boot技术栈(Spring Boot 对 Web 开发的支持)"></a>Spring Boot技术栈(Spring Boot 对 Web 开发的支持)</h1><ul><li><p>本篇介绍 Spring Boot中spring-boot-starter-web 对 Web 开发的支持，主要包括 RestFul、获取请求参数、过滤器等功能。</p><p>注：spring-boot-starter-web 是一个用于构建 Web 的 Starter ，包括构建 RESTful 服务应用、Spring MVC 应用等。并且不需要额外配置容器，默认使用 Tomcat 作为嵌入式容器。</p></li></ul><h1 id="1-编写RestFul风格的代码"><a href="#1-编写RestFul风格的代码" class="headerlink" title="1.编写RestFul风格的代码"></a>1.编写RestFul风格的代码</h1><p> 在 Spring Boot 体系中，天然对 Json 支持。无论返回集合还是对象，Spring Boot 均可以将其转化为 Json 字符串，特别适合我们给其他系统提供接口时使用。</p><ol><li><p>在domain包下新建一个实体类 Person，Person 信息如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*@author haoyongliang</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Person &#123;</span><br><span class="line">  private String name;&#x2F;&#x2F;姓名</span><br><span class="line">  private int age;&#x2F;&#x2F;年龄</span><br><span class="line">  private String address;&#x2F;&#x2F;住址</span><br><span class="line">  &#x2F;&#x2F;省略无参、全参构造&#x2F;getter、setter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在web包下新建一个类 PersonController ,PersonController 信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*@autor haoyongliang</span><br><span class="line">*&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;personController&quot;)</span><br><span class="line">public class PersonController &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 演示返回一个集合对象的JSON数据，</span><br><span class="line">   * 访问方式 http:&#x2F;&#x2F;localhost:8080&#x2F;personController&#x2F;findAllPerson</span><br><span class="line">   * @return</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @RequestMapping(&quot;findAllPerson&quot;)</span><br><span class="line">  public ArrayList&lt;Person&gt; findAllPerson()&#123;</span><br><span class="line">      ArrayList&lt;Person&gt; persons &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      persons.add(new Person(&quot;JACK&quot;,23,&quot;山西晋中榆次&quot;));</span><br><span class="line">      persons.add(new Person(&quot;ROSE&quot;,23,&quot;山西太原小店&quot;));</span><br><span class="line">      persons.add(new Person(&quot;ROBIN&quot;,23,&quot;山西阳泉&quot;));</span><br><span class="line"></span><br><span class="line">      return persons;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 演示返回一个实体类对象的JSON数据。</span><br><span class="line">   * 访问方式 http:&#x2F;&#x2F;localhost:8080&#x2F;personController&#x2F;findPerson</span><br><span class="line">   * @return</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @RequestMapping(&quot;findPerson&quot;)</span><br><span class="line">  public Person findPerson()&#123;</span><br><span class="line">      return new Person(&quot;JACK&quot;,23,&quot;山西晋中榆次&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="http://localhost:8080/personController/findAllPerson" target="_blank" rel="noopener">http://localhost:8080/personController/findAllPerson</a> 返回结果如下</p><p><img src="/" alt="0" class="lazyload" data-src="./web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/findAllStudent.jpg"></p></li><li><p>访问 <a href="http://localhost:8080/personController/findPerson" target="_blank" rel="noopener">http://localhost:8080/personController/findPerson</a> 返回结果如下</p><p><img src="/" alt="1" class="lazyload" data-src="./web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/findStudent.jpg"></p><p><strong>注：</strong> 浏览器中的返回结果看起来非常美观是因为使用了Google浏览器插件JSON-handle，安装方法参见<a href="https://jingyan.baidu.com/article/c910274bb4b659cd361d2dad.html" target="_blank" rel="noopener" title="点此查看JSON-handle的安装方法">https://jingyan.baidu.com/article/c910274bb4b659cd361d2dad.html</a></p></li></ol><h1 id="2-POST和GET传参-amp-参数校验"><a href="#2-POST和GET传参-amp-参数校验" class="headerlink" title="2.POST和GET传参&amp;参数校验"></a>2.POST和GET传参&amp;参数校验</h1><h2 id="1-POST-传参"><a href="#1-POST-传参" class="headerlink" title="1.POST 传参"></a>1.POST 传参</h2><ol><li><p>通过 @RequestMapping 注解的 method 属性指定请求方式为POST</p></li><li><p>给方法添加形式参数用于接收客户端请求发送过来的数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 如果形式参数是Person类型，只要是 Person 的属性都会被自动填充到 person 对象中</span><br><span class="line"> * 访问路径http:&#x2F;&#x2F;localhost:8080&#x2F;personController&#x2F;showPersonInfo1</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(value &#x3D; &quot;showPersonInfo1&quot;, method &#x3D; RequestMethod.POST)</span><br><span class="line">public Person showPersonInfo(Person person)&#123;</span><br><span class="line">    return person;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line"> * 接收name，age，address参数并手动将其封装成Person对象</span><br><span class="line"> * 访问路径http:&#x2F;&#x2F;localhost:8080&#x2F;personController&#x2F;showPersonInfo2</span><br><span class="line"> * @</span><br><span class="line"> * m person</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(value &#x3D; &quot;showPersonInfo2&quot;, method &#x3D; RequestMethod.POST)</span><br><span class="line">public Person showPersonInfo(String name, int age, String address)&#123;</span><br><span class="line">    Person p &#x3D; new Person(name,age,address);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><p>  <strong>注：</strong> 在使用第一种方式接受数据的时候<strong>Person类必须有一个无参构造</strong>，框架内部先通过无参构造创建对象，然后调用set方法赋值，最后将对象当作 <em>实际参数</em> 赋值给 <em>形式参数</em></p><h2 id="2-GET-传参"><a href="#2-GET-传参" class="headerlink" title="2.GET 传参"></a>2.GET 传参</h2><ol><li><p>@RequestMapping 注解的method属性默认就是GET请求，当然也可以手动指定</p></li><li><p>使用 @RequestParam 或者 @PathVariable 来接收参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 访问路径http:&#x2F;&#x2F;localhost:8080&#x2F;personController&#x2F;getDetails&#x2F;A1001?param1&#x3D;&quot;美国&quot;¶m2&#x3D;&quot;纽约&quot;</span><br><span class="line"> * @param id</span><br><span class="line"> * @param param1</span><br><span class="line"> * @param param2</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RequestMapping(&quot;&#x2F;getDetails&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">public String getDetails(@PathVariable(value&#x3D;&quot;id&quot;) String id,</span><br><span class="line">                         @RequestParam(value&#x3D;&quot;param1&quot;, required&#x3D;true) String param1,</span><br><span class="line">                         @RequestParam(value&#x3D;&quot;param2&quot;, required&#x3D;false) String param2)&#123;</span><br><span class="line"> </span><br><span class="line">    return &quot;访问成功:id&#x3D;&quot;+id+&quot;,param1&#x3D;&quot;+param1+&quot;,param2&#x3D;&quot;+param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   结果如下</p><p><img src="/" alt="1" class="lazyload" data-src="./web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/getDetails.jpg"></p></li></ol><ul><li><p><strong>@RequestParam</strong>和<strong>@PathVariable</strong>注解的作用</p><ul><li><p>@RequestParam 和 @PathVariable 两个都可以接收参数.@RequestParam是从请求中获取数据，也就是获取URL中?后面的数据。而@PathVariable则是获取URL地址中的一部分值。</p></li><li><p><strong>@RequestParam</strong> 支持下面四种参数</p><ol><li>defaultValue 如果本次请求没有携带这个参数，或者参数为空，那么就会启用默认值</li><li>name 绑定本次参数的名称，要跟URL上面的一样</li><li>required 这个参数是不是必须的</li><li>value 跟name一样的作用，是name属性的一个别名 </li></ol><ul><li><strong>建议：</strong>作为一种最佳实践，几乎所有开发人员都在按照以下方式推荐。如果你想识别资源，你应该使用路径变量。但是如果你想排序或过滤项目，那么你应该使用查询参数。</li></ul></li></ul></li></ul><h2 id="3-参数校验"><a href="#3-参数校验" class="headerlink" title="3.参数校验"></a>3.参数校验</h2><p> 参数校验在我们日常开发中非常常见，最基本的校验有判断属性是否为空、长度是否符合要求等，在传统的开发模式中需要写一堆的 if else 来处理这些逻辑，很繁琐，效率也低。使用 @Valid + BindingResult 就可以优雅地解决这些问题，接下来看看示例：</p><ol><li><p>首先在 PersonController 添加一个保存用户的方法 savePerson，参数为 Person，现在需要对参数 Person  做校验：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    @NotEmpty(message&#x3D;&quot;姓名不能为空&quot;)</span><br><span class="line">    private String name;</span><br><span class="line">    @Max(value &#x3D; 100,message &#x3D; &quot;年龄不能大于100&quot;)</span><br><span class="line">    @Min(value &#x3D; 1,message &#x3D; &quot;年龄不能小于1&quot;)</span><br><span class="line">    private int age;</span><br><span class="line">    @Length(message &#x3D; &quot;地址长度应该在7-10个汉字之间&quot;,min &#x3D; 14,max&#x3D;20)</span><br><span class="line">    @NotEmpty(message &#x3D; &quot;地址不能为空&quot;)</span><br><span class="line">    private String address;</span><br><span class="line">    &#x2F;&#x2F;省略无参、全参构造&#x2F;getter、setter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>Spring Boot 的参数校验其实是依赖于 hibernate-validator 来进行。现在模拟对参数 User 进行参数校验，使用 @Valid + BindingResult，校验后如果有错误将错误打印出来，代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;savePerson&quot;)</span><br><span class="line">public String savePerson(@Valid Person person, BindingResult result)&#123;</span><br><span class="line">    String message &#x3D; &quot;&quot;;</span><br><span class="line">    if(result.hasErrors())&#123;</span><br><span class="line">        List allErrors &#x3D; result.getAllErrors();</span><br><span class="line">        for (ObjectError error : allErrors) &#123;</span><br><span class="line">            message +&#x3D; error.getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if(message&#x3D;&#x3D;&quot;&quot;)&#123;</span><br><span class="line">        message &#x3D; &quot;添加成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>访问<a href="http://localhost:8080/personController/savePerson，结果如下" target="_blank" rel="noopener">http://localhost:8080/personController/savePerson，结果如下</a></p><p><img src="/" alt="1" class="lazyload" data-src="./web%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/valid.jpg"></p><ol start="4"><li><strong>附：</strong>java校验api所提供的校验注解</li></ol><ul><li>@AssertFalse 所注解的元素必须为 boolean类型,并且值为 false</li><li>@AssertTrue 所注解的元素必须为 boolean类型,并且值为 true</li><li>Digits 所注解的元素必须是数字,并且它的值必须有指定的位数</li><li>Future 所注解的值必须是一个将来的日期</li><li>Past 所注解的值必须是一个已经过去的日期</li><li>Min 所注解的元素必须是数字,并且它的值必须小于等于给定的值</li><li>Max 所注解的元素必须是数字,并且它的值必须大于等于给定的值</li><li>NotNull 所注解的元素不能为null</li><li>NotEmpty 所注解元素不能为 空(注意不是null)</li><li>Null 做注解的元素必须为null</li><li>Size 所注解的元素必须是String,集合,或数组,并且它的长度要符合给定的范围</li><li>Pattern 所注解的元素的值必须匹配给定的正则表达式</li></ul></li></ol><h1 id="3-自定义过滤器"><a href="#3-自定义过滤器" class="headerlink" title="3.自定义过滤器"></a>3.自定义过滤器</h1><h2 id="1-过滤器功能"><a href="#1-过滤器功能" class="headerlink" title="1. 过滤器功能"></a>1. 过滤器功能</h2><p> 过滤器可以用于记录请求日志、排除有 XSS 威胁的字符、执行权限验证等等</p><h2 id="2-自定义过滤器步骤"><a href="#2-自定义过滤器步骤" class="headerlink" title="2. 自定义过滤器步骤"></a>2. 自定义过滤器步骤</h2><ol><li><p>创建一个类实现 javax.servlet.Filter 接口</p></li><li><p>将创建的类挂载到过滤器链上</p><p>a. 创建MyFilter类实现Filter接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class MyFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req &#x3D; (HttpServletRequest) request;</span><br><span class="line">        &#x2F;&#x2F;打印请求Url</span><br><span class="line">        System.out.println(&quot;当前客户端正在请求访问的路径是:&quot; + req.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> b. 通过@Configuration + @Bean 注解将过滤器注入到 IOC 容器中，并通过 setOrder 方法设置过滤器位置（过滤器链中的位置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MyFilterConfiguration &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean myFilterRegistration() &#123;</span><br><span class="line">        FilterRegistrationBean registration &#x3D; new FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(new MyFilter());&#x2F;&#x2F;添加过滤器</span><br><span class="line">        registration.addUrlPatterns(&quot;&#x2F;*&quot;);&#x2F;&#x2F;设置过滤路径，&#x2F;*所有路径</span><br><span class="line">        registration.addInitParameter(&quot;name&quot;, &quot;alue&quot;);&#x2F;&#x2F;添加默认参数</span><br><span class="line">        registration.setName(&quot;MyFilter&quot;);&#x2F;&#x2F;设置优先级</span><br><span class="line">        registration.setOrder(1);&#x2F;&#x2F;设置优先级</span><br><span class="line">        return registration;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c. 重新启动项目,访问任意一个服务，会发现在控制台中都会打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前客户端正在请求访问的路径是:....</span><br></pre></td></tr></table></figure><h2 id="3-Configuration和-Bean注解说明"><a href="#3-Configuration和-Bean注解说明" class="headerlink" title="3. @Configuration和@Bean注解说明:"></a>3. <strong>@Configuration和@Bean注解说明:</strong></h2></li><li><p>@Configuration 标注在类上，相当于把该类作为spring的xml配置文件中的 &lt;beans&gt;，作用为：配置spring容器(应用上下文),上文中在MyFilterConfiguration类上添加了该注解，相当于创建了一个beans.xml配置文件里面的内容是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xmlns:jdbc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jdbc&quot;  </span><br><span class="line">xmlns:jee&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jee&quot; xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">xmlns:util&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&quot; xmlns:task&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;task&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-4.0.xsd </span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-4.0.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jdbc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jdbc&#x2F;spring-jdbc-4.0.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jee http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;jee&#x2F;spring-jee-4.0.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-4.0.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;util&#x2F;spring-util-4.0.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;task http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;task&#x2F;spring-task-4.0.xsd&quot; default-lazy-init&#x3D;&quot;false&quot; &gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>@Bean标注在方法上(返回某个实例的方法)，等价于spring的xml配置文件中的&lt;bean&gt;，作用为：注册bean对象。</p><ul><li><p>@Bean注解在返回实例的方法上，如果未通过@Bean指定bean的名称，则默认与标注的方法名相同。</p></li><li><p>@Bean注解默认作用域为单例singleton作用域，可通过@Scope(“prototype”)设置为原型作用域</p><p>上文中在myFilterRegistration()方法上加了@Bean注解，表示在spring启动的时候会执行该方法并将结果作为一个bean注册到容器中，该bean的名字是”myFilterRegistration”</p></li></ul></li></ol><h1 id="4-属性配置和自定义属性配置"><a href="#4-属性配置和自定义属性配置" class="headerlink" title="4.属性配置和自定义属性配置"></a>4.属性配置和自定义属性配置</h1><p>  如果需要修改自定义修改默认配置，spring boot 提供了很简便的方法，只需要在application.properties 中添加修改相应的配置。（spring boot启动的时候会读取application.properties这份默认配置）</p><h2 id="1-属性配置"><a href="#1-属性配置" class="headerlink" title="1.属性配置"></a>1.属性配置</h2><p>  例如 : spring boot 开发web应用的时候，默认tomcat的启动端口为8080，如果需要修改默认的端口，则需要在application.properties 添加以下记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8888</span><br></pre></td></tr></table></figure><p>重启项目，启动日志可以看到：Tomcat started on port(s): 8888 (http) 启动端口为8888，浏览器中访问 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> 能正常访问。</p><h2 id="2-自定义属性配置"><a href="#2-自定义属性配置" class="headerlink" title="2.自定义属性配置"></a>2.自定义属性配置</h2><p>  在application.properties中除了可以修改默认配置，我们还可以在这配置自定义的属性，并在实体bean中加载出来。</p><ol><li><p>在application.properties中添加自定义属性配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cn.itcast.username &#x3D; LuRenJia</span><br><span class="line">cn.itcast.password &#x3D; admin</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>编写Bean类，加载属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;cn.itcast&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">   private String username;</span><br><span class="line">   private String password;</span><br><span class="line"> </span><br><span class="line">   &#x2F;&#x2F;省略getter&#x2F;setter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里引入ConfigurationProperties注解的时候会报错，需要添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写控制器看看是否将数据成功加载到User中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;userController&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">   @Autowired</span><br><span class="line">   private User user;</span><br><span class="line"> </span><br><span class="line">   @RequestMapping(value &#x3D; &quot;info&quot;,method &#x3D; RequestMethod.GET)</span><br><span class="line">   public String info()&#123;</span><br><span class="line">       return user.getUsername()+&quot;,&quot;+user.getPassword();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>访问<a href="http://localhost:8080/userController/info" target="_blank" rel="noopener">http://localhost:8080/userController/info</a> 查看结果，在页面显示如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LuRenJia,admin</span><br></pre></td></tr></table></figure><p>如果测试中出现中文乱码，可安装以下方法进行设置：</p><p>依次单击 File =&gt; Settings =&gt; Editor =&gt; File Encodings 命令，将 Properties Files (*.properties) 下的 Default encoding for properties files 设置为 UTF-8，将 Transparent native-to-ascii conversion 前的复选框勾选上。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.Spring Boot1.X技术栈(快速上手SpringBoot)</title>
      <link href="/2018/06/05/SpringBoot/01%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/"/>
      <url>/2018/06/05/SpringBoot/01%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot技术栈-快速上手SpringBoot"><a href="#Spring-Boot技术栈-快速上手SpringBoot" class="headerlink" title="Spring Boot技术栈(快速上手SpringBoot)"></a>Spring Boot技术栈(快速上手SpringBoot)</h1><ul><li>本篇带大家搭建开发环境，感受SpringBoot快速开发带来的好处</li></ul><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><p>Spring Boot 是一套全新的框架，它来自于 Spring 大家族，因此 Spring 所有具备的功能它都有，而且更容易使用；Spring Boot 以约定大于配置的核心思想，默认帮我们进行了很多设置，<strong>多数 Spring Boot 应用只需要很少的 Spring 配置</strong>。Spring Boot 开发了很多的应用集成包，支持绝大多数开源软件，让我们以很低的成本去集成其他主流开源软件。</p><p>Spring Boot 所集成的技术栈，几乎都是各互联网公司在使用的技术，按照 Spring Boot 的路线去学习，基本可以了解国内外互联网公司的技术特点。</p><p>Spring Boot 和微服务架构都是未来软件开发的一个大趋势，越早参与其中受益越大。</p><h2 id="1-开发环境搭建"><a href="#1-开发环境搭建" class="headerlink" title="1.开发环境搭建"></a>1.开发环境搭建</h2><h3 id="1-创建和导入项目"><a href="#1-创建和导入项目" class="headerlink" title="1.创建和导入项目"></a>1.创建和导入项目</h3><ol><li>访问 <a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></li><li>选择构建工具 Maven Project、Spring Boot 版本 1.5.8 及一些工程基本信息，可参考下图：<br><img src="/" alt="0" class="lazyload" data-src="./%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/gouJianXiangMu.jpg"></li><li>单击 Generate Project 按钮并下载项目压缩包。</li><li>这里使用的是 Idea，单击 File | New | Model from Existing Source.. | 选择解压后的文件夹 | OK 命令， 选择 Maven ，一路 Next，OK Done!</li></ol><h4 id="对上面的配置做一个解释"><a href="#对上面的配置做一个解释" class="headerlink" title="对上面的配置做一个解释"></a>对上面的配置做一个解释</h4><ul><li>第一个选择框选择创建以 Maven 构建项目，还是以 Gradle 构建项目，这是两种不同的构建方式，其中 Gradel 配置内容更简洁一些，并且包含了 Maven 的使用，不过日常使用 Maven 居多。</li><li>第二个选择框选择编程语言，现在支持 Java、Kotlin 和 Groovy。</li><li>第三个选择框选择 Spring Boot 版本，可以看出 Spring Boot 2.0 已经到了第五个里程碑了。在实际使用中，我们会优先使用稳定版本，1.0 的最新稳定版本是 1.5.8，也是我们演示使用的版本。</li></ul><h4 id="下面就是项目的配置信息了。"><a href="#下面就是项目的配置信息了。" class="headerlink" title="下面就是项目的配置信息了。"></a>下面就是项目的配置信息了。</h4><ul><li>Group：一般填写公司域名，比如传智播客填 cn.itcast</li><li>Artifact：可以理解为项目的名称，可以根据实际情况来填，本次演示填写 springBootDemo。</li><li>Dependencies：在这块添加我们项目所依赖的 Spring Boot 组件，可以多选。本次选择 Web、devtools 两个模块。</li></ul><h3 id="2-项目结构介绍"><a href="#2-项目结构介绍" class="headerlink" title="2.项目结构介绍"></a>2.项目结构介绍</h3><p>Spring Boot 的基础结构共三个文件：</p><p><img src="/" alt="1" class="lazyload" data-src="./%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/mulujiegou.jpg"></p><ul><li>src/main/java：程序开发以及主程序入口</li><li>src/main/resources：配置文件</li><li>src/test/java：测试程序</li></ul><h3 id="3-Sping-Boot-建议的包结构"><a href="#3-Sping-Boot-建议的包结构" class="headerlink" title="3.Sping Boot 建议的包结构"></a>3.Sping Boot 建议的包结构</h3><p>root package 结构：cn.giftsstore.myProject</p><pre>myproject +-src    +- main         +- java              +- cn.giftsstore.myProject                    +- comm                    +- domain                    +- repository                    +- service                    +- web                    +- Application.java         +- resources              +- static              +- templates              +- application.properties    +- test +-pom.xml</pre><h3 id="4-各包名介绍"><a href="#4-各包名介绍" class="headerlink" title="4.各包名介绍"></a>4.各包名介绍</h3><ul><li><p>Application.java：建议放到根目录下面，是项目的启动类，Spring Boot 项目只能有一个 main() 方法。</p></li><li><p>comm：目录建议放置公共的类，如全局的配置文件、工具类等。</p></li><li><p>domain：目录主要用于实体（Entity）与数据访问层（Repository）。</p></li><li><p>repository：数据库访问层代码。</p></li><li><p>service：该层主要是业务类代码。</p></li><li><p>web：该层负责页面访问控制。</p></li><li><p>resources 目录下：</p><ul><li>static：目录存放 Web 访问的静态资源，如 JS、CSS、图片等。</li><li>templates：目录存放页面模板。</li><li>application.properties：项目的配置信息。</li><li>test 目录存放单元测试的代码；pom.xml 用于配置项目依赖包，以及其他配置。</li></ul></li></ul><p>采用默认配置可以省去很多设置，当然也可以根据自己的喜好来进行更改。最后，启动 Application main 方法，至此一个 Java 项目搭建好了！</p><h2 id="2-简单-Web-开发"><a href="#2-简单-Web-开发" class="headerlink" title="2.简单 Web 开发"></a>2.简单 Web 开发</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><p> 可以在 Spring Initializr 上面添加，也可以手动在 pom.xml 中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>pom.xml 文件中默认有两个模块：<ul><li>spring-boot-starter：核心模块，包括自动配置支持、日志和 YAML；</li><li>spring-boot-starter-test：测试模块，包括 JUnit、Hamcrest、Mockito。</li></ul></li></ul><h3 id="2-编写控制层-controller-代码"><a href="#2-编写控制层-controller-代码" class="headerlink" title="2.编写控制层(controller)代码"></a>2.编写控制层(controller)代码</h3><pre>@RestControllerpublic class HelloWorldController {    @RequestMapping("/hello")    public String hello() {        return "Hello World";    }}</pre><p>@RestController 的意思就是 controller 里面的方法都以 json 格式输出，不用再配置什么 jackjson 的了！</p><p>如果配置为@Controller 就代表着输出为页面内容。</p><h3 id="3-查看运行结果"><a href="#3-查看运行结果" class="headerlink" title="3.查看运行结果"></a>3.查看运行结果</h3><p> 启动主程序，打开浏览器访问 <a href="http://localhost:8080/hello，就可以看到以下内容，是不是很简单！" target="_blank" rel="noopener">http://localhost:8080/hello，就可以看到以下内容，是不是很简单！</a></p><pre>Hello World</pre><h3 id="4-URL传参"><a href="#4-URL传参" class="headerlink" title="4.URL传参"></a>4.URL传参</h3><blockquote><p>这里仅仅做一个简单传参,第二章会详细介绍如何传参</p></blockquote><pre>@RestControllerpublic class HelloWorldController {    @RequestMapping("/hello")    public String index(String name) {        return "Hello World, " +name;    }}</pre><p>重新启动项目，访问 <a href="http://localhost:8080/hello?name=neo，返回内容如下：" target="_blank" rel="noopener">http://localhost:8080/hello?name=neo，返回内容如下：</a></p><pre>Hello World，neo</pre><p>经过上一个测试发现，修改 controller 内相关代码，就需要重新启动项目才能生效，这样做很麻烦是不是，别着急。Spring Boot 提供了另外一个组件来解决。</p><h2 id="3-热部署"><a href="#3-热部署" class="headerlink" title="3.热部署"></a>3.热部署</h2><p>热启动就需要用到我们在一开始引入的另外一个组件：devtools。它是 Spring Boot 提供的一组开发工具包，其中就包含我们需要的热部署功能。但是在使用这个功能之前还需要再做一些配置。</p><ol><li><p>在 dependency 中添加 optional 属性，并设置为 true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-Devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 plugin 中配置另外一个属性 fork，并且配置为 true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;&#x2F;fork&gt;</span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置 Idea</p><ol><li>选择 File-Settings-Compiler 勾选 Build project automatically，低版本 Idea 勾选 make project automatically。<br><img src="/" alt="2" class="lazyload" data-src="./%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/ideahot.jpg"></li><li>使用快捷键：CTRL + SHIFT + A 输入Registry 找到选项 compile.automake.allow.when.app.running 勾选<br><img src="/" alt="3" class="lazyload" data-src="./%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BSpringBoot/0.6294533078536897.png"></li></ol><p>全部配置完成后，Idea 就支持热部署了，大家可以试着去改动一下代码就会发现 Spring Boot 会自动重新加载，再也不需要我们手动点击重新部署了。</p></li></ol><p>为什么 Idea 需要多配置后面这一步呢，因为 Idea 默认不是自动编译的，需要我们手动去配置后才会自动编译，而热部署依赖于项目的自动编译功能。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.定投6年，以亏损收场，她到底做错了什么？</title>
      <link href="/2016/10/10/%E7%90%86%E8%B4%A2/02.%E5%AE%9A%E6%8A%956%E5%B9%B4%EF%BC%8C%E4%BB%A5%E4%BA%8F%E6%8D%9F%E6%94%B6%E5%9C%BA%EF%BC%8C%E5%A5%B9%E5%88%B0%E5%BA%95%E5%81%9A%E9%94%99%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2016/10/10/%E7%90%86%E8%B4%A2/02.%E5%AE%9A%E6%8A%956%E5%B9%B4%EF%BC%8C%E4%BB%A5%E4%BA%8F%E6%8D%9F%E6%94%B6%E5%9C%BA%EF%BC%8C%E5%A5%B9%E5%88%B0%E5%BA%95%E5%81%9A%E9%94%99%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>今天听了一个惨烈的故事。球仔一同学，从2010年开始定投某只基金，每个月8号投300块钱，坚持了整整六年，昨天终于全部赎回，以净亏损200多收场。她自己觉得还挺高兴的，觉得每个月省300块钱，坚持下来竟然在基金账户里面攒了几万。</p><p>球仔却不以为然。这明显是一个很凄凉的故事嘛！因为她的定投，收益率曾经高达50%以上。可惜她没有取出，眼睁睁看着收益全部跌没了。</p><p>哦！不对！还不是眼睁睁，她是设定了定投之后，每个月就让它从银行卡扣钱，六年时间都没去管收益如何。球仔听她讲了之后，觉得完全不可理喻。</p><p>这操作，简直太烂了！！</p><p>她犯了个很大的错误。错在哪里呢？基金定投，可以没有止损，但是一定要有止盈。</p><p>基金定投也要止盈</p><p>照理说，任何投资都需要有止盈和止损，不过基金定投，止损不那么重要，但是一定得止盈。你们知道，股市是周期性牛熊转换的。如果定投多年积累的收益，在牛市到来的时候没有止盈，你的收益终究会随着熊市的到来化为乌有。</p><p>球仔的同学定投的这只基金叫博时平衡配置混合（代码：050007），这是一只混合基金，有十年历史了。同学在定投的过程中，2015年年初，定投收益达到37%，2015年6月股灾前定投收益率最高超过50%，可惜这段时间她一直没有止盈赎回，直到所有收益消失殆尽。哪怕是第一次暴跌的之后，其定投收益也还有20%以上，依然没有赎回，错过了一次又一次机会。</p><p>怎么止盈？你可以给自己设定一个目标，一旦受益达到预期目标，马上抛出。</p><p><img src="/" alt="" class="lazyload" data-src="./02.%E5%AE%9A%E6%8A%956%E5%B9%B4%EF%BC%8C%E4%BB%A5%E4%BA%8F%E6%8D%9F%E6%94%B6%E5%9C%BA%EF%BC%8C%E5%A5%B9%E5%88%B0%E5%BA%95%E5%81%9A%E9%94%99%E4%BA%86%E4%BB%80%E4%B9%88/1.jpg"></p><p>▲该同学的定投走势</p><p>基金也要密切关注市场波动</p><p>有些人觉得，定投就是设定好投资策略之后，不管基金当前的净值如何，每个月自动存钱进去就行了。</p><p>我同学就是这样子对待定投的。大错特错！</p><p>定投可以代替储蓄，但是不等于储蓄。定投也是投资，是为了在控制风险的前提下，让收益最大化。一般我们定投的周期设定为三到五年。定投的前期，基金亏了也不用慌。但是我们要关注，现在是不是已经到牛市了，如果到了牛市相对高点，或者达到了自己的止盈线，就抛了吧。</p><p>在定投过程中，如果股市大幅下挫，还可以加大该周期定投的金额，以更便宜的价格获得更多的基金份额。这个也是基金定投的常用技巧之一，成熟的定投者都应该学会这点。</p><p>什么类型的基金适合定投？</p><p>球仔那位同学做定投，选了一只混合型基金。混合基金可不可以定投？当然可以，但是，并不是最好的选择。</p><p>首先，债券市场的牛熊周期更明显，更容易判断，一次性投资比通常定投的效率和收益都更高；其次，债券市场的波动比股市弱很多，定投的预期收益也低很多。混合型基金里面有不少的债券比例，当然不如股票型基金给力。</p><p>当然，如果你直接定投债券基金，那是最愚蠢的。</p><p>波动越大的基金越适合定投，所以定投股票基金比较合适，指数基金更佳。</p><p>下图为基金定投的微笑曲线，越深越好，波动越大的基金越适合定投。</p><p><img src="/" alt="" class="lazyload" data-src="./02.%E5%AE%9A%E6%8A%956%E5%B9%B4%EF%BC%8C%E4%BB%A5%E4%BA%8F%E6%8D%9F%E6%94%B6%E5%9C%BA%EF%BC%8C%E5%A5%B9%E5%88%B0%E5%BA%95%E5%81%9A%E9%94%99%E4%BA%86%E4%BB%80%E4%B9%88/top.jpg"></p><p>什么时候开始基金定投？</p><p>答：现在。</p><p>为什么呢？2015年牛市崩盘一下，A股已经经历了多次股灾，现在正处于熊市底部（不一定是最底部，但至少也是相对低位了），现在开始定投，不正好是低成本获取筹码的大好机会么？现在开始定投，静待下一次牛市到来。恩，球仔已经开始了，有人要跟上么？</p>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<p><img src="/" alt="" class="lazyload" data-src="index/head.jpg"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
